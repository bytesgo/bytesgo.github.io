<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://bytesgo.com/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://bytesgo.com/rss.xml" rel="self" type="application/rss+xml"/>
    <title>bytesgo</title>
    <link>https://bytesgo.com/</link>
    <description>bytesgo.com</description>
    <language>zh-CN</language>
    <pubDate>Tue, 17 Dec 2024 03:14:32 GMT</pubDate>
    <lastBuildDate>Tue, 17 Dec 2024 03:14:32 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>数字货币</category>
    <category>jdk</category>
    <category>grpc</category>
    <category>tensorflow</category>
    <category>DDD</category>
    <category>android</category>
    <category>openjdk</category>
    <item>
      <title>虚拟货币</title>
      <link>https://bytesgo.com/blog/coin/2021/about%20coin.html</link>
      <guid>https://bytesgo.com/blog/coin/2021/about%20coin.html</guid>
      <source url="https://bytesgo.com/rss.xml">虚拟货币</source>
      <description>缘起
最近虚拟货币很火啊，BTC价格一度达到360000人民币。</description>
      <category>数字货币</category>
      <pubDate>Wed, 24 Feb 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>缘起</h2>
<p>最近虚拟货币很火啊，BTC价格一度达到360000人民币。</p>
]]></content:encoded>
    </item>
    <item>
      <title>最新的免费版JDK版本下载</title>
      <link>https://bytesgo.com/blog/jdk/2020/2020-10-%E6%9C%80%E5%90%8E%E7%9A%84%E5%85%8D%E8%B4%B9jdk%E4%B8%8B%E8%BD%BD.html</link>
      <guid>https://bytesgo.com/blog/jdk/2020/2020-10-%E6%9C%80%E5%90%8E%E7%9A%84%E5%85%8D%E8%B4%B9jdk%E4%B8%8B%E8%BD%BD.html</guid>
      <source url="https://bytesgo.com/rss.xml">最新的免费版JDK版本下载</source>
      <description>最新的免费版JDK版本下载
众所周知，在2019年4月16日，oracle更新了JDK的授权协议，简单来说，就是个人可以免费使用JDK，但是商用的话需要获得Oracle的授权协议，也就是说公司不能免费部署生产环境了。
但是，另一方面，新的授权协议只对2019年4月16日后发布的JDK版本生效，那么最新的免费版本是什么呢？
打开下面的网页可以看到jdk的...</description>
      <category>jdk</category>
      <pubDate>Thu, 22 Oct 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>最新的免费版JDK版本下载</h2>
<p>众所周知，在2019年4月16日，oracle更新了JDK的授权协议，简单来说，就是个人可以免费使用JDK，但是商用的话需要获得Oracle的授权协议，也就是说公司不能免费部署生产环境了。</p>
<p>但是，另一方面，新的授权协议只对2019年4月16日后发布的JDK版本生效，那么最新的免费版本是什么呢？</p>
<p>打开下面的网页可以看到jdk的归档下载界面在Java SE8 有两个下载链接：</p>
<ul>
<li>8u202及之前的版本</li>
<li>8u221及之后的版本</li>
</ul>
<p><a href="https://www.oracle.com/java/technologies/oracle-java-archive-downloads.html" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/oracle-java-archive-downloads.html</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/yaolinxue/img/2020-10-22/1603374781381-image.png" alt="jdk下载截图"></p>
<p>这样，我们用户可以根据自己的需求下载响应的版本，如果需要在生产环境使用而又不想付费的话，就下载8u202及之前的jdk版本。如果公司不差钱的话，或者公司需要使用更新版本的功能特性就下载8u221及之后的版本。</p>
<h2>新的选择</h2>
<p>对于想用新版本的JDK功能，而又不想付费且不想被起诉的话，还有另一种选择：OpenJDK。OpenJDK和JDK的关系，就像是CentOS和Redhat的关系，代码都是一样的，功能也是相同的，完全可以满足一般公司的需求。当然，公司资源充足的话，完全可以根据集团公司的业务需求定制一套自己的JDK版本。</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/yaolinxue/img/2020-10-22/1603374781381-image.png" type="image/png"/>
    </item>
    <item>
      <title>grpc-example 基于gRPC实现的简单rpc框架</title>
      <link>https://bytesgo.com/blog/grpc/2020/grpc%20example.html</link>
      <guid>https://bytesgo.com/blog/grpc/2020/grpc%20example.html</guid>
      <source url="https://bytesgo.com/rss.xml">grpc-example 基于gRPC实现的简单rpc框架</source>
      <description>grpc-example
基于gRPC实现的简单rpc框架
配置
属性配置
pom.xml中配置依赖的gRPC版本号

Maven依赖

Maven插件

框架开发
Protobuf文件
创建文件 src/main/proto/crpc_protocol.proto

执行如下命令会生成Protobuf文件对应的Java类

公用基础模型类
Invoc...</description>
      <category>grpc</category>
      <pubDate>Thu, 01 Oct 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>grpc-example</h2>
<p>基于gRPC实现的简单rpc框架</p>
<h2>配置</h2>
<h3>属性配置</h3>
<p>pom.xml中配置依赖的gRPC版本号</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">	&lt;properties&gt;</span>
<span class="line">		&lt;grpc.version&gt;1.32.1&lt;/grpc.version&gt;</span>
<span class="line">		&lt;!-- Message源文件输出目录 --&gt;</span>
<span class="line">		&lt;javaOutputDirectory&gt;${project.basedir}/src/main/java-proto&lt;/javaOutputDirectory&gt;</span>
<span class="line">		&lt;!-- gRPC源文件输出目录 --&gt;</span>
<span class="line">		&lt;protocPluginOutputDirectory&gt;${project.basedir}/src/main/java-grpc&lt;/protocPluginOutputDirectory&gt;</span>
<span class="line">	&lt;/properties&gt;</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>Maven依赖</h3>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">	&lt;dependencies&gt;</span>
<span class="line">		&lt;dependency&gt;</span>
<span class="line">			&lt;groupId&gt;io.grpc&lt;/groupId&gt;</span>
<span class="line">			&lt;artifactId&gt;grpc-netty&lt;/artifactId&gt;</span>
<span class="line">			&lt;version&gt;${grpc.version}&lt;/version&gt;</span>
<span class="line">		&lt;/dependency&gt;</span>
<span class="line">		&lt;dependency&gt;</span>
<span class="line">			&lt;groupId&gt;io.grpc&lt;/groupId&gt;</span>
<span class="line">			&lt;artifactId&gt;grpc-protobuf&lt;/artifactId&gt;</span>
<span class="line">			&lt;version&gt;${grpc.version}&lt;/version&gt;</span>
<span class="line">		&lt;/dependency&gt;</span>
<span class="line">		&lt;dependency&gt;</span>
<span class="line">			&lt;groupId&gt;io.grpc&lt;/groupId&gt;</span>
<span class="line">			&lt;artifactId&gt;grpc-stub&lt;/artifactId&gt;</span>
<span class="line">			&lt;version&gt;${grpc.version}&lt;/version&gt;</span>
<span class="line">		&lt;/dependency&gt;</span>
<span class="line">		&lt;dependency&gt;</span>
<span class="line">			&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span>
<span class="line">			&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span>
<span class="line">			&lt;version&gt;1.2.74&lt;/version&gt;</span>
<span class="line">		&lt;/dependency&gt;</span>
<span class="line">		&lt;dependency&gt;</span>
<span class="line">			&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span>
<span class="line">			&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span>
<span class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</span>
<span class="line">		&lt;/dependency&gt;</span>
<span class="line"></span>
<span class="line">	&lt;/dependencies&gt;</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>Maven插件</h3>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">	&lt;build&gt;</span>
<span class="line">		&lt;extensions&gt;</span>
<span class="line">			&lt;extension&gt;</span>
<span class="line">				&lt;groupId&gt;kr.motd.maven&lt;/groupId&gt;</span>
<span class="line">				&lt;artifactId&gt;os-maven-plugin&lt;/artifactId&gt;</span>
<span class="line">				&lt;version&gt;1.6.2&lt;/version&gt;</span>
<span class="line">			&lt;/extension&gt;</span>
<span class="line">		&lt;/extensions&gt;</span>
<span class="line">		&lt;plugins&gt;</span>
<span class="line">			&lt;plugin&gt;</span>
<span class="line">				&lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;</span>
<span class="line">				&lt;artifactId&gt;protobuf-maven-plugin&lt;/artifactId&gt;</span>
<span class="line">				&lt;version&gt;0.6.1&lt;/version&gt;</span>
<span class="line">				&lt;configuration&gt;</span>
<span class="line">					&lt;protocArtifact&gt;</span>
<span class="line">						com.google.protobuf:protoc:3.13.0:exe:${os.detected.classifier}</span>
<span class="line">					&lt;/protocArtifact&gt;</span>
<span class="line">					&lt;pluginId&gt;grpc-java&lt;/pluginId&gt;</span>
<span class="line">					&lt;pluginArtifact&gt;</span>
<span class="line">						io.grpc:protoc-gen-grpc-java:1.32.1:exe:${os.detected.classifier}</span>
<span class="line">					&lt;/pluginArtifact&gt;</span>
<span class="line">				&lt;/configuration&gt;</span>
<span class="line">				&lt;executions&gt;</span>
<span class="line">					&lt;execution&gt;</span>
<span class="line">						&lt;goals&gt;</span>
<span class="line">							&lt;goal&gt;compile&lt;/goal&gt;</span>
<span class="line">							&lt;goal&gt;compile-custom&lt;/goal&gt;</span>
<span class="line">						&lt;/goals&gt;</span>
<span class="line">					&lt;/execution&gt;</span>
<span class="line">				&lt;/executions&gt;</span>
<span class="line">			&lt;/plugin&gt;</span>
<span class="line">		&lt;/plugins&gt;</span>
<span class="line">	&lt;/build&gt;</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>框架开发</h2>
<h3>Protobuf文件</h3>
<p>创建文件 src/main/proto/crpc_protocol.proto</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">syntax = "proto3";</span>
<span class="line"></span>
<span class="line">option java_package = "com.github.leeyazhou.grpc";</span>
<span class="line">option java_multiple_files = true;</span>
<span class="line">option java_outer_classname = "CrpcProtocol";</span>
<span class="line"></span>
<span class="line">message RequestGrpcMessage {</span>
<span class="line">    bytes invocation = 1;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">message ResponseGrpcMessage {</span>
<span class="line">    bytes response = 1;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">service MessageService {</span>
<span class="line">    rpc request (RequestGrpcMessage) returns (ResponseGrpcMessage);</span>
<span class="line">}</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行如下命令会生成Protobuf文件对应的Java类</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">mvn protobuf:compile </span>
<span class="line">mvn protobuf:compile-custom</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h3>公用基础模型类</h3>
<p>Invocation.java</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">package com.github.leeyazhou.grpc.core;</span>
<span class="line"></span>
<span class="line">public class Invocation {</span>
<span class="line"></span>
<span class="line">	private String serviceName;</span>
<span class="line">	private String methodName;</span>
<span class="line">	private Object[] args;</span>
<span class="line"></span>
<span class="line">	public String getServiceName() {</span>
<span class="line">		return serviceName;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void setServiceName(String serviceName) {</span>
<span class="line">		this.serviceName = serviceName;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public String getMethodName() {</span>
<span class="line">		return methodName;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void setMethodName(String methodName) {</span>
<span class="line">		this.methodName = methodName;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public Object[] getArgs() {</span>
<span class="line">		return args;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void setArgs(Object[] args) {</span>
<span class="line">		this.args = args;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Response.java</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">package com.github.leeyazhou.grpc.core;</span>
<span class="line"></span>
<span class="line">public class Response {</span>
<span class="line"></span>
<span class="line">	private boolean error;</span>
<span class="line">	private Object response;</span>
<span class="line">	private Throwable exception;</span>
<span class="line"></span>
<span class="line">	public boolean isError() {</span>
<span class="line">		return error;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void setError(boolean error) {</span>
<span class="line">		this.error = error;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public Object getResponse() {</span>
<span class="line">		return response;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void setResponse(Object response) {</span>
<span class="line">		this.response = response;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public Throwable getException() {</span>
<span class="line">		return exception;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void setException(Throwable exception) {</span>
<span class="line">		this.exception = exception;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>Server代码</h3>
<p>GrpcServer.java</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">package com.github.leeyazhou.grpc.core.server;</span>
<span class="line"></span>
<span class="line">import java.io.IOException;</span>
<span class="line"></span>
<span class="line">import io.grpc.Server;</span>
<span class="line">import io.grpc.ServerBuilder;</span>
<span class="line"></span>
<span class="line">public class GrpcServer {</span>
<span class="line">	private Server server;</span>
<span class="line">	private ServiceHandler serviceHandler;</span>
<span class="line"></span>
<span class="line">	public GrpcServer(int port) {</span>
<span class="line">		this.serviceHandler = new ServiceHandler();</span>
<span class="line">		this.server = ServerBuilder.forPort(port)</span>
<span class="line">				// 将具体实现的服务添加到gRPC服务中</span>
<span class="line">				.addService(new GrpcServerHandler(serviceHandler))</span>
<span class="line"></span>
<span class="line">				.build();</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public GrpcServer addService(String name, Object service) {</span>
<span class="line">		serviceHandler.addService(name, service);</span>
<span class="line">		return this;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void start() throws IOException {</span>
<span class="line">		server.start();</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void shutdown() {</span>
<span class="line">		server.shutdown();</span>
<span class="line">	}</span>
<span class="line">}</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GrpcServerHandler.java负责处理接收到的请求，并转发给ServiceHandler.java处理，处理完成后响应给请求端。</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">package com.github.leeyazhou.grpc.core.server;</span>
<span class="line"></span>
<span class="line">import com.github.leeyazhou.grpc.MessageServiceGrpc.MessageServiceImplBase;</span>
<span class="line">import com.github.leeyazhou.grpc.core.Invocation;</span>
<span class="line">import com.github.leeyazhou.grpc.core.Response;</span>
<span class="line">import com.github.leeyazhou.grpc.core.serializer.JSONSerializer;</span>
<span class="line">import com.github.leeyazhou.grpc.core.serializer.Serializer;</span>
<span class="line">import com.github.leeyazhou.grpc.RequestGrpcMessage;</span>
<span class="line">import com.github.leeyazhou.grpc.ResponseGrpcMessage;</span>
<span class="line">import com.google.protobuf.ByteString;</span>
<span class="line"></span>
<span class="line">import io.grpc.stub.StreamObserver;</span>
<span class="line"></span>
<span class="line">public class GrpcServerHandler extends MessageServiceImplBase {</span>
<span class="line">	private ServiceHandler serviceHandler;</span>
<span class="line">	private Serializer serializer = new JSONSerializer();</span>
<span class="line"></span>
<span class="line">	public GrpcServerHandler(ServiceHandler serviceHandler) {</span>
<span class="line">		this.serviceHandler = serviceHandler;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	@Override</span>
<span class="line">	public void request(RequestGrpcMessage request, StreamObserver&lt;ResponseGrpcMessage&gt; responseObserver) {</span>
<span class="line">		try {</span>
<span class="line">			final Invocation invocation = serializer.deserialize(request.getInvocation().toByteArray(),</span>
<span class="line">					Invocation.class);</span>
<span class="line">			final Response response = handleRequest(invocation);</span>
<span class="line"></span>
<span class="line">			byte[] jsonByte = serializer.serialize(response);</span>
<span class="line">			ResponseGrpcMessage resp = ResponseGrpcMessage.newBuilder().setResponse(ByteString.copyFrom(jsonByte))</span>
<span class="line">					.build();</span>
<span class="line">			responseObserver.onNext(resp);</span>
<span class="line">			responseObserver.onCompleted();</span>
<span class="line">		} catch (Exception e) {</span>
<span class="line">			responseObserver.onError(e);</span>
<span class="line">		}</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	private Response handleRequest(Invocation invocation) {</span>
<span class="line">		Response response = new Response();</span>
<span class="line">		response.setError(false);</span>
<span class="line">		try {</span>
<span class="line">			Object ret = serviceHandler.handle(invocation);</span>
<span class="line">			response.setResponse(ret);</span>
<span class="line">		} catch (Exception e) {</span>
<span class="line">			response.setError(true);</span>
<span class="line">			response.setException(e);</span>
<span class="line">		}</span>
<span class="line">		return response;</span>
<span class="line">	}</span>
<span class="line">}</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ServiceHandler.java</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">package com.github.leeyazhou.grpc.core.server;</span>
<span class="line"></span>
<span class="line">import java.lang.reflect.Method;</span>
<span class="line">import java.util.Map;</span>
<span class="line">import java.util.concurrent.ConcurrentHashMap;</span>
<span class="line"></span>
<span class="line">import com.github.leeyazhou.grpc.core.Invocation;</span>
<span class="line"></span>
<span class="line">public class ServiceHandler {</span>
<span class="line">	private Map&lt;String, Object&gt; services = new ConcurrentHashMap&lt;&gt;();</span>
<span class="line">	private Map&lt;String, Method&gt; serviceMethods = new ConcurrentHashMap&lt;&gt;();</span>
<span class="line"></span>
<span class="line">	public Object handle(Invocation invocation) {</span>
<span class="line">		Object service = services.get(invocation.getServiceName());</span>
<span class="line">		Method serviceMethod = serviceMethods.get(invocation.getServiceName() + "$" + invocation.getMethodName());</span>
<span class="line"></span>
<span class="line">		try {</span>
<span class="line">			return serviceMethod.invoke(service, invocation.getArgs());</span>
<span class="line">		} catch (Exception e) {</span>
<span class="line">			e.printStackTrace();</span>
<span class="line">			throw new RuntimeException(e);</span>
<span class="line">		}</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void addService(String name, Object service) {</span>
<span class="line">		this.services.put(name, service);</span>
<span class="line">		Method[] methods = service.getClass().getDeclaredMethods();</span>
<span class="line">		if (methods != null) {</span>
<span class="line">			for (Method method : methods) {</span>
<span class="line">				String key = name + "$" + method.getName();</span>
<span class="line">				serviceMethods.put(key, method);</span>
<span class="line">			}</span>
<span class="line">		}</span>
<span class="line"></span>
<span class="line">	}</span>
<span class="line">}</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>Client代码</h3>
<p>GrpcClient.java</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">package com.github.leeyazhou.grpc.core.client;</span>
<span class="line"></span>
<span class="line">import java.util.Map;</span>
<span class="line">import java.util.concurrent.ConcurrentHashMap;</span>
<span class="line"></span>
<span class="line">import com.github.leeyazhou.grpc.MessageServiceGrpc;</span>
<span class="line">import com.github.leeyazhou.grpc.RequestGrpcMessage;</span>
<span class="line">import com.github.leeyazhou.grpc.ResponseGrpcMessage;</span>
<span class="line">import com.github.leeyazhou.grpc.core.Invocation;</span>
<span class="line">import com.github.leeyazhou.grpc.core.Response;</span>
<span class="line">import com.github.leeyazhou.grpc.core.serializer.JSONSerializer;</span>
<span class="line">import com.github.leeyazhou.grpc.core.serializer.Serializer;</span>
<span class="line">import com.google.protobuf.ByteString;</span>
<span class="line"></span>
<span class="line">import io.grpc.ManagedChannel;</span>
<span class="line">import io.grpc.ManagedChannelBuilder;</span>
<span class="line"></span>
<span class="line">public class GrpcClient {</span>
<span class="line">	private final Serializer serializer = new JSONSerializer();</span>
<span class="line">	private final MessageServiceGrpc.MessageServiceBlockingStub blockingStub;</span>
<span class="line">	private static final Map&lt;String, GrpcClient&gt; clientCache = new ConcurrentHashMap&lt;&gt;();</span>
<span class="line"></span>
<span class="line">	public static GrpcClient get(String host, int port) {</span>
<span class="line">		final String key = host + ":" + port;</span>
<span class="line">		return clientCache.compute(key, (k1, v1) -&gt; {</span>
<span class="line">			return v1 != null ? v1 : new GrpcClient(host, port);</span>
<span class="line">		});</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public GrpcClient(String host, int port) {</span>
<span class="line">		ManagedChannel managedChannel = ManagedChannelBuilder.forAddress(host, port)</span>
<span class="line">				// 使用非安全机制传输</span>
<span class="line">				.usePlaintext().build();</span>
<span class="line">		this.blockingStub = MessageServiceGrpc.newBlockingStub(managedChannel);</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public Response request(Invocation invocation) {</span>
<span class="line">		byte[] jsonBytes = serializer.serialize(invocation);</span>
<span class="line">		ByteString byteString = ByteString.copyFrom(jsonBytes);</span>
<span class="line"></span>
<span class="line">		RequestGrpcMessage greeting = RequestGrpcMessage.newBuilder().setInvocation(byteString).build();</span>
<span class="line">		ResponseGrpcMessage resp = blockingStub.request(greeting);</span>
<span class="line">		byte[] responseByte = resp.getResponse().toByteArray();</span>
<span class="line">		return serializer.deserialize(responseByte, Response.class);</span>
<span class="line">	}</span>
<span class="line">}</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>示例</h2>
<h3>服务类开发</h3>
<p>EchoService.java定义服务接口</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">public interface EchoService {</span>
<span class="line">	String echo(String echo);</span>
<span class="line">}</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>EchoServiceImpl.java实现服务功能：</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">public class EchoServiceImpl implements EchoService {</span>
<span class="line">	@Override</span>
<span class="line">	public String echo(String echo) {</span>
<span class="line">		System.err.println("回声: " + echo);</span>
<span class="line">		return echo;</span>
<span class="line">	}</span>
<span class="line">}</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>启动服务端</h3>
<p>GrpcProvider.java 启动Server服务，并监听端口8000</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">public class GrpcProvider {</span>
<span class="line"></span>
<span class="line">	public static void main(String[] args) throws Exception {</span>
<span class="line">		new GrpcProvider().start();</span>
<span class="line">		Thread.sleep(Integer.MAX_VALUE);</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void start() throws Exception {</span>
<span class="line">		int port = 8000;</span>
<span class="line">		GrpcServer server = new GrpcServer(port);</span>
<span class="line">		server.addService(EchoService.class.getSimpleName(), new EchoServiceImpl());</span>
<span class="line">		server.start();</span>
<span class="line">	}</span>
<span class="line">}</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>客户端调用服务</h3>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">public class GrpcConsumer {</span>
<span class="line"></span>
<span class="line">	public static void main(String[] args) {</span>
<span class="line">		new GrpcConsumer().start();</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public void start() {</span>
<span class="line">		String host = "127.0.0.1";</span>
<span class="line">		int port = 8000;</span>
<span class="line">		GrpcClient client = GrpcClient.get(host, port);</span>
<span class="line"></span>
<span class="line">		Invocation invocation = new Invocation();</span>
<span class="line">		invocation.setServiceName("EchoService");</span>
<span class="line">		invocation.setMethodName("echo");</span>
<span class="line">		invocation.setArgs(new String[] { "测试GRPC" });</span>
<span class="line">		Response response = client.request(invocation);</span>
<span class="line">		System.out.println(response.getResponse());</span>
<span class="line">	}</span>
<span class="line">}</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>其他</h2>
<p>源码地址<a href="https://github.com/leeyazhou/grpc-example" target="_blank" rel="noopener noreferrer">github.com/leeyazhou/grpc-example</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>TensorFlow的55个经典案例</title>
      <link>https://bytesgo.com/blog/tensorflow/2020/TensorFlow%E7%9A%8455%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B.html</link>
      <guid>https://bytesgo.com/blog/tensorflow/2020/TensorFlow%E7%9A%8455%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B.html</guid>
      <source url="https://bytesgo.com/rss.xml">TensorFlow的55个经典案例</source>
      <description>缘起
本文是TensorFlow实现流行机器学习算法的教程汇集，目标是让读者可以轻松通过清晰简明的案例深入了解 TensorFlow。这些案例适合那些想要实现一些 TensorFlow 案例的初学者。本教程包含还包含笔记和带有注解的代码。
给TF新手的教程指南
机器学习入门笔记</description>
      <category>tensorflow</category>
      <pubDate>Wed, 02 Sep 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>缘起</h2>
<p>本文是TensorFlow实现流行机器学习算法的教程汇集，目标是让读者可以轻松通过清晰简明的案例深入了解 TensorFlow。这些案例适合那些想要实现一些 TensorFlow 案例的初学者。本教程包含还包含笔记和带有注解的代码。</p>
<h2>给TF新手的教程指南</h2>
<h3>机器学习入门笔记</h3>
<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/0_Prerequisite/ml_introduction.ipynb</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>领域驱动设计（Domain-driven Design）</title>
      <link>https://bytesgo.com/blog/ddd/domain-driven-design.html</link>
      <guid>https://bytesgo.com/blog/ddd/domain-driven-design.html</guid>
      <source url="https://bytesgo.com/rss.xml">领域驱动设计（Domain-driven Design）</source>
      <description>领域驱动设计优势

领域专家和开发人员共同工作，这样软件可以准确表达业务规则，就像是领域专家开发出来的一样
帮助业务人员自我提高
知识集中，确保软件知识并不只是掌握在少数人手中
领域专家、开发者和软件间不需要“翻译”，彼此使用通用语言交流
设计就是代码，代码就是设计
DDD同时提供战略设计和战术设计。战略设计帮助理解必要的投入、团队人员构成；战术设计帮...</description>
      <category>DDD</category>
      <pubDate>Tue, 01 Sep 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>领域驱动设计优势</h2>
<ul>
<li>领域专家和开发人员共同工作，这样软件可以准确表达业务规则，就像是领域专家开发出来的一样</li>
<li>帮助业务人员自我提高</li>
<li>知识集中，确保软件知识并不只是掌握在少数人手中</li>
<li>领域专家、开发者和软件间不需要“翻译”，彼此使用通用语言交流</li>
<li>设计就是代码，代码就是设计</li>
<li>DDD同时提供战略设计和战术设计。战略设计帮助理解必要的投入、团队人员构成；战术设计帮助创建DDD中的各个组件。</li>
</ul>
<h2>通用语言(Ubiquitous Language)</h2>
<p>领域模型和软件设计是紧密联系在一起的，软件系统的各个方面的设计都要忠实的反映领域模型，以便明确二者的对应关系。而且需要经常反复检查修改模型，以便更优雅的实现模型。
那么，领域专家、设计人员和开发人员就要有一套交流的专业术语，可以称之为Ubiquitous Language</p>
<p><img src="/img/ddd-ubiquitous-language.png" alt="通用语言"></p>
<h2>领域驱动设计概念</h2>
<ul>
<li>实体(Entity/Reference Object）</li>
<li>值对象(Value object)</li>
<li>聚合(Aggregate)和聚合根(Aggregate Root)</li>
<li>领域服务(Domain Service)</li>
<li>领域事件(Domain Event)</li>
<li>仓储(Repository)</li>
</ul>
<h3>实体(Entity/Reference Object)</h3>
<p>领域中具有生命周期的对象，通常会经历创建、更新和销毁的过程。它的显著特点是拥有一个全局唯一标识符，而且唯一标识符是区分两个实体是否相等的唯一条件。</p>
<h3>值对象(Value object)</h3>
<p>领域中当只关心领域模型的属性时，应把它归类为值对象。 而且值对象应该是不可变的，和实体对比来看，值对象不需要分配唯一标识符。两个对象只要内部属性都相等，就可以认为是同一个对象。</p>
<h3>聚合聚合根(Aggregate)和聚合根(Aggregate Root)</h3>
<ul>
<li>聚合定义了一组具有内聚关系的相关对象的集合，是一个修改数据的单元，通过聚合定义出对象间的关系和边界。</li>
<li>如果一个聚合只包含一个实体，那么这个实体可以认为是一个聚合根。</li>
</ul>
<h3>领域服务(Domain Service)</h3>
<ul>
<li>领域设计中，有些重要的操作不适合归类到Entity或Value Object的，可以设计到Service中，本质上是一些活动或者行为动作。</li>
<li>软件设计中，Service可以划分为三种类型：应用层服务、领域层服务和基础设施服务</li>
</ul>
<h3>领域事件(Domain Event)</h3>
<p>聚合对象接收命令(Command)请求和查询(Query)请求时，可能需要生成领域事件对象给领域对象。在CQRS模式的应用中，领域事件通常是由命令请求产生的。</p>
<h3>仓储(Repository)</h3>
<p>实体对象需要存储，可以存储在内存(In Memory)或者磁盘(Database)上，在需要实体对象时再从仓储中重构出实体对象。在实践中，数据库存储是仓储的一种实现方式。</p>
<h2>领域驱动模式</h2>
<ul>
<li>分层架构(Layers Architecture)</li>
<li>六边形理论(Hexagonal Architecture)</li>
<li>洋葱架构/简洁架构(Onion Architecture/The clean Architecture)</li>
<li>命令查询职责分离(Command-Query Responsibility Segregation)</li>
<li>事件溯源(Event Source)</li>
</ul>
<h3>分层架构(Layers Architecture)</h3>
<p><img src="/img/ddd-layer-architecture.png" alt="分层架构"></p>
<h3>六边形架构/端口适配器架构(Hexagonal Architecture)</h3>
<p><img src="/img/ddd-hexagonal-architecture.png" alt="六边形架构/端口适配器架构"></p>
<h3>洋葱架构/简洁架构(Onion Architecture/The clean Architecture)</h3>
<p><img src="/img/ddd-onion-architecture.png" alt="洋葱架构/简洁架构"></p>
<h3>命令查询职责分离(Command-Query Responsibility Segregation)</h3>
<p><img src="/img/ddd-cqrs-architecture.png" alt="命令查询职责分离"></p>
<h3>事件溯源(Event Source)</h3>
<p>事件溯源是一种数据存储的模式，区别于传统仓储存储实体对象的当前状态，事件溯源则存储了影响实体对象变化的所有事件，通过事件历史回溯实体的当前状态。</p>
<p><img src="/img/ddd-es-architecture.png" alt="事件溯源"></p>
<h2>Flower Domain Driven Design</h2>
<h3>Flower DDD的设计思路</h3>
<ul>
<li>Flower基于akka，是一个反应式微服务框架，原生支持消息驱动模式。</li>
<li>Actor模型是消息驱动、非阻塞的，优雅解决多线程难题，提高系统吞吐量</li>
<li>定义CommandHandler和EventHandler，处理Command和Query</li>
<li>编排CommandGateway流程和QueryGateway流程，代理Command和Query的操作入口</li>
<li>基于Flower异步特性，异步响应</li>
</ul>
<p>Flower CQRS架构图
<img src="/img/ddd-flower-cqrs-architecture.png" alt="命令查询职责分离"></p>
<h3>Command</h3>
<ul>
<li>CommandGateway</li>
<li>CommandHandler</li>
<li>EventHandler</li>
</ul>
<h4>CommandGateway</h4>
<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">  <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">  <span class="token class-name">CommandGateway</span> commandGateway<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createFoodCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ui create food cart</span></span>
<span class="line">    <span class="token comment">// publish an commannd : CreateOrderCommand</span></span>
<span class="line">    commandGateway<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreateOrderCommand</span><span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"foodcart"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>CommandHandler</h4>
<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">  <span class="token annotation punctuation">@CommandHandler</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token class-name">CreateOrderCommand</span> command<span class="token punctuation">,</span> <span class="token class-name">ServiceContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"创建订单命令：{}"</span><span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">AggregateLifecycle</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreateOrderEvent</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>EventHandler</h4>
<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">  <span class="token annotation punctuation">@EventHandler</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">CreateOrderEvent</span> event<span class="token punctuation">,</span> <span class="token class-name">ServiceContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"处理订单事件：{}"</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">getWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printJSON</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// dao</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>Query</h3>
<h3>QueryGateway</h3>
<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">  <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">  <span class="token class-name">QueryGateway</span> queryGateway<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"{orderId}"</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryFoodcart</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    queryGateway<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SelectOrderCommand</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>QueryHandler</h3>
<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">  <span class="token annotation punctuation">@CommandHandler</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token class-name">SelectOrderCommand</span> command<span class="token punctuation">,</span> <span class="token class-name">ServiceContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"选择订单命令：{}"</span><span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">AggregateLifecycle</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SelectOrderEvent</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>EventHandler</h3>
<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">  <span class="token annotation punctuation">@EventHandler</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">SelectOrderEvent</span> event<span class="token punctuation">,</span> <span class="token class-name">ServiceContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"选择订单事件：{}"</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// do something</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>Flower请求响应</h3>
<p>ServiceContext中持有请求上下文对象HttpServletRequest，通过ServiceContext可以对客户端响应数据。</p>
<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">  <span class="token annotation punctuation">@EventHandler</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">CreateOrderEvent</span> event<span class="token punctuation">,</span> <span class="token class-name">ServiceContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"处理订单事件：{}"</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">getWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printJSON</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// dao</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>集成spring-boot</h3>
<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token annotation punctuation">@FlowerComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.ly.train.flower.ddd"</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@EnableTransactionManagement</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DDDApplication</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DDDApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://bytesgo.com/img/ddd-ubiquitous-language.png" type="image/png"/>
    </item>
    <item>
      <title>ubuntu 20.04编译android-6.0.1_r77</title>
      <link>https://bytesgo.com/blog/android/2020/ubuntu%2020.04%E7%BC%96%E8%AF%91android-6.0.1_r77.html</link>
      <guid>https://bytesgo.com/blog/android/2020/ubuntu%2020.04%E7%BC%96%E8%AF%91android-6.0.1_r77.html</guid>
      <source url="https://bytesgo.com/rss.xml">ubuntu 20.04编译android-6.0.1_r77</source>
      <description>缘起
最近公司业务涉及到抓包的工作内容，所以要研究抓包的工作内容，由于对数据抓取的内容研究不多，所以在摸索中慢慢研究。由于在研究的过程中，需要经常请教一位对安全研究比较多的同事，而且正好他有一台闲置的手机（lg nexus 5），就送给我了（感谢感谢同事的大力支持）。
那么，现在最新的android系统已经升级到了android 11，为什么要研究这么...</description>
      <category>android</category>
      <pubDate>Mon, 31 Aug 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>缘起</h2>
<p>最近公司业务涉及到抓包的工作内容，所以要研究抓包的工作内容，由于对数据抓取的内容研究不多，所以在摸索中慢慢研究。由于在研究的过程中，需要经常请教一位对安全研究比较多的同事，而且正好他有一台闲置的手机（lg nexus 5），就送给我了（感谢感谢同事的大力支持）。</p>
<p>那么，现在最新的android系统已经升级到了android 11，为什么要研究这么老的版本的系统呢？主要有两方面的考虑：</p>
<ul>
<li>android 6以上的版本对抓包管理比较严格</li>
<li>lg nexus 5官方支持的最高版本是android 6，且nexus 5硬件配置比较低</li>
</ul>
<h2>前言</h2>
<p>网上关于android源码开发的文章有很多，为什么要我这个门外汉来写一篇文章来贻笑大方呢？</p>
<p>这也是综合考虑的结果：</p>
<ul>
<li>网上教程虽多，大多是android 6比较流行时的教程，系统硬件迭代很快，在现在android 10版本比较流行的时候，很少有人像我这么傻的去编译android 6.0</li>
<li>虽然教程比较多，但是我在尝试编译的过程中还是遇到了很多的问题，另一方面是用这篇文章来记录一下学习的过程</li>
</ul>
<h2>源码</h2>
<p>android管理源码是基于一个叫做repo的工具实现的，当然最终还是基于git管理源码的。源码部分包含两部分内容：</p>
<ul>
<li>管理工具repo配置</li>
<li>源码下载</li>
</ul>
<h3>配置repo</h3>
<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> ~/bin</span>
<span class="line"><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=~</span>/bin:<span class="token environment constant">$PATH</span></span>
<span class="line"><span class="token function">curl</span> https://storage.googleapis.com/git-repo-downloads/repo <span class="token operator">&gt;</span> ~/bin/repo</span>
<span class="line"><span class="token function">chmod</span> a+x ~/bin/repo</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">vim</span> ~/bin/repo</span>
<span class="line"><span class="token comment"># 修改REPO_URL地址为清华源</span></span>
<span class="line">REPO_URL <span class="token operator">=</span> <span class="token string">'https://mirrors.tuna.tsinghua.edu.cn/git/git-repo'</span> <span class="token comment"># 'https://gerrit.googlesource.com/git-repo'</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>源码下载</h3>
<p>初始化仓库：</p>
<p>参数 <em>--depth=1</em> 表示只同步当前分支最后一次提交的代码，可以提高下载的速度</p>
<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">repo init <span class="token parameter variable">-u</span> https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest <span class="token parameter variable">-b</span> android-6.0.1_r77 <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>同步源码树（以后只需执行这条命令来同步）：</p>
<p>参数 <em>-c</em> 表示只同步当前分支的代码，不会拉去其他的分支的源数据，可以提高下载的速度</p>
<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">repo <span class="token function">sync</span> <span class="token parameter variable">-c</span></span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>openjdk</title>
      <link>https://bytesgo.com/blog/openjdk/2019/openjdk-research.html</link>
      <guid>https://bytesgo.com/blog/openjdk/2019/openjdk-research.html</guid>
      <source url="https://bytesgo.com/rss.xml">openjdk</source>
      <description>openjdk research
OpenJDK是Oracle JDK的开源版本，使用GPL License协议发布，很多Linux发行版本中会包含OpenJDK。而且，新版本的Oracle JDK代码是基于OpenJDK代码的，但有一些核心代码，oracle JDK是没有开源的，OpenJDK是有自己的实现方案的。
更多关于OpenJDK的FAQ查看...</description>
      <category>openjdk</category>
      <pubDate>Thu, 02 Jul 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>openjdk research</h2>
<p>OpenJDK是Oracle JDK的开源版本，使用GPL License协议发布，很多Linux发行版本中会包含OpenJDK。而且，新版本的Oracle JDK代码是基于OpenJDK代码的，但有一些核心代码，oracle JDK是没有开源的，OpenJDK是有自己的实现方案的。
更多关于OpenJDK的FAQ查看<a href="http://openjdk.java.net/faq/" target="_blank" rel="noopener noreferrer">http://openjdk.java.net/faq/</a></p>
<h2>OracleJDK和OpenJDK</h2>
<p>自从2019年4月16日以后，打开网站<em>www.oracle.com</em>下载Oracle JDK的时候，会在一个明显的位置提示Oracle JDK协议更新了：OTN协议允许个人使用和开发使用是免费的，但是其他的用途是需要收费的。</p>
<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Important Oracle JDK License Update</span>
<span class="line"></span>
<span class="line">The Oracle JDK License has changed for releases starting April 16, 2019.</span>
<span class="line"></span>
<span class="line">The new Oracle Technology Network License Agreement for Oracle Java SE is substantially different from prior Oracle JDK licenses. The new license permits certain uses, such as personal use and development use, at no cost -- but other uses authorized under prior Oracle JDK licenses may no longer be available. Please review the terms carefully before downloading and using this product. An FAQ is available here.</span>
<span class="line"></span>
<span class="line">Commercial license and support is available with a low cost Java SE Subscription.</span>
<span class="line"></span>
<span class="line">Oracle also provides the latest OpenJDK release under the open source GPL License at jdk.java.net.</span>
<span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Oracle JDK的FAQ地址：<a href="https://www.oracle.com/technetwork/java/javase/overview/oracle-jdk-faqs.html" target="_blank" rel="noopener noreferrer">https://www.oracle.com/technetwork/java/javase/overview/oracle-jdk-faqs.html</a>，自从Java 9后，oracle提供了两种不同的Java发布版本：</p>
<ul>
<li>Oracle OpenJDK版本，基于GPL v2+CPE（GNU General Public License v2，with the Classpath Exception）</li>
<li>Oracle Java SE产品版本，包含Oracle JDK 8+，基于OTN协议，允许个人使用、开发、测试、原型设计、演示和其他应用免费使用。</li>
</ul>
<p>Oracle更新了JDK的协议，如果商用的话是需要付费的，而且是需要按应用规模付费的，一个Oracle Java SE订阅的价格是￥1023.30-￥2052.00，随着业务规模的增加，单价会降低，但是企业的付费也是增加的。</p>
<p>如果想继续免费使用Java，就需要使用Oracle的OpenJDK发布版本，因为经过过去这几年的工作，Oracle已经把很多个特性贡献给了OpenJDK社区，自从Java 11以后，Oracle JDK发布版本和OpenJDK发布版本本质上是一致的。详细信息查看<a href="https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later" target="_blank" rel="noopener noreferrer">https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later</a></p>
<h2>为什么要切换Oracle JDK到OpenJDK</h2>
<p>自从2019.04.16后，下载或者更新新发布的Oracle JDK都是需要付费的，否则就是侵权了，如果Oracle JDK出现了BUG时需要更新JDK的话，就需要使用新版本的Oracle JDK了。另外，由于OpenJDK和OracleJDK在本质上是一致的，只有部分功能，由于协议版权的问题不能开源外，其他并无区别，并不会影响企业使用。</p>
<p>而且现在大部分企业已经在使用Oracle JDK8了，可以预见在不久的将来，更多企业会使用更高版本的JDK，而且综合考虑的话，企业也要跟上业界的发展，才能更方便、更低成本的招揽可用的人才。</p>
<h2>OpenJDK安装</h2>
<p><a href="http://openjdk.java.net/install/index.html" target="_blank" rel="noopener noreferrer">http://openjdk.java.net/install/index.html</a></p>
<h2>OpennJDK自编译</h2>
<h3>获取OpenJDK源码</h3>
<p>下载源码<a href="http://hg.openjdk.java.net/jdk8u/jdk8u60/archive/tip.zip" target="_blank" rel="noopener noreferrer">http://hg.openjdk.java.net/jdk8u/jdk8u60/archive/tip.zip</a>，解压后编译</p>
]]></content:encoded>
    </item>
    <item>
      <title>开发指南</title>
      <link>https://bytesgo.com/guide/</link>
      <guid>https://bytesgo.com/guide/</guid>
      <source url="https://bytesgo.com/rss.xml">开发指南</source>
      <description>开发指南
开发指南</description>
      <content:encoded><![CDATA[
<p>开发指南</p>
]]></content:encoded>
    </item>
  </channel>
</rss>