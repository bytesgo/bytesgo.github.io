import{_ as a,o as s,c as l,a6 as p,f as o,a as t,g as i,w as e,L as g}from"./chunks/framework.BkI9ovSD.js";const d="/assets/46.CmE8Cf6f.png",c="/assets/050.1sR2kUz3.png",S="/assets/51.ChVCD8a5.jpg",u="/assets/52.BTwLVxn-.png",C="/assets/53.Drk4sJXD.png",A=JSON.parse('{"title":"初识Spring","description":"","frontmatter":{"title":"初识Spring","date":"2020-04-18T00:00:00.000Z","tags":["SSM","Spring"],"categories":["SSM"]},"headers":[],"relativePath":"blog/SSM/初识Spring.md","filePath":"blog/SSM/初识Spring.md","lastUpdated":1734570848000}'),m={name:"blog/SSM/初识Spring.md"};function I(f,n,b,P,O,x){const r=g("font");return s(),l("div",{"data-pagefind-body":!0},[n[11]||(n[11]=p('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Spring以 <code>IOC</code>（Inversoin Of Control，控制反转）和 <code>AOP</code>（Aspect Oriented Programming，面向切面编程）为内核，使用基本的JavaBean来完成以前只可能由 <code>EJB</code>（Enterprise Java Beans，Java企业Bean）完成的工作。取代了EJB那臃肿、低效的开发模式</p></div><h1 id="初识spring" tabindex="-1">初识Spring <a class="header-anchor" href="#初识spring" aria-label="Permalink to &quot;初识Spring&quot;">​</a></h1><h2 id="一、spring是什么" tabindex="-1">一、Spring是什么？ <a class="header-anchor" href="#一、spring是什么" aria-label="Permalink to &quot;一、Spring是什么？&quot;">​</a></h2><p>Spring 是于 2003 年兴起的一个轻量级的 Java 开源框架，它由 Rod Johnson 创建。</p>',4)),o("p",null,[n[1]||(n[1]=t("传统 J2EE 应用的开发效率低，Spring 作为开源的中间件，提供了 J2EE 应用的各层的解决方案，Spring 贯穿了 ")),i(r,{color:"red"},{default:e(()=>n[0]||(n[0]=[o("strong",null,"表现层、业务层及持久层",-1)])),_:1}),n[2]||(n[2]=t("，而不是仅仅专注于某一层的方案。"))]),n[12]||(n[12]=p('<p>可以说 Spring 是企业应用开发的 <strong>一站式</strong>（<strong>full-stack</strong>）选择。然而，Spring 并不想取代那些已有的框架，而是与它们无缝地整合。</p><p>简单来说，Spring 是一个轻量级 <strong>控制反转</strong>（IoC）和 <strong>面向切面</strong>（AOP）的<strong>容器</strong>框架。</p><p><img src="'+d+'" alt=""></p><h2 id="二、为什么要使用-spring" tabindex="-1">二、为什么要使用 Spring? <a class="header-anchor" href="#二、为什么要使用-spring" aria-label="Permalink to &quot;二、为什么要使用 Spring?&quot;">​</a></h2><ol><li><p>方便解耦，简化开发</p><p>通过 Spring 提供的 IoC 容器，我们可以将对象之间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。有了Spring，用户不必再为单实例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p></li><li><p>AOP 编程的支持</p><p>通过 Spring 提供的 AOP 功能，方便进行面向切面的编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付。</p></li><li><p>声明式事务的支持</p><p>在 Spring 中，我们可以从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。</p></li><li><p>方便程序的测试</p><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，在 Spring 里，测试不再是昂贵的操作，而是随手可做的事情。例如：Spring 对 Junit4 支持，可以通过注解方便的测试 Spring 程序。</p></li><li><p>方便集成各种优秀框架</p><p>Spring 不排斥各种优秀的开源框架，相反，Spring 可以降低各种框架的使用难度，Spring 提供了对各种优秀框架（如 Struts、Hibernate、MyBatis 、Hessian、Quartz）等的直接支持。</p></li><li><p>降低 Java EE API 的使用难度</p><p>Spring 对很多难用的 Java EE API（如 JDBC，Java Mail，远程调用等）提供了一个薄薄的封装层，通过 Spring 的简易封装，这些 Java EE API 的使用难度大为降低。</p></li></ol><h2 id="三、ioc-反转控制-inversion-of-control" tabindex="-1">三、IOC 反转控制（Inversion Of Control） <a class="header-anchor" href="#三、ioc-反转控制-inversion-of-control" aria-label="Permalink to &quot;三、IOC 反转控制（Inversion Of Control）&quot;">​</a></h2><p><img src="'+c+'" alt=""></p><h3 id="_1-spring是一个基于-ioc-和-aop-的结构化-j2ee-系统的框架" tabindex="-1">1. Spring是一个基于 IOC 和 AOP 的结构化 J2EE 系统的框架 <a class="header-anchor" href="#_1-spring是一个基于-ioc-和-aop-的结构化-j2ee-系统的框架" aria-label="Permalink to &quot;1. Spring是一个基于 IOC 和 AOP 的结构化 J2EE 系统的框架&quot;">​</a></h3><p>控制反转就是把创建和管理 bean 的过程转移给了第三方。而这个第三方，就是 Spring IoC Container，对于 IoC 来说，最重要的就是 <strong>容器</strong>。</p><p>容器负责创建、配置和管理 bean，也就是它管理着 bean 的生命，控制着 bean 的依赖注入。</p><p>通俗点讲，因为项目中每次创建对象是很麻烦的，所以我们使用 Spring IoC 容器来管理这些对象，需要的时候你就直接用，不用管它是怎么来的、什么时候要销毁，只管用就好了。<strong>简单说就是创建对象由以前的程序员自己 new 构造方法来调用，变成了交由 Spring 创建对象</strong></p><p>举个例子，就好像父母没时间管孩子，就把小朋友交给托管所，就安心的去上班而不用管孩子了。托儿所，就是第三方容器，负责管理小朋友的吃喝玩乐；父母，相当于程序员，只管接送孩子，不用管他们吃喝。</p><p><strong>IOC 是 Spring 的基础，也是一种编程思想和一种新的设计模式</strong></p><h3 id="_2-ioc-容器" tabindex="-1">2. IoC 容器 <a class="header-anchor" href="#_2-ioc-容器" aria-label="Permalink to &quot;2. IoC 容器&quot;">​</a></h3><p>容器是 IoC 最重要的部分，Spring 设计容器使用的是 <code>ApplicationContext</code>，它是 <code>BeanFactory</code> 的子类，更好的补充并实现了 <code>BeanFactory</code> 的。</p><p><code>BeanFactory</code> 简单粗暴，可以理解为 HashMap：</p><ul><li><p>Key - bean name</p></li><li><p>Value - bean object</p></li></ul>',17)),o("p",null,[n[5]||(n[5]=t("但它一般只有 get, put 两个功能，所以称之为 ")),i(r,{color:"red"},{default:e(()=>n[3]||(n[3]=[o("strong",null,"低级容器",-1)])),_:1}),n[6]||(n[6]=t("。而 ")),n[7]||(n[7]=o("code",null,"ApplicationContext",-1)),n[8]||(n[8]=t(" 多了很多功能，因为它继承了多个接口，可称之为")),i(r,{color:"red"},{default:e(()=>n[4]||(n[4]=[o("strong",null,"高级容器",-1)])),_:1})]),n[13]||(n[13]=p('<p><code>ApplicationContext</code> 的里面有两个具体的实现子类，是用来读取配置配件的：</p><ul><li><p><code>ClassPathXmlApplicationContext</code> - 从 class path 中加载配置文件，更常用一些；</p></li><li><p><code>FileSystemXmlApplicationContext</code> - 从本地文件中加载配置文件，不是很常用，如果再到 Linux 环境中，还要改路径，不是很方便。</p></li></ul><p><img src="'+S+'" alt=""></p><p>当我们点开 <code>ClassPathXmlApplicationContext</code> 时，发现它并不是直接继承 <code>ApplicationContext</code> 的，它有很多层的依赖关系，每层的子类都是对父类的补充实现。</p><p>而再往上找，发现最上层的 class 回到了 <code>BeanFactory</code>，所以它非常重要。</p><p><strong>要注意，Spring 中还有个 <code>FactoryBean</code>，两者并没有特别的关系，只是名字比较接近，所以不要弄混了顺序。</strong></p><h3 id="_3-为什么要用-ioc-这种思想呢-ioc-能给我们带来什么好处" tabindex="-1">3. 为什么要用 IOC 这种思想呢？IOC 能给我们带来什么好处？ <a class="header-anchor" href="#_3-为什么要用-ioc-这种思想呢-ioc-能给我们带来什么好处" aria-label="Permalink to &quot;3. 为什么要用 IOC 这种思想呢？IOC 能给我们带来什么好处？&quot;">​</a></h3>',7)),o("p",null,[n[10]||(n[10]=t("答：")),i(r,{color:"red"},{default:e(()=>n[9]||(n[9]=[o("strong",null,"解藕",-1)])),_:1})]),n[14]||(n[14]=p('<p>它把对象之间的依赖关系转成用配置文件来管理，由 <strong>Spring IoC Container</strong> 来管理。</p><p>在项目中，底层的实现都是由很多个对象组成的，对象之间彼此合作实现项目的业务逻辑。但是，很多很多对象紧密结合在一起，一旦有一方出问题了，必然会对其他对象有所影响，所以才有了解藕的这种设计思想。</p><img src="'+u+'" style="margin:0 35%;"><img src="'+C+'" style="margin:0 35%;"><p>如上图所示，本来 ABCD 是互相关联在一起的，当加入第三方容器的管理之后，每个对象都和第三方法的 IoC 容器关联，彼此之间不再直接联系在一起了，没有了耦合关系，全部对象都交由容器来控制，降低了这些对象的亲密度，就叫“解耦”。</p><h2 id="四、di-依赖注入-dependency-inject" tabindex="-1">四、DI 依赖注入（Dependency Inject） <a class="header-anchor" href="#四、di-依赖注入-dependency-inject" aria-label="Permalink to &quot;四、DI 依赖注入（Dependency Inject）&quot;">​</a></h2><p><strong>依赖</strong>，是指程序运行需要依赖外部的资源，提供程序内对象的所需要的数据、资源。</p><p><strong>注入</strong>，是指配置文件把资源从外部注入到内部，容器加载了外部的文件、对象、数据，然后把这些资源注入给程序内的对象，维护了程序内外对象之间的依赖关系。</p><p>所以说，控制反转是通过依赖注入实现的，<strong>当然，IoC 也可以通过其他的方式来实现，而 DI 只是 Spring 的选择</strong>。</p><p>简单地说就是拿到的对象的属性，已经被注入好相关值了，程序员直接使用即可。</p>',10))])}const E=a(m,[["render",I]]);export{A as __pageData,E as default};
