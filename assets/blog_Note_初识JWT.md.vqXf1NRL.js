import{_ as i,o as e,c as o,a6 as t}from"./chunks/framework.BkI9ovSD.js";const a="/assets/421.ByTmZPva.png",n="/assets/418.C2HCnxAb.png",l="/assets/419.Z_vHe85z.png",r="/assets/420.DiZtghz0.png",p="/assets/422.5mXFAf_i.png",h="/assets/423.DgE37U8v.png",k="/assets/424.CAClvZU5.png",d="/assets/425.BLF1OQUx.png",m=JSON.parse('{"title":"初识JWT","description":"JSON Web Token（简称 JWT）是目前最流行的跨域认证解决方案","frontmatter":{"title":"初识JWT","date":"2020-09-29T00:00:00.000Z","description":"JSON Web Token（简称 JWT）是目前最流行的跨域认证解决方案","tags":["JWT"],"categories":["笔记"]},"headers":[],"relativePath":"blog/Note/初识JWT.md","filePath":"blog/Note/初识JWT.md","lastUpdated":1734587597000}'),c={name:"blog/Note/初识JWT.md"};function g(u,s,b,T,E,q){return e(),o("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t('<h1 id="初识jwt" tabindex="-1">初识JWT <a class="header-anchor" href="#初识jwt" aria-label="Permalink to &quot;初识JWT&quot;">​</a></h1><p><img src="'+a+'" alt=""></p><h2 id="什么是认证-authentication" tabindex="-1">什么是认证（Authentication） <a class="header-anchor" href="#什么是认证-authentication" aria-label="Permalink to &quot;什么是认证（Authentication）&quot;">​</a></h2><p>通俗地讲就是 <strong>验证当前用户的身份</strong>，证明“你是你自己”（比如：你每天上下班打卡，都需要通过指纹打卡，当你的指纹和系统里录入的指纹相匹配时，就打卡成功）</p><p>互联网中的 <strong>认证</strong>：</p><ul><li>用户名密码登录</li><li>邮箱发送登录链接</li><li>手机号接收验证码</li><li>只要你能收到邮箱/验证码，就默认你是账号的主人</li></ul><h2 id="什么是授权-authorization" tabindex="-1">什么是授权（Authorization） <a class="header-anchor" href="#什么是授权-authorization" aria-label="Permalink to &quot;什么是授权（Authorization）&quot;">​</a></h2><p><strong>用户授予第三方应用访问该用户某些资源的权限</strong></p><ul><li>你在安装手机应用的时候，APP 会询问是否允许授予权限（访问相册、地理位置等权限）</li><li>你在访问微信小程序时，当登录时，小程序会询问是否允许授予权限（获取昵称、头像、地区、性别等个人信息）</li></ul><p>实现授权的方式有：cookie、session、token、OAuth</p><h2 id="什么是凭证-credentials" tabindex="-1">什么是凭证（Credentials） <a class="header-anchor" href="#什么是凭证-credentials" aria-label="Permalink to &quot;什么是凭证（Credentials）&quot;">​</a></h2><p><strong>实现认证和授权的前提</strong> 是需要一种 <strong>媒介</strong>（<strong>证书</strong>）来标记访问者的身份</p><ul><li>在战国时期，商鞅变法，发明了照身帖。照身帖由官府发放，是一块打磨光滑细密的竹板，上面刻有持有人的头像和籍贯信息，国人必须持有，如若没有就被认为是黑户，或者间谍。</li><li>在现实生活中，每个人都会有一张专属的居民身份证，是用于证明持有人身份的一种法定证件。通过身份证，我们可以办理手机卡/银行卡/个人贷款/交通出行等等，这就是 <strong>认证的凭证。</strong></li><li>在互联网应用中，一般网站（如掘金）会有两种模式，游客模式和登录模式。游客模式下，可以正常浏览网站上面的文章，一旦想要点赞/收藏/分享文章，就需要登录或者注册账号。当用户登录成功后，服务器会给该用户使用的浏览器颁发一个令牌（token），这个令牌用来表明你的身份，每次浏览器发送请求时会带上这个令牌，就可以使用在游客模式下无法使用的功能。</li></ul><h2 id="回顾-cookie" tabindex="-1">回顾 Cookie <a class="header-anchor" href="#回顾-cookie" aria-label="Permalink to &quot;回顾 Cookie&quot;">​</a></h2><h3 id="cookie-是什么" tabindex="-1">Cookie 是什么 <a class="header-anchor" href="#cookie-是什么" aria-label="Permalink to &quot;Cookie 是什么&quot;">​</a></h3><ul><li><strong>HTTP 是无状态的协议（对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息</strong>）：每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。所以服务器与浏览器为了进行会话跟踪（知道是谁在访问我），就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器。而这个状态需要通过 cookie 或者 session 去实现。</li><li><strong>cookie 存储在客户端：</strong> cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</li><li><strong>cookie 是不可跨域的：</strong> 每个 cookie 都会绑定单一的域名，无法在别的域名下获取使用，<strong>一级域名和二级域名之间是允许共享使用的</strong>（<strong>靠的是 domain）</strong>。</li></ul><h3 id="cookie-重要的属性" tabindex="-1">Cookie 重要的属性 <a class="header-anchor" href="#cookie-重要的属性" aria-label="Permalink to &quot;Cookie 重要的属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>name=value</strong></td><td style="text-align:left;">键值对，设置 Cookie 的名称及相对应的值，都必须是 <strong>字符串类型</strong> - 如果值为 Unicode 字符，需要为字符编码。如果值为二进制数据，则需要使用 BASE64 编码。</td></tr><tr><td style="text-align:left;"><strong>domain</strong></td><td style="text-align:left;">指定 cookie 所属域名，默认是当前域名</td></tr><tr><td style="text-align:left;"><strong>path</strong></td><td style="text-align:left;"><strong>指定 cookie 在哪个路径（路由）下生效，默认是 &#39;/&#39;</strong>。 如果设置为 <code>/abc</code>，则只有 <code>/abc</code> 下的路由可以访问到该 cookie，如：<code>/abc/read</code>。</td></tr><tr><td style="text-align:left;"><strong>maxAge</strong></td><td style="text-align:left;">cookie 失效的时间，单位秒。如果为整数，则该 cookie 在 maxAge 秒后失效。如果为负数，该 cookie 为临时 cookie ，关闭浏览器即失效，浏览器也不会以任何形式保存该 cookie 。如果为 0，表示删除该 cookie 。默认为 -1。 <strong>比 expires 好用</strong>。</td></tr><tr><td style="text-align:left;"><strong>expires</strong></td><td style="text-align:left;">过期时间，在设置的某个时间点后该 cookie 就会失效。 一般浏览器的 cookie 都是默认储存的，当关闭浏览器结束这个会话的时候，这个 cookie 也就会被删除</td></tr><tr><td style="text-align:left;"><strong>secure</strong></td><td style="text-align:left;">该 cookie 是否仅被使用安全协议传输。安全协议有 HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为 false。 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。</td></tr><tr><td style="text-align:left;"><strong>httpOnly</strong></td><td style="text-align:left;"><strong>如果给某个 cookie 设置了 httpOnly 属性，则无法通过 JS 脚本读取到该 cookie 的信息，但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 XSS 攻击，不是绝对的安全</strong></td></tr></tbody></table><h3 id="使用-cookie-时需要考虑的问题" tabindex="-1">使用 Cookie 时需要考虑的问题 <a class="header-anchor" href="#使用-cookie-时需要考虑的问题" aria-label="Permalink to &quot;使用 Cookie 时需要考虑的问题&quot;">​</a></h3><ul><li><p>因为存储在客户端，容易被客户端篡改，使用前需要验证合法性</p></li><li><p>不要存储敏感数据，比如用户密码，账户余额</p></li><li><p>使用 httpOnly 在一定程度上提高安全性</p></li><li><p>尽量减少 cookie 的体积，能存储的数据量不能超过 4kb</p></li><li><p>设置正确的 domain 和 path，减少数据传输</p></li><li><p><strong>cookie 无法跨域</strong></p></li><li><p>一个浏览器针对一个网站最多存 20 个Cookie，浏览器一般只允许存放 300 个Cookie</p></li><li><p><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></p></li></ul><h3 id="cookie-无法跨域是什么意思" tabindex="-1">Cookie 无法跨域是什么意思 <a class="header-anchor" href="#cookie-无法跨域是什么意思" aria-label="Permalink to &quot;Cookie 无法跨域是什么意思&quot;">​</a></h3><p>假设一个前端项目启动在 <code>http://localhost:70</code>，但是调用的后端接口在 <code>http://localhost:3000 </code>上，端口不一样，就必然存在跨域的问题。</p><p>如果你在该接口的 <code>response</code> 中尝试给前端设置 cookie，打开控制台，虽然可以在 Response Header 里看到 <code>set-cookie</code> 的操作，但是在浏览器的 <code>application</code> 里，可以看到 cookie 并没有被设置进来。</p><p>这就是因为 cookie 无法跨域。关于跨域，解决办法有很多，<strong>最常用的解决办法是通过 nginx 代理</strong>。</p><h2 id="回顾-session" tabindex="-1">回顾 Session <a class="header-anchor" href="#回顾-session" aria-label="Permalink to &quot;回顾 Session&quot;">​</a></h2><h3 id="session-是什么" tabindex="-1">Session 是什么 <a class="header-anchor" href="#session-是什么" aria-label="Permalink to &quot;Session 是什么&quot;">​</a></h3><ul><li><strong>session 是另一种记录服务器和客户端会话状态的机制</strong></li><li><strong>session 是基于 cookie 实现的，session 存储在服务器端，sessionId 会被存储到客户端的 cookie 中</strong></li></ul><h3 id="session-认证的流程" tabindex="-1">Session 认证的流程 <a class="header-anchor" href="#session-认证的流程" aria-label="Permalink to &quot;Session 认证的流程&quot;">​</a></h3><ol><li><p>用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建对应的 Session</p></li><li><p>请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器</p></li><li><p>浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名</p></li><li><p>当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</p></li></ol><img src="'+n+'" style="zoom:67%;"><p>根据以上流程可知，<strong>SessionID 是连接 Cookie 和 Session 的一道桥梁</strong>，大部分系统也是根据此原理来验证用户登录状态。</p><h3 id="使用-session-时需要考虑的问题" tabindex="-1">使用 session 时需要考虑的问题 <a class="header-anchor" href="#使用-session-时需要考虑的问题" aria-label="Permalink to &quot;使用 session 时需要考虑的问题&quot;">​</a></h3><ul><li><p>将 session 存储在服务器里面，当用户同时在线量比较多时，这些 session 会占据较多的内存，需要在服务端定期的去清理过期的 session</p></li><li><p>当网站采用 <strong>集群部署</strong> 的时候，会遇到多台 web 服务器之间如何做 session 共享的问题。因为 session 是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建 session 的服务器，那么该服务器就无法拿到之前已经放入到 session 中的登录凭证之类的信息了。</p></li><li><p>当多个应用要共享 session 时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好 cookie 跨域的处理。</p></li><li><p><strong>sessionId 是存储在 cookie 中的，假如浏览器禁止 cookie 或不支持 cookie 怎么办？</strong> 一般会把 sessionId 跟在 url 参数后面即重写 url，所以 session 不一定非得需要靠 cookie 实现</p></li><li><p><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></p></li></ul><h2 id="cookie-和-session-的区别" tabindex="-1">Cookie 和 Session 的区别 <a class="header-anchor" href="#cookie-和-session-的区别" aria-label="Permalink to &quot;Cookie 和 Session 的区别&quot;">​</a></h2><ul><li><strong>安全性：</strong> Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。</li><li><strong>存取值的类型不同</strong>：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。</li><li><strong>有效期不同：</strong> Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。</li><li><strong>存储大小不同：</strong> 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。</li></ul><h2 id="回顾-token-令牌-是什么" tabindex="-1">回顾 Token（令牌）是什么 <a class="header-anchor" href="#回顾-token-令牌-是什么" aria-label="Permalink to &quot;回顾 Token（令牌）是什么&quot;">​</a></h2><h3 id="acesss-token" tabindex="-1">Acesss Token <a class="header-anchor" href="#acesss-token" aria-label="Permalink to &quot;Acesss Token&quot;">​</a></h3><ul><li><strong>访问资源接口（API）时所需要的资源凭证</strong></li><li><strong>简单 token 的组成：</strong> uid（用户唯一的身份标识）、time（当前时间的时间戳）、sign（签名，token 的前几位以哈希算法压缩成的一定长度的十六进制字符串）</li><li>特点： <ul><li><strong>服务端无状态化、可扩展性好</strong></li><li><strong>支持移动端设备</strong></li><li>安全</li><li>支持跨程序调用</li></ul></li></ul><h3 id="token-的身份验证流程" tabindex="-1">Token 的身份验证流程 <a class="header-anchor" href="#token-的身份验证流程" aria-label="Permalink to &quot;Token 的身份验证流程&quot;">​</a></h3><ol><li>客户端使用用户名跟密码请求登录</li><li>服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端</li><li>客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 token ，如果验证成功，就向客户端返回请求的数据</li></ol><p><img src="'+l+'" alt=""></p><p>每一次请求都需要携带 token，需要把 token 放到 HTTP 的 Header 里。</p><p>基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放 token 数据。<strong>用解析 token 的计算时间换取 session 的存储空间</strong>，从而减轻服务器的I /O 压力，减少频繁的查询数据库。</p><p>token 完全由应用管理，所以它可以避开同源策略。</p><h3 id="refresh-token" tabindex="-1">Refresh Token <a class="header-anchor" href="#refresh-token" aria-label="Permalink to &quot;Refresh Token&quot;">​</a></h3><p>另外一种 token——refresh token。refresh token 是专用于刷新 access token 的 token。</p><p>如果没有 refresh token，也可以刷新 access token，但每次刷新都要用户输入登录用户名与密码，会很麻烦。</p><p>有了 refresh token，可以减少这个麻烦，客户端直接用 refresh token 去更新 access token，无需用户进行额外的操作。</p><img src="'+r+`" style="zoom:80%;"><p>Access Token 的有效期比较短，当 Acesss Token 由于过期而失效时，使用 Refresh Token 就可以获取到新的 Token，如果 Refresh Token 也失效了，用户就只能重新登录了。</p><p>Refresh Token 及过期时间是存储在服务器的数据库中，只有在申请新的 Acesss Token 时才会验证，不会对业务接口响应时间造成影响，也不需要向 Session 一样一直保持在内存中以应对大量的请求。</p><p><strong>为什么要用 refresh token？</strong></p><p>因为 Token 过期有可能是服务器故意为之，而不是自然过期，比如更改了权限，禁用了用户之类，这样 Refresh 的时候就会不通过，换句话说，Refresh 不是为了保证持续有效，而是为了保证失效。如果 Token 是无状态的，其中可能携带授权信息等，也需要短时间定时刷新 Token 以更新授权信息。</p><h3 id="使用-token-时需要考虑的问题" tabindex="-1">使用 token 时需要考虑的问题 <a class="header-anchor" href="#使用-token-时需要考虑的问题" aria-label="Permalink to &quot;使用 token 时需要考虑的问题&quot;">​</a></h3><ul><li>如果你认为用数据库来存储 token 会导致查询时间太长，可以选择放在内存当中。比如 redis 很适合你对 token 查询的需求。</li><li><strong>token 完全由应用管理，所以它可以避开同源策略</strong></li><li><strong>token 可以避免 CSRF 攻击（因为不需要 cookie 了）</strong></li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><h2 id="token-和-session-的区别" tabindex="-1">Token 和 Session 的区别 <a class="header-anchor" href="#token-和-session-的区别" aria-label="Permalink to &quot;Token 和 Session 的区别&quot;">​</a></h2><ul><li>Session 是一种<strong>记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息</strong>。而 Token 是<strong>令牌</strong>，<strong>访问资源接口（API）时所需要的资源凭证</strong>。Token <strong>使服务端无状态化，不会存储会话信息。</strong></li><li>Session 和 Token 并不矛盾，作为身份认证 Token 安全性比 Session 好，因为每一个请求都有签名还能防止监听以及重放攻击，而 Session 就必须依赖链路层来保障通讯安全了。<strong>如果你需要实现有状态的会话，仍然可以增加 Session 来在服务器端保存一些状态。</strong></li><li>所谓 Session 认证只是简单的把 User 信息存储到 Session 里，因为 SessionID 的不可预测性，暂且认为是安全的。而 Token ，如果指的是 OAuth Token 或类似的机制的话，提供的是 <strong>认证</strong> 和 <strong>授权</strong> ，认证是针对用户，授权是针对 App 。其目的是让某 App 有权利访问某用户的信息。这里的 Token 是唯一的。不可以转移到其它 App上，也不可以转到其它用户上。Session 只提供一种简单的认证，即只要有此 SessionID ，即认为有此 User 的全部权利。是需要严格保密的，这个数据应该只保存在站方，不应该共享给其它网站或者第三方 App。所以简单来说：<strong>如果你的用户数据可能需要和第三方共享，或者允许第三方调用 API 接口，用 Token 。如果永远只是自己的网站，自己的 App，用什么就无所谓了。</strong></li></ul><h2 id="jwt-是什么" tabindex="-1">JWT 是什么 <a class="header-anchor" href="#jwt-是什么" aria-label="Permalink to &quot;JWT 是什么&quot;">​</a></h2><ul><li><p>JSON Web Token（简称 JWT）是目前最流行的 <strong>跨域认证</strong> 解决方案。</p></li><li><p>是一种 <strong>认证授权机制</strong>。</p></li><li><p>JWT 是为了在网络应用环境间 <strong>传递声明</strong> 而执行的一种基于 JSON 的开放标准（RFC 7519）。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，比如用在用户登录上。</p></li><li><p>可以使用 HMAC 算法或者是 RSA 的公/私秘钥对 JWT 进行签名。因为数字签名的存在，这些传递的信息是可信的。</p></li></ul><h2 id="跨域认证的问题" tabindex="-1">跨域认证的问题 <a class="header-anchor" href="#跨域认证的问题" aria-label="Permalink to &quot;跨域认证的问题&quot;">​</a></h2><p>互联网服务离不开用户认证，一般流程是下面这样：</p><ol><li><p>用户向服务器发送用户名和密码。</p></li><li><p>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p></li><li><p>服务器向用户返回一个 session_id，写入用户的 Cookie。</p></li><li><p>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p></li><li><p>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p></li></ol><p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p><p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p><p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。</p><p>JWT 就是这种方案的一个代表。</p><h2 id="jwt-的原理" tabindex="-1">JWT 的原理 <a class="header-anchor" href="#jwt-的原理" aria-label="Permalink to &quot;JWT 的原理&quot;">​</a></h2><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;姓名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;角色&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;管理员&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;到期时间&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2018年7月1日0点0分&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以后，客户端与服务端通信的时候，都要发回这个 JSON 对象。</p><p>服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成 **无状态 **了，从而比较容易实现扩展。</p><h2 id="jwt-的数据结构" tabindex="-1">JWT 的数据结构 <a class="header-anchor" href="#jwt-的数据结构" aria-label="Permalink to &quot;JWT 的数据结构&quot;">​</a></h2><p>实际的 JWT 大概就像下面这样。</p><p><img src="`+p+'" alt="img"></p><p>它是一个很长的字符串，中间用点（<code>.</code>）分隔成三个部分。</p><p><strong>注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</strong></p><p>JWT 的三个部分依次如下：</p><ul><li><p>Header（头部）</p></li><li><p>Payload（负载）</p></li><li><p>Signature（签名）</p></li></ul><p>写成一行，就是下面的样子：</p><p><img src="'+h+`" alt="img"></p><p>下面依次介绍这三个部分。</p><h3 id="header" tabindex="-1">Header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;Header&quot;">​</a></h3><p>Header 部分是一个 JSON 对象，<strong>描述 JWT 的元数据</strong>，通常是下面的样子。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JWT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>alg</code> 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；</p><p><code>typ</code> 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 <code>JWT</code>。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p><h3 id="payload" tabindex="-1">Payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;Payload&quot;">​</a></h3><p>Payload 部分也是一个 JSON 对象，<strong>用来存放实际需要传递的数据</strong>。JWT 规定了7个官方字段，供选用。</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1234567890&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h3 id="signature" tabindex="-1">Signature <a class="header-anchor" href="#signature" aria-label="Permalink to &quot;Signature&quot;">​</a></h3><p>Signature 部分是 <strong>对前两部分的签名，防止数据篡改</strong>。</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HMACSHA256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  base64UrlEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(header) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  base64UrlEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  secret)</span></span></code></pre></div><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用&quot;点&quot;（<code>.</code>）分隔，就可以返回给客户端。</p><h3 id="base64url" tabindex="-1">Base64URL <a class="header-anchor" href="#base64url" aria-label="Permalink to &quot;Base64URL&quot;">​</a></h3><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code> 被省略、<code>+ </code> 替换成 <code>-</code>，<code>/</code> 替换成 <code>_</code> 。这就是 Base64URL 算法。</p><h2 id="jwt-的使用方式" tabindex="-1">JWT 的使用方式 <a class="header-anchor" href="#jwt-的使用方式" aria-label="Permalink to &quot;JWT 的使用方式&quot;">​</a></h2><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Authorization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Bearer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p><p><img src="`+k+'" alt=""></p><h2 id="jwt-的几个特点" tabindex="-1">JWT 的几个特点 <a class="header-anchor" href="#jwt-的几个特点" aria-label="Permalink to &quot;JWT 的几个特点&quot;">​</a></h2><ul><li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li><li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</li><li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li><li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li></ul><h2 id="token-和-jwt-的区别" tabindex="-1">Token 和 JWT 的区别 <a class="header-anchor" href="#token-和-jwt-的区别" aria-label="Permalink to &quot;Token 和 JWT 的区别&quot;">​</a></h2><p><strong>相同：</strong></p><ul><li>都是访问资源的令牌</li><li>都可以记录用户的信息</li><li>都是使服务端无状态化</li><li>都是只有验证成功后，客户端才能访问服务端上受保护的资源</li></ul><p><strong>区别：</strong></p><ul><li>Token：服务端验证客户端发送过来的 Token 时，还需要查询数据库获取用户信息，然后验证 Token 是否有效。</li><li>JWT： 将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验（校验也是 JWT 自己实现的）即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。</li></ul><h2 id="常见的前后端鉴权方式" tabindex="-1">常见的前后端鉴权方式 <a class="header-anchor" href="#常见的前后端鉴权方式" aria-label="Permalink to &quot;常见的前后端鉴权方式&quot;">​</a></h2><ol><li>Session-Cookie</li><li>Token 验证（包括 JWT，SSO）</li><li>OAuth2.0（开放授权）</li></ol><h2 id="常见的加密算法" tabindex="-1">常见的加密算法 <a class="header-anchor" href="#常见的加密算法" aria-label="Permalink to &quot;常见的加密算法&quot;">​</a></h2><p><img src="'+d+'" alt="image.png"></p><p>哈希算法（Hash Algorithm）又称散列算法、散列函数、哈希函数，是一种从任何一种数据中创建小的数字 <strong>指纹</strong> 的方法。哈希算法将数据重新打乱混合，重新创建一个哈希值。</p><p>哈希算法主要用来保障数据真实性(即完整性)，即发信人将原始消息和哈希值一起发送，收信人通过相同的哈希函数来校验原始数据是否真实。</p><p>哈希算法通常有以下几个特点：</p><ul><li><p>正像快速：原始数据可以快速计算出哈希值</p></li><li><p>逆向困难：通过哈希值基本不可能推导出原始数据</p></li><li><p>输入敏感：原始数据只要有一点变动，得到的哈希值差别很大</p></li><li><p>冲突避免：很难找到不同的原始数据得到相同的哈希值，宇宙中原子数大约在 10 的 60 次方到 80 次方之间，所以 2 的 256 次方有足够的空间容纳所有的可能，算法好的情况下冲突碰撞的概率很低：</p><ul><li><p>2 的 128 次方为 340282366920938463463374607431768211456，也就是 10 的 39 次方级别</p></li><li><p>2 的 160 次方为 1.4615016373309029182036848327163e+48，也就是 10 的 48 次方级别</p></li><li><p>2 的 256 次方为 1.1579208923731619542357098500869 × 10 的 77 次方，也就是 10 的 77 次方</p></li></ul></li></ul><p><strong>注意：</strong></p><ol><li><p>以上不能保证数据被恶意篡改，原始数据和哈希值都可能被恶意篡改，要保证不被篡改，可以使用RSA 公钥私钥方案，再配合哈希值。</p></li><li><p>哈希算法主要用来防止计算机传输过程中的错误，早期计算机通过前 7 位数据第 8 位奇偶校验码来保障（12.5% 的浪费效率低），对于一段数据或文件，通过哈希算法生成 128bit 或者 256bit 的哈希值，如果校验有问题就要求重传。</p></li></ol><h2 id="使用加密算法时需要考虑的问题" tabindex="-1">使用加密算法时需要考虑的问题 <a class="header-anchor" href="#使用加密算法时需要考虑的问题" aria-label="Permalink to &quot;使用加密算法时需要考虑的问题&quot;">​</a></h2><ul><li><p>绝不要以 <strong>明文存储</strong> 密码</p></li><li><p><strong>永远使用哈希算法来处理密码，绝不要使用 Base64 或其他编码方式来存储密码，这和以明文存储密码是一样的，使用哈希，而不要使用编码</strong>。编码以及加密，都是双向的过程，而密码是保密的，应该只被它的所有者知道， 这个过程必须是单向的。哈希正是用于做这个的，从来没有解哈希这种说法， 但是编码就存在解码，加密就存在解密。</p></li><li><p>绝不要使用弱哈希或已被破解的哈希算法，像 MD5 或 SHA1 ，只使用强密码哈希算法。</p></li><li><p>绝不要以明文形式显示或发送密码，即使是对密码的所有者也应该这样。如果你需要 “忘记密码” 的功能，可以随机生成一个新的 <strong>一次性的</strong>（这点很重要）密码，然后把这个密码发送给用户。</p></li></ul>',129)]))}const C=i(c,[["render",g]]);export{m as __pageData,C as default};
