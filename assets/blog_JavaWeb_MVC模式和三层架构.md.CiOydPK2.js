import{_ as o,o as r,c as s,a6 as a}from"./chunks/framework.BkI9ovSD.js";const e="/assets/021.C0F_AK8J.png",n="/assets/488.CUgWcm9p.png",i="/assets/489.Ch0Q6Uuy.png",l="/assets/490.BX_ZW3o-.png",V=JSON.parse('{"title":"MVC模式和三层架构","description":"","frontmatter":{"title":"MVC模式和三层架构","date":"2023-04-21T00:00:00.000Z","tags":["MVC","JSP"],"categories":["JavaWeb"]},"headers":[],"relativePath":"blog/JavaWeb/MVC模式和三层架构.md","filePath":"blog/JavaWeb/MVC模式和三层架构.md","lastUpdated":1736162731000}'),g={name:"blog/JavaWeb/MVC模式和三层架构.md"};function p(m,t,c,d,_,C){return r(),s("div",{"data-pagefind-body":!0},t[0]||(t[0]=[a('<h1 id="mvc模式和三层架构" tabindex="-1">MVC模式和三层架构 <a class="header-anchor" href="#mvc模式和三层架构" aria-label="Permalink to &quot;MVC模式和三层架构&quot;">​</a></h1><p>MVC 模式和三层架构是一些理论的知识，将来我们使用了它们进行代码开发会让我们代码维护性和扩展性更好。</p><h2 id="mvc模式" tabindex="-1">MVC模式 <a class="header-anchor" href="#mvc模式" aria-label="Permalink to &quot;MVC模式&quot;">​</a></h2><p>MVC 是一种分层开发的模式，其中：</p><ul><li><p>M 代表 <strong>模型</strong>(<strong>Model</strong>) 就是数据模型，每一个类就是一个模型，每一个类对象代表一个完整的数据</p></li><li><p>V 代表 <strong>视图</strong>(<strong>View</strong>) 就是网页，JSP，用来展示模型中的数据</p></li><li><p>C 代表 <strong>控制器</strong>(<strong>Controller</strong>) 控制器用来把不同的数据，显示在不同的视图上</p></li></ul><p><img src="'+e+'" alt=""></p><p>控制器（serlvlet）用来接收浏览器发送过来的请求，控制器调用模型（JavaBean）来获取数据，比如从数据库查询数据；控制器获取到数据后再交由视图（JSP）进行数据展示。</p><p><strong>MVC 的好处：</strong></p><ul><li><p>职责单一，互不影响。每个角色做它自己的事，各司其职</p></li><li><p>有利于分工协作</p></li><li><p>有利于组件重用</p></li></ul><h3 id="_2-三层架构" tabindex="-1">2. 三层架构 <a class="header-anchor" href="#_2-三层架构" aria-label="Permalink to &quot;2. 三层架构&quot;">​</a></h3><p>三层架构是将我们的项目分成了三个层面，分别是 <strong>表现层、业务逻辑层、数据访问层</strong>。</p><img src="'+n+'" alt="image-20210818164301154" style="zoom:67%;"><ul><li><p>数据访问层：对数据库的 CRUD 基本操作</p><p>业务逻辑层：对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能。例如 <strong>注册业务功能</strong> ，我们会先调用 <strong>数据访问层</strong> 的 <strong>selectByName()</strong> 方法判断该用户名是否存在，如果不存在再调用 <strong>数据访问层</strong> 的 <strong>insert()</strong> 方法进行数据的添加操作</p></li><li><p>表现层：接收请求，封装数据，调用业务逻辑层，响应数据</p></li></ul><p>而整个流程是，浏览器发送请求，表现层的 Servlet 接收请求并调用业务逻辑层的方法进行业务逻辑处理，而业务逻辑层方法调用数据访问层方法进行数据的操作，依次返回到 Serlvet，然后 Servlet 将数据交由 JSP 进行展示。</p><p>三层架构的每一层都有特有的包名称：</p><ul><li>表现层： com.itheima.controller 或者 com.itheima.web</li><li>业务逻辑层：com.itheima.service</li><li>数据访问层：com.itheima.dao 或者 com.itheima.mapper</li></ul><p>后期我们还会学习一些框架，不同的框架是对不同的层进行封装的：</p><img src="'+i+'" alt="image-20210818165439826" style="zoom:67%;"><h3 id="_3-mvc和三层架构" tabindex="-1">3 MVC和三层架构 <a class="header-anchor" href="#_3-mvc和三层架构" aria-label="Permalink to &quot;3  MVC和三层架构&quot;">​</a></h3><p>通过 <strong>MVC</strong> 和 <strong>三层架构</strong> 的学习，有些人肯定混淆了。那他们有什么区别和联系？</p><img src="'+l+'" alt="image-20210818165808589" style="zoom:67%;"><p>如上图上半部分是 MVC 模式，上图下半部分是三层架构。 <strong>MVC 模式</strong> 中的 C（控制器）和 V（视图）就是 <strong>三层架构</strong> 中的表现层，而 <strong>MVC 模式</strong> 中的 M（模型）就是 <strong>三层架构</strong> 中的 <strong>业务逻辑层</strong> 和 <strong>数据访问层</strong>。</p><p>可以将 <strong>MVC 模式</strong> 理解成是一个大的概念，而 <strong>三层架构</strong> 是对 <strong>MVC 模式</strong> 实现架构的思想。 那么我们以后按照要求将不同层的代码写在不同的包下，每一层里功能职责做到单一，将来如果将表现层的技术换掉，而业务逻辑层和数据访问层的代码不需要发生变化。</p>',23)]))}const M=o(g,[["render",p]]);export{V as __pageData,M as default};
