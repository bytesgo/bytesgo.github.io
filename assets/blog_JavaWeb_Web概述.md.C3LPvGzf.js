import{_ as e,o as l,c as t,a6 as i}from"./chunks/framework.BkI9ovSD.js";const r="/assets/509.B0Nm8oCB.png",o="/assets/508.lq06DF1q.png",s="/assets/507.D1j-Io3T.png",n="/assets/506.Yz-er-qd.png",p="/assets/505.CJ2y028u.png",b="/assets/504.CMe8UKYI.png",J=JSON.parse('{"title":"Web概述","description":"","frontmatter":{"title":"Web概述","date":"2023-04-20T00:00:00.000Z","tags":["Web"],"categories":["JavaWeb"]},"headers":[],"relativePath":"blog/JavaWeb/Web概述.md","filePath":"blog/JavaWeb/Web概述.md","lastUpdated":1742284756000}'),h={name:"blog/JavaWeb/Web概述.md"};function c(d,a,g,u,W,m){return l(),t("div",{"data-pagefind-body":!0},a[0]||(a[0]=[i('<h1 id="web概述" tabindex="-1">Web概述 <a class="header-anchor" href="#web概述" aria-label="Permalink to &quot;Web概述&quot;">​</a></h1><h2 id="web-和-javaweb的概念" tabindex="-1">Web 和 JavaWeb的概念 <a class="header-anchor" href="#web-和-javaweb的概念" aria-label="Permalink to &quot;Web 和 JavaWeb的概念&quot;">​</a></h2><p>Web 是全球广域网，也称为万维网(www)，能够通过浏览器访问的网站。</p><p>在我们日常的生活中，经常会使用浏览器去访问百度、京东等网站，这些网站统称为Web网站。</p><p>那么 JavaWeb 又是什么呢？顾名思义，<strong>JavaWeb 就是用 Java 技术来解决相关 Web 互联网领域的技术栈</strong>。</p><p>国内很多大型网站公司也是首选 Java 语言来解决 Web 互联网相关的问题：</p><p><img src="'+r+'" alt="509"></p><p>学习完 JavaWeb 之后，就可以使用 Java 语言开发上述所说的网站，而使用 Java 语言开发互联网系统，有很多技术栈需要了解。</p><h2 id="javaweb技术栈" tabindex="-1">JavaWeb技术栈 <a class="header-anchor" href="#javaweb技术栈" aria-label="Permalink to &quot;JavaWeb技术栈&quot;">​</a></h2><p>了解 JavaWeb 技术栈之前，有一个很重要的概念要介绍。</p><h3 id="b-s架构" tabindex="-1">B/S架构 <a class="header-anchor" href="#b-s架构" aria-label="Permalink to &quot;B/S架构&quot;">​</a></h3><p>B/S 架构：Browser/Server，即 <strong>浏览器/服务器</strong> 架构模式。</p><p>它的特点是，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。</p><p>浏览器只需要请求服务器，获取Web资源，服务器把Web资源发送给浏览器即可。</p><p>通过下面这张图来回想下我们平常的上网过程：</p><img src="'+o+'" alt="1627031933553" style="zoom:67%;"><ul><li>打开浏览器访问百度首页，输入要搜索的内容，按下回车，就可以获取和搜索相关的内容</li><li>思考下搜索的内容并不在我们自己的电脑上，那么这些内容从何而来？答案很明显是从百度服务器返回给我们的</li><li>日常百度的小细节，逢年过节百度的 logo 会更换不同的图片，服务端发生变化，客户端不需做任务事情就能获取最新内容</li><li>所以说 B/S 架构的好处：易于维护升级：服务器端升级后，客户端无需任何部署就可以使用到新的版本</li></ul><p>了解了什么是 B/S 架构后，作为后台开发工程师的我们将来主要关注的是服务端的开发和维护工作。</p><p>在服务端将来会放很多资源，都有哪些资源呢？</p><h3 id="静态资源" tabindex="-1">静态资源 <a class="header-anchor" href="#静态资源" aria-label="Permalink to &quot;静态资源&quot;">​</a></h3><ul><li><p>静态资源主要包含 HTML、CSS、JavaScript、图片等，主要负责页面的展示。</p></li><li><p>我们之前已经学过 <strong>前端网页制作三剑客</strong> （HTML+CSS+JavaScript），使用这些技术我们就可以制作出效果比较丰富的网页，将来展现给用户。但是由于做出来的这些内容都是静态的，这就会导致所有的人看到的内容将是一模一样的。</p></li><li><p>在日常上网的过程中，我们除了看到这些好看的页面以外，还会碰到很多动态内容，比如我们常见的百度登录效果：</p><p><img src="'+s+'" alt="1627037814180"></p><p><strong>张三</strong> 登录以后在网页的右上角看到的用户名是 <strong>张三</strong>，而 <strong>李四</strong> 登录以后看到的则是 <strong>李四</strong>。所以不同的用户访问相同的资源看到的内容大多数是不一样的，要想实现这样的效果，光靠静态资源是无法实现的。</p></li></ul><h3 id="动态资源" tabindex="-1">动态资源 <a class="header-anchor" href="#动态资源" aria-label="Permalink to &quot;动态资源&quot;">​</a></h3><ul><li><p>动态资源主要包含 Servlet、JSP 等，主要用来负责逻辑处理。</p></li><li><p>动态资源处理完逻辑后会把得到的结果交给静态资源来进行展示，动态资源和静态资源要结合一起使用。</p></li><li><p>动态资源虽然可以处理逻辑，但是当用户来登录百度的时候，就需要输入 <strong>用户名</strong> 和 <strong>密码</strong>，这个时候我们就又需要解决的一个问题是：用户在注册的时候填入的用户名和密码、以及我们经常会访问到一些数据列表的内容展示（如下图所示），这些数据都存储在哪里？我们需要的时候又是从哪里取得的呢？</p><p><img src="'+n+'" alt="1627038674340"></p></li></ul><h3 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h3><ul><li><p>数据库主要负责存储数据。</p></li><li><p>整个 Web 的访问过程就如下图所示：</p><p><img src="'+p+'" alt="1627039320220"></p><ol><li>浏览器发送一个请求到服务端，去请求所需要的相关资源</li><li>资源分为动态资源和静态资源，动态资源可以是使用 Java 代码按照 Servlet 和 JSP 的规范编写的内容</li><li>Java 代码可以进行业务处理也可以从数据库中读取数据</li><li>拿到数据后，把数据交给 HTML 页面进行展示，再结合 CSS 和 JavaScript 使展示效果更好</li><li>服务端将静态资源响应给浏览器</li><li>浏览器将这些资源进行解析</li><li>解析后将效果展示在浏览器，用户就可以看到最终的结果</li></ol></li></ul><p>在整个Web的访问过程中，会设计到很多技术，比如：</p><h3 id="http-协议" tabindex="-1">HTTP 协议 <a class="header-anchor" href="#http-协议" aria-label="Permalink to &quot;HTTP 协议&quot;">​</a></h3><ul><li>HTTP 协议：主要定义通信规则</li><li>浏览器发送请求给服务器，服务器响应数据给浏览器，这整个过程都需要遵守一定的规则，之前学习过的TCP、UDP，这些都属于规则，这里我们需要使用的是 HTTP 协议，这也是一种规则。</li></ul><h3 id="web服务器" tabindex="-1">Web服务器 <a class="header-anchor" href="#web服务器" aria-label="Permalink to &quot;Web服务器&quot;">​</a></h3><ul><li>Web服务器：负责解析 HTTP 协议，解析请求数据，并发送响应数据</li><li>浏览器按照HTTP协议发送请求和数据，后台就需要一个 Web 服务器软件来根据 HTTP 协议解析请求和数据，然后把处理结果再按照HTTP协议发送给浏览器</li><li>Web服务器软件有很多，我们课程中将学习的是目前最为常用的 <strong>Tomcat</strong> 服务器</li></ul><p>到这为止，关于 JavaWeb 中用到的技术栈我们就介绍完了，这里面就只有 HTTP 协议、Servlet、JSP 以及 Tomcat 这些知识是没有学习过的，所以整个Web核心主要就是来学习这些技术。</p><h2 id="web-核心技术" tabindex="-1">Web 核心技术 <a class="header-anchor" href="#web-核心技术" aria-label="Permalink to &quot;Web 核心技术&quot;">​</a></h2><p><img src="'+b+'" alt="1627043194238"></p><p>整个 Web 核心，我们总共有五大部分需要学习的内容，分别是:</p><ul><li>HTTP、Tomcat、Servlet</li><li>Request（请求）、Response（响应）</li><li>JSP、会话技术（Cookie、Session）</li><li>Filter（过滤器）、Listener（监听器）</li><li>Ajax、Vue、ElementUI</li></ul><p>其中，</p><ul><li>Request 是从 <strong>客户端</strong> 向 <strong>服务端</strong> 发出的请求对象</li><li>Response 是从 <strong>服务端</strong> 响应给 <strong>客户端</strong> 的结果对象</li><li>JSP 是动态网页技术</li><li>会话技术是用来存储客户端和服务端交互所产生的数据</li><li>过滤器是用来拦截客户端的请求</li><li>监听器是用来监听特定事件</li><li>Ajax、Vue、ElementUI 都是属于前端技术</li></ul>',37)]))}const P=e(h,[["render",c]]);export{J as __pageData,P as default};
