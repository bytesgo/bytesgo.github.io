import{_ as n,o as l,c as e,a6 as i,f as a,a as t}from"./chunks/framework.BkI9ovSD.js";const h="/assets/433.eR-4Yknd.png",p="/assets/426.DKLt9DNw.png",k="/assets/427.njk4ngFm.png",d="/assets/428.BE8vsKR5.png",r="/assets/429.CrkI0SM-.png",g="/assets/430.Do3UoyzQ.jpg",o="/assets/431.FURYulqU.png",E="/assets/432.CoPzPgx0.png",y="/assets/434.Dl0yM41y.png",F="/assets/435.C5E2YVDw.png",c="/assets/436.BKpNwELd.png",C="/assets/437.BHE3u3zi.png",B="/assets/438.BpNNuwhX.png",S=JSON.parse('{"title":"Redis的基本使用","description":"","frontmatter":{"title":"Redis的基本使用","date":"2020-10-21T00:00:00.000Z","tags":["Redis","Storage Middleware","Middleware","Cache"],"categories":["SpringBoot"]},"headers":[],"relativePath":"blog/SpringBoot/Redis的基本使用.md","filePath":"blog/SpringBoot/Redis的基本使用.md","lastUpdated":1736410904000}'),u={name:"blog/SpringBoot/Redis的基本使用.md"};function b(m,s,A,D,f,x){return l(),e("div",{"data-pagefind-body":!0},s[0]||(s[0]=[i('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Redis 是现在最受欢迎的 NoSQL 数据库之一，Redis 是一个使用 ANSI C 编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库。</p></div><h1 id="redis的基本使用" tabindex="-1">Redis的基本使用 <a class="header-anchor" href="#redis的基本使用" aria-label="Permalink to &quot;Redis的基本使用&quot;">​</a></h1><p><img src="'+h+'" alt=""></p><h2 id="nosql-概述" tabindex="-1">NoSQL 概述 <a class="header-anchor" href="#nosql-概述" aria-label="Permalink to &quot;NoSQL 概述&quot;">​</a></h2><h3 id="回顾数据库曾经的时代" tabindex="-1">回顾数据库曾经的时代 <a class="header-anchor" href="#回顾数据库曾经的时代" aria-label="Permalink to &quot;回顾数据库曾经的时代&quot;">​</a></h3><h4 id="单机-mysql-的时代" tabindex="-1">单机 MySQL 的时代 <a class="header-anchor" href="#单机-mysql-的时代" aria-label="Permalink to &quot;单机 MySQL 的时代&quot;">​</a></h4><img src="'+p+'" style="zoom:67%;"><p>90 年代，一个普通网站的访问量一般不会太大，单个数据库完全足够了。</p><p>那个时候，网站更多的是在使用静态网页（HTML），服务器根本没有太大的压力。</p><p>思考一下，在这种情况下，一个网站的瓶颈是什么？</p><ol><li><p>数据量如果太大，一个机器就放不下了。</p></li><li><p>数据的索引（B+Tree）如果太多，一个机器内存也放不下。（单表大小超过300万就一定要建立索引了）</p></li><li><p>访问量（读写混合）如果太大，一个服务器承受不了。</p></li></ol><p>只要你的网站开始出现以上的三种情况之一，那么你就必须要给项目做升级了。</p><h4 id="memcached-缓存-mysql-垂直拆分-读写分离" tabindex="-1">Memcached（缓存）+ MySQL + 垂直拆分（读写分离） <a class="header-anchor" href="#memcached-缓存-mysql-垂直拆分-读写分离" aria-label="Permalink to &quot;Memcached（缓存）+ MySQL + 垂直拆分（读写分离）&quot;">​</a></h4><p>一个网站 80% 的情况都是在读数据，如果我们每次读都要去查询数据库的话就十分的麻烦。</p><p>所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率。</p><p>使用缓存之前的发展过程： 尝试了优化数据结构和索引--&gt; 尝试了使用文件缓存（IO）---&gt;选择了 Memcached（当时最热门的技术）</p><img src="'+k+'" style="zoom:80%;"><h4 id="分库分表-水平拆分-mysql-集群" tabindex="-1">分库分表 + 水平拆分 + MySQL 集群 <a class="header-anchor" href="#分库分表-水平拆分-mysql-集群" aria-label="Permalink to &quot;分库分表 + 水平拆分 + MySQL 集群&quot;">​</a></h4><p>行业内技术和业务在发展的同时，对从业人员的要求也越来越高。</p><p><strong>本质：数据库的读和写</strong></p><p>早些年数据库使用 MyISAM 引擎： <strong>表锁</strong>，十分影响效率，高并发下就会出现严重的锁问题。</p><p>后来我们转战了 Innodb 引擎：<strong>行锁</strong>，比表锁效率高得多。</p><p>慢慢的我们就开始使用 <strong>分库分表</strong> 来解决写的压力，MySQL 也在当年推出了 <strong>表分区</strong>，但这个技术并没有多少公司使用。</p><p>而 MySQL 集群的出现，很好地满足了那个年代的所有需求。</p><p><img src="'+d+'" alt=""></p><h4 id="如今最近的年代" tabindex="-1">如今最近的年代 <a class="header-anchor" href="#如今最近的年代" aria-label="Permalink to &quot;如今最近的年代&quot;">​</a></h4><p>2010 到 2020 十年之间，世界已经发生了翻天覆地的变化。</p><p>当面对一些数据量很多，数据变化很快的情况时，MySQL 等关系型数据库就不太够用了。</p><p>使用 MySQL 来存储一些比较大的文件，比如博客内容，比如图片。数据库的表很大的时候，效率就会变低了。</p><p>在一些大数据的 I/O 压力下，关系型数据库的表几乎没法更大（比如我现在突然想给表加 1 列），如果这时候可以有一种数据库来专门处理这种数据，MySQL 的压力就变得十分小。</p><p>目前一个基本的互联网项目的架构：</p><p><img src="'+r+`" alt=""></p><h3 id="为什么要用-nosql" tabindex="-1">为什么要用 NoSQL <a class="header-anchor" href="#为什么要用-nosql" aria-label="Permalink to &quot;为什么要用 NoSQL&quot;">​</a></h3><p>在 Web 应用发展的初期，那时关系型数据库受到了较为广泛的关注和应用，原因是因为那时候 Web 站点基本上访问和并发不高、交互也较少。</p><p>而在后来，随着访问量的提升，用户的个人信息、社交网络、地理位置信息、用户日志等数据都开始呈现爆发式增长。<strong>使用关系型数据库的 Web 站点多多少少都开始在性能上出现了一些瓶颈</strong>，而瓶颈的源头一般是在磁盘的 I/O 上。</p><p>而随着互联网技术的进一步发展，各种类型的应用层出不穷，这导致在当今云计算、大数据盛行的时代，对性能有了更多的需求，主要体现在以下四个方面：</p><ol><li>低延迟的读写速度：应用快速地反应能极大地提升用户的满意度</li><li>支撑海量的数据和流量：对于 <strong>搜索</strong> 这样大型应用而言，需要利用 PB 级别（1PB=1024TB）的数据和能应对百万级的流量</li><li>大规模集群的管理：系统管理员希望分布式的应用能更简单进行地部署和管理</li><li>庞大运营成本的考量：IT 部门希望在硬件成本、软件成本和人力成本能够有大幅度地降低</li></ol><p>为了克服这一问题，NoSQL 应运而生，它同时具备了 <strong>高性能、可扩展性强、高可用</strong> 等优点，受到广泛开发人员和仓库管理人员的青睐。</p><h3 id="什么是-nosql" tabindex="-1">什么是 NoSQL <a class="header-anchor" href="#什么是-nosql" aria-label="Permalink to &quot;什么是 NoSQL&quot;">​</a></h3><p>关系型数据库：表格 ，行 ，列。</p><p>NoSQL = Not Only SQL （不仅仅是 SQL）</p><p>泛指非关系型数据库，随着 Web2.0 互联网的诞生，传统的关系型数据库很难对付 Web2.0 时代，尤其是超大规模的高并发的社区，暴露出来了很多难以克服的问题。</p><p>而 NoSQL 在当今大数据环境下发展得十分迅速，Redis 是其中发展最快的，而且是我们当下必须要掌握的一个技术。</p><p>用户的个人信息，社交网络，地理位置等数据类型的存储不需要一个固定的格式（行，列），也不需多余的操作就可以 <strong>横向扩展</strong>。</p><p><code>Map&lt;String,Object&gt;</code> 就是一种非常典型的，使用键值对来控制的 NoSQL 的表现。</p><h3 id="nosql-的特点" tabindex="-1">NoSQL 的特点 <a class="header-anchor" href="#nosql-的特点" aria-label="Permalink to &quot;NoSQL 的特点&quot;">​</a></h3><ol><li><p>方便扩展、解耦（数据之间没有关系，很好扩展）</p></li><li><p>大数据量、高性能（Redis 在 1 秒内可以写入 8 万次，读取 11 万次。NoSQL 的缓存记录级，是一种细粒度的缓存，性能会比较高）</p></li><li><p>数据类型是多样型的（不需要事先设计数据库，随取随用。如果是数据量十分大的表，很多人是无法设计好的）</p></li><li><p>传统 RDBMS 和 NoSQL：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>传统的 RDBMS</span></span>
<span class="line"><span>- 结构化组织</span></span>
<span class="line"><span>- SQL</span></span>
<span class="line"><span>- 数据和关系都存在单独的表中 row col</span></span>
<span class="line"><span>- 操作操作，数据定义语言</span></span>
<span class="line"><span>- 严格的一致性</span></span>
<span class="line"><span>- 基础的事务</span></span>
<span class="line"><span>- .....</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NoSQL</span></span>
<span class="line"><span>- 不仅仅是数据</span></span>
<span class="line"><span>- 没有固定的查询语言</span></span>
<span class="line"><span>- 键值对存储，列存储，文档存储，图形数据库（社交关系）</span></span>
<span class="line"><span>- 最终一致性</span></span>
<span class="line"><span>- CAP 定理和 BASE 理论（异地多活）</span></span>
<span class="line"><span>- 高性能，高可用，高可扩</span></span>
<span class="line"><span>- ....</span></span></code></pre></div></li></ol><h3 id="拓展-3v-3高" tabindex="-1">拓展：3V + 3高 <a class="header-anchor" href="#拓展-3v-3高" aria-label="Permalink to &quot;拓展：3V + 3高&quot;">​</a></h3><p>大数据时代的 3V：主要是描述问题的。</p><ol><li><p>海量 Volume</p></li><li><p>多样 Variety</p></li><li><p>实时 Velocity</p></li></ol><p>大数据时代的 3高：主要是对程序的要求。</p><ol><li><p>高并发</p></li><li><p>高可扩</p></li><li><p>高性能</p></li></ol><p>真正在公司中的实践：NoSQL + RDBMS 结合使用才是最强的。</p><h3 id="nosql-的四大分类" tabindex="-1">NoSQL 的四大分类 <a class="header-anchor" href="#nosql-的四大分类" aria-label="Permalink to &quot;NoSQL 的四大分类&quot;">​</a></h3><p><strong>KV 键值对：</strong></p><ul><li><p>新浪：Redis</p></li><li><p>美团：Redis + Tair</p></li><li><p>阿里、百度：Redis + memecache</p></li></ul><p><strong>文档型数据库（采用 bson 格式，和 json 一样）：</strong></p><ul><li><p>MongoDB （必须要掌握）</p><ul><li>MongoDB 是一个基于分布式文件存储的数据库，由C++ 编写，主要用来处理大量的文档。</li><li>MongoDB 是一个介于关系型数据库和非关系型数据中中间的产品。</li><li>MongoDB 是非关系型数据库中功能最丰富、最像关系型数据库的一款产品。</li></ul></li><li><p>ConthDB</p></li></ul><p><strong>列存储数据库：</strong></p><ul><li><p>HBase</p></li><li><p>分布式文件系统</p></li></ul><p><strong>图关系数据库：</strong></p><p><img src="`+g+'" alt=""></p><ul><li><p>图关系数据库存的不是图形，而是关系，比如：朋友圈社交网络、广告推荐。</p></li><li><p>Neo4j</p></li><li><p>InfoGrid</p></li></ul><h3 id="nosql-四大类对比" tabindex="-1">NoSQL 四大类对比 <a class="header-anchor" href="#nosql-四大类对比" aria-label="Permalink to &quot;NoSQL 四大类对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th>分类</th><th>Examples举例</th><th>典型应用场景</th><th>数据模型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>键值（key-value）</strong></td><td>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td><td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td>Key 指向 Value 的键值对，通常用hash table来实现</td><td>查找速度快</td><td>数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td><strong>列存储数据库</strong></td><td>Cassandra, HBase, Riak</td><td>分布式的文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td><strong>文档型数据库</strong></td><td>CouchDB, MongoDb</td><td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td>Key-Value对应的键值对，Value为结构化数据</td><td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td><strong>图形(Graph)数据库</strong></td><td>Neo4J, InfoGrid, Infinite Graph</td><td>社交网络，推荐系统等。专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群</td></tr></tbody></table><h2 id="redis-入门" tabindex="-1">Redis 入门 <a class="header-anchor" href="#redis-入门" aria-label="Permalink to &quot;Redis 入门&quot;">​</a></h2><h3 id="redis-概述" tabindex="-1">Redis 概述 <a class="header-anchor" href="#redis-概述" aria-label="Permalink to &quot;Redis 概述&quot;">​</a></h3><p>Redis（<strong>R</strong>emote <strong>D</strong>ictionary <strong>S</strong>erver 即远程字典服务）是现在最受欢迎的 NoSQL 数据库之一。</p><p>Redis 是一个使用 ANSI C 编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的 <strong>键值对存储数据库</strong>，其具备如下特性：</p><ul><li>基于内存运行，性能高效</li><li>支持分布式，理论上可以无限扩展</li><li>key-value 存储系统</li><li>开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的API</li></ul><h3 id="相比于其他数据库类型-redis-具备的特点" tabindex="-1">相比于其他数据库类型，Redis 具备的特点 <a class="header-anchor" href="#相比于其他数据库类型-redis-具备的特点" aria-label="Permalink to &quot;相比于其他数据库类型，Redis 具备的特点&quot;">​</a></h3><ul><li><strong>异常快</strong>：Redis 非常快，每秒可执行大约 110000 次的设置（SET）操作，每秒大约可执行 81000 次的读取/获取（GET）操作。</li><li><strong>支持丰富的数据类型</strong>：Redis 支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等。这使得 Redis 很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。</li><li><strong>操作具有原子性</strong>：所有 Redis 操作都是原子操作，这确保如果两个客户端并发访问，Redis 服务器能接收更新的值。</li><li><strong>多实用工具</strong>：Redis 是一个多实用工具，可用于多种用例，如：缓存，消息队列（Redis 本地支持发布/订阅），应用程序中的任何短期数据，例如，Web 应用程序中的会话，网页命中计数等。</li></ul><h3 id="redis-的应用场景" tabindex="-1">Redis 的应用场景 <a class="header-anchor" href="#redis-的应用场景" aria-label="Permalink to &quot;Redis 的应用场景&quot;">​</a></h3><p><img src="'+o+`" alt=""></p><ul><li><p>缓存（“热点”数据：高频读、低频写）</p></li><li><p>计数器</p></li><li><p>消息队列</p></li><li><p>排行榜</p></li><li><p>社交网络</p></li><li><p>实时系统</p></li></ul><h3 id="redis-安装" tabindex="-1">Redis 安装 <a class="header-anchor" href="#redis-安装" aria-label="Permalink to &quot;Redis 安装&quot;">​</a></h3><ol><li>先去官网下载安装包 <strong>redis-7.0.11.tar.gz</strong>：<a href="https://redis.io" target="_blank" rel="noreferrer">https://redis.io</a></li><li>将安装包上传到 Linux 服务器</li><li>解压安装包，命令：<code>tar -zxvf redis-4.0.0.tar.gz -C /usr/local</code></li><li>安装 Redis 的依赖环境 gcc，命令：<code>yum install gcc-c++</code></li><li>进入Redis 的目录，进行编译，命令：<code>make</code></li><li>进入 Redis 的 src 目录，进行安装，命令：<code>make install</code></li></ol><p>安装后的重点文件：</p><ul><li>Redis 服务启动脚本：<code>/usr/local/redis-7.0.11/src/redis-server</code></li><li>Redis 客户端脚本：<code>/usr/local/redis-7.0.11/src/redis-cli</code></li><li>Redis 配置文件：<code>/usr/local/redis-7.0.11/redis.conf</code></li></ul><p>Linux 的软件安装目录是也是有讲究的，理解这一点，在对系统进行管理是有益的：</p><ul><li><code>/usr</code>：系统级的目录，可以理解为 <code>C:/Windows/</code>，<code>/usr/lib</code> 理解为 <code>C:/Windows/System32</code>。</li><li><code>/usr/local</code>：用户级的程序目录，可以理解为 <code>C:/Progrem Files/</code>，用户自己编译的软件默认会安装到这个目录下。</li><li><code>/opt</code>：用户级的程序目录，可以理解为 <code>D:/Software</code>，opt 有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接 <code>rm -rf</code> 掉即可。当硬盘容量不够时，也可将 /opt 单独挂载到其他磁盘上使用。</li></ul><p>源码放哪里？</p><ul><li><code>/usr/src</code>：系统级的源码目录</li><li><code>/usr/local/src</code>：用户级的源码目录</li></ul><h3 id="redis-服务启动与停止" tabindex="-1">Redis 服务启动与停止 <a class="header-anchor" href="#redis-服务启动与停止" aria-label="Permalink to &quot;Redis 服务启动与停止&quot;">​</a></h3><p>执行 Redis 服务启动脚本文件 <code>redis-server</code></p><p>通过启动日志可以看到，Redis 默认端口号为 6379。</p><p>Ctrl + C 可以停止 Redis 服务。</p><p>通过 <strong>redis-cli</strong> 可以连接到指定的 Redis 服务，取消连接的命令为 <strong>shutdown</strong>。</p><p>退出客户端可以输入 <strong>exit</strong> 或者 <strong>quit</strong> 命令。</p><h3 id="redis-配置文件" tabindex="-1">Redis 配置文件 <a class="header-anchor" href="#redis-配置文件" aria-label="Permalink to &quot;Redis 配置文件&quot;">​</a></h3><p>前面我们已经启动了 Redis 服务，但 Redis 在默认情况下启动后是在前台运行，而且客户端不需要密码就可以连接到 Redis 服务。</p><p>如果我们希望 Redis 服务启动后是在后台运行，同时希望客户端认证通过后才能连接到 Redis 服务，此时就需要修改 Redis 的配置文件：</p><p>Linux 系统中 Redis 配置文件：<code>REDIS_HOME/redis.conf</code></p><ul><li><p>设置 Redis 服务后台运行：</p><p>将配置文件中的 <code>daemonize</code> 配置项改为 yes，默认值为 no。</p><p>注意：Windows 版的 Redis 不支持后台运行。</p></li><li><p>设置 Redis 服务的密码：</p><p>将配置文件中的 <code># requirepass foobared</code> 配置项取消注释，默认为注释状态。<code>foobared</code> 为密码，可以根据情况自己指定。</p></li><li><p>设置允许客户端远程连接 Redis 服务：</p><p>Redis 服务默认只能客户端本地连接，不允许客户端远程连接。将配置文件中的 <code>bind 127.0.0.1</code> 配置项注释掉。</p></li></ul><p><strong>注意：</strong></p><ul><li>Redis 配置文件中 <code>#</code> 表示注释</li><li>Redis 配置文件中的配置项前面不能有空格，需要顶格写</li><li>daemonize：用来指定 Redis 是否要用守护线程的方式启动，设置成 yes 时，代表开启守护进程模式。在该模式下，Redis 会在后台运行</li><li>requirepass：设置 Redis 的连接密码</li><li>bind：如果指定了 bind，则说明只允许来自指定网卡的 Redis 请求。如果没有指定，就说明可以接受来自任意一个网卡的 Redis 请求。</li></ul><p>修改配置文件后需要重启 Redis 服务配置才能生效，并且启动 Redis 服务时需要显示的指定配置文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入 Redis 安装目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/redis-4.0.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动 Redis 服务，指定使用的配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./src/redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./redis.conf</span></span></code></pre></div><p>由于 Redis 配置文件中开启了认证校验，即客户端连接时需要提供密码，此时客户端连接方式变为：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./src/redis-cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127.0.0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6379</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123456</span></span></code></pre></div><p><strong>参数说明：</strong></p><ul><li><strong>-h</strong>：指定连接的 Redis 服务的 ip 地址</li><li><strong>-p</strong>：指定连接的 Redis 服务的端口号</li><li><strong>-a</strong>：指定连接的 Redis 服务的密码</li></ul><h3 id="redis-性能测试" tabindex="-1">Redis 性能测试 <a class="header-anchor" href="#redis-性能测试" aria-label="Permalink to &quot;Redis 性能测试&quot;">​</a></h3><p>Redis 性能测试是通过同时执行多个命令实现的。</p><h4 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h4><p>redis 性能测试的基本命令如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-benchmark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [option] [option value]</span></span></code></pre></div><p><strong>注意</strong>：该命令是在 redis 的目录下执行的，而不是 redis 客户端的内部指令。</p><h4 id="实例1" tabindex="-1">实例1 <a class="header-anchor" href="#实例1" aria-label="Permalink to &quot;实例1&quot;">​</a></h4><p>以下实例同时执行 10000 个请求来检测性能：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-benchmark</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -q</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PING_INLINE:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 141043.72</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PING_BULK:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 142857.14</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SET:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 141442.72</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 145348.83</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INCR:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 137362.64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LPUSH:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 145348.83</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LPOP:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 146198.83</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SADD:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 146198.83</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SPOP:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 149253.73</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LPUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (needed </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> benchmark</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LRANGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): 148588.42 requests per second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LRANGE_100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (first </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): 58411.21 requests per second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LRANGE_300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (first </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): 21195.42 requests per second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LRANGE_500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (first </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">450</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): 14539.11 requests per second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LRANGE_600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (first </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): 10504.20 requests per second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MSET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (10 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): 93283.58 requests per second</span></span></code></pre></div><p>redis 性能测试工具可选参数如下所示：</p><table tabindex="0"><thead><tr><th style="text-align:left;">选项</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>-h</strong></td><td style="text-align:left;">指定服务器主机名</td><td style="text-align:left;">127.0.0.1</td></tr><tr><td style="text-align:left;"><strong>-p</strong></td><td style="text-align:left;">指定服务器端口</td><td style="text-align:left;">6379</td></tr><tr><td style="text-align:left;"><strong>-s</strong></td><td style="text-align:left;">指定服务器 socket</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong>-c</strong></td><td style="text-align:left;">指定并发连接数</td><td style="text-align:left;">50</td></tr><tr><td style="text-align:left;"><strong>-n</strong></td><td style="text-align:left;">指定请求数</td><td style="text-align:left;">10000</td></tr><tr><td style="text-align:left;"><strong>-d</strong></td><td style="text-align:left;">以字节的形式指定 SET/GET 值的数据大小</td><td style="text-align:left;">3</td></tr><tr><td style="text-align:left;"><strong>-k</strong></td><td style="text-align:left;">1=keep alive 0=reconnect</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;"><strong>-r</strong></td><td style="text-align:left;">SET/GET/INCR 使用随机 key, SADD 使用随机值</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong>-P</strong></td><td style="text-align:left;">通过管道传输 <code>&lt;numreq&gt; </code> 请求</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;"><strong>-q</strong></td><td style="text-align:left;">强制退出 redis。仅显示 query/sec 值</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong>--csv</strong></td><td style="text-align:left;">以 CSV 格式输出</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong>-l</strong></td><td style="text-align:left;">生成循环，永久执行测试</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong>-t</strong></td><td style="text-align:left;">仅运行以逗号分隔的测试命令列表。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong>-I</strong></td><td style="text-align:left;">Idle 模式。仅打开 N 个 idle 连接并等待。</td><td style="text-align:left;"></td></tr></tbody></table><h4 id="实例2" tabindex="-1">实例2 <a class="header-anchor" href="#实例2" aria-label="Permalink to &quot;实例2&quot;">​</a></h4><p>以下实例我们使用了多个参数来测试 redis 性能：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-benchmark</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127.0.0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6379</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set,lpush</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SET:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 146198.83</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LPUSH:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 145560.41</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> second</span></span></code></pre></div><p>以上实例中主机为 127.0.0.1，端口号为 6379，执行的命令为 <code>set</code>，<code>lpush</code>，请求数为 10000，通过 -q 参数让结果只显示每秒执行的请求数。</p><h3 id="redis-基础知识" tabindex="-1">Redis 基础知识 <a class="header-anchor" href="#redis-基础知识" aria-label="Permalink to &quot;Redis 基础知识&quot;">​</a></h3><p>redis 默认有 16 个数据库，默认使用的是第 0 个。</p><p>可以使用 <code>select [index]</code> 进行数据库的切换。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 切换到 3 号数据库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[3]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dbsize</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 查看当前数据库的大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[3]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> leeyazhou</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 往 3 号数据库里添加数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[3]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dbsize</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[3]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[7]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DBSIZE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[7]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 尝试获取当前数据库里的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[7]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[3]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;leeyazhou&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[3]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keys</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 查看所有的索引</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[3]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">flushdb</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 清空当前数据库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[3]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keys</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">empty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379[9]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keys</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 0 号数据库里的一些默认值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key:__rand_int__&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mylist&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user-login-token:1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">flushall</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 清空全部数据库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keys</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">empty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>在 Redis4.0 之前，Redis 是单线程的：</strong></p><ul><li>Redis 是很快的，官方表示，Redis 是基于内存操作的，它的性能瓶颈是机器的内存和网络带宽，而不是 CPU。因为在你 CPU 还没达到瓶颈时你的内存可能就先满了、或者带宽达到瓶颈了。因此 CPU 不是主要原因，那么自然就采用单线程了。</li><li>更何况使用多线程还会面临一些额外的问题，比如共享资源的保护等等，对于一个 CPU 不是主要瓶颈的键值对数据库而言，采用单线程是非常合适的。</li><li>Redis 是 C 语言写的，官方提供的数据为 100000+ 的 QPS，完全不比同样是使用 key-value 的 Memecache 差。</li></ul><p><strong>Redis 在 4.0 之前使用单线程的模式是因为以下三个原因：</strong></p><ul><li>使用单线程模式的 Redis，其开发和维护会更简单，因为单线程模型方便开发和调试</li><li>即使使用单线程模型也能够并发地处理多客户端的请求，因为 Redis 内部使用了基于 epoll 的多路复用</li><li>对于 Redis 而言，主要的性能瓶颈是内存或者网络带宽，而并非 CPU</li></ul><p><strong>Redis 为什么单线程还这么快？</strong></p><ul><li><p>误区 1 ：高性能的服务器一定是多线程的。</p></li><li><p>误区 2 ：多线程（CPU 上下文会切换）一定比单线程效率高。</p></li></ul><p>速度上，CPU &gt; 内存 &gt; 硬盘 。</p><p><strong>核心：</strong></p><ul><li>基于内存操作：Redis 的所有数据都在内存中，因此所有的运算都是内存级别的，所以它的性能比较高</li><li>数据结构简单：Redis 的数据结构是为自身专门量身打造的，而这些数据结构的查找和操作的时间复杂度都是 O(1)</li><li>多路复用和非阻塞 I/O：Redis 使用 I/O 多路复用功能来监听多个 socket 连接客户端，这样就可以使用一个线程来处理多个情况，从而减少线程切换带来的开销，同时也避免了 I/O 阻塞操作，从而大大地提高了 Redis 的性能</li><li>避免上下文切换：因为是单线程模型，因此就避免了不必要的上下文切换和多线程竞争，这就省去了 <strong>多线程切换</strong> 带来的时间和性能上的开销，而且单线程不会导致死锁的问题发生</li></ul><h2 id="五大常用数据类型" tabindex="-1">五大常用数据类型 <a class="header-anchor" href="#五大常用数据类型" aria-label="Permalink to &quot;五大常用数据类型&quot;">​</a></h2><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作 <strong>数据库</strong>、<strong>缓存</strong> 和 <strong>消息中间件 MQ</strong>。 它支持多种类型的数据结构，如 <strong>字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询</strong>。</p><p><img src="`+E+`" alt="image-20210927111819871"></p><h3 id="redis-key" tabindex="-1">Redis-key <a class="header-anchor" href="#redis-key" aria-label="Permalink to &quot;Redis-key&quot;">​</a></h3><p>在 Redis 中无论什么数据类型，在数据库中都是以 key-value 形式保存，通过进行对 Redis-key 的操作，来完成对数据库中数据的操作。</p><p>因此 Redis 中存在一些通用命令，主要是针对 key 进行操作：</p><ul><li><p><code>KEYS pattern</code> 查找所有符合给定模式（pattern）的 key</p></li><li><p><code>EXISTS key</code> 检查给定 key 是否存在</p></li><li><p><code>TYPE key</code> 返回 key 所储存的值的类型</p></li><li><p><code>TTL key</code> 返回给定 key 的剩余生存时间（TTL，time to live），以秒为单位</p></li><li><p><code>DEL key</code> 该命令用于在 key 存在是删除 key</p></li><li><p><code>MOVE key db</code>：将键值对移动到指定数据库 db</p></li><li><p><code>EXPIRE key second</code>：设置键值对的过期时间</p></li></ul><p>关于 <code>TTL key</code> 命令：</p><ul><li>Redis 的 key，通过 TTL 命令返回 key 的过期时间，一般来说有 3 种： <ul><li>若 key 没有设置过期时间，则返回 -1</li><li>若 key 有设置过期时间，但 key 已经过期，则返回 -2</li><li>若 key 有设置过期时间，且 key 还没有过期，则返回 key 的正常剩余时间</li></ul></li></ul><p>关于重命名 <code>RENAME</code> 和 <code>RENAMENX</code>：</p><ul><li><code>RENAME key newkey</code>：修改 key 的名称</li><li><code>RENAMENX key newkey</code>：仅当 newkey 不存在时，将 key 改名为 newkey</li></ul><h3 id="字符串类型-string" tabindex="-1">字符串类型（String） <a class="header-anchor" href="#字符串类型-string" aria-label="Permalink to &quot;字符串类型（String）&quot;">​</a></h3><p>它是一个二进制安全的字符串，意味着它不仅能够存储字符串、还能存储图片、视频等多种类型，最大长度支持 512M。</p><p>常用的 Redis 字符串命令：</p><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><strong><code>SET key value</code></strong></td><td style="text-align:left;"><strong>设置指定 key 的值</strong></td></tr><tr><td style="text-align:left;"><strong><code>GET key</code></strong></td><td style="text-align:left;"><strong>获取指定 key 的值</strong></td></tr><tr><td style="text-align:left;"><code>GETRANGE key start end</code></td><td style="text-align:left;">返回 key 中字符串值的子字符</td></tr><tr><td style="text-align:left;"><code>GETSET key value</code></td><td style="text-align:left;">将给定 key 的值设为 value ，并返回 key 的旧值（old value）</td></tr><tr><td style="text-align:left;"><code>GETBIT key offset</code></td><td style="text-align:left;">对 key 所储存的字符串值，获取指定偏移量上的位（bit）</td></tr><tr><td style="text-align:left;"><code>MGET key1 [key2..]</code></td><td style="text-align:left;">获取所有（一个或多个）给定 key 的值</td></tr><tr><td style="text-align:left;"><code>SETBIT key offset value</code></td><td style="text-align:left;">对 key 所储存的字符串值，设置或清除指定偏移量上的位（bit）</td></tr><tr><td style="text-align:left;"><strong><code>SETEX key seconds value</code></strong></td><td style="text-align:left;"><strong>将值 value 关联到 key ，并将 key 的过期时间设为 seconds（以秒为单位）</strong></td></tr><tr><td style="text-align:left;"><strong><code>SETNX key value</code></strong></td><td style="text-align:left;"><strong>只有在 key 不存在时设置 key 的值</strong></td></tr><tr><td style="text-align:left;"><code>SETRANGE key offset value</code></td><td style="text-align:left;">用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始</td></tr><tr><td style="text-align:left;"><code>STRLEN key</code></td><td style="text-align:left;">返回 key 所储存的字符串值的长度</td></tr><tr><td style="text-align:left;"><code>MSET key value [key value ...]</code></td><td style="text-align:left;">同时设置一个或多个 key-value 对</td></tr><tr><td style="text-align:left;"><code>MSETNX key value [key value ...]</code></td><td style="text-align:left;">同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</td></tr><tr><td style="text-align:left;"><code>PSETEX key milliseconds value</code></td><td style="text-align:left;">这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位</td></tr><tr><td style="text-align:left;"><code>INCR key</code></td><td style="text-align:left;">将 key 中储存的数字值增一</td></tr><tr><td style="text-align:left;"><code>INCRBY key increment</code></td><td style="text-align:left;">将 key 所储存的值加上给定的增量值（increment）</td></tr><tr><td style="text-align:left;"><code>INCRBYFLOAT key increment</code></td><td style="text-align:left;">将 key 所储存的值加上给定的浮点增量值（increment）</td></tr><tr><td style="text-align:left;"><code>DECR key</code></td><td style="text-align:left;">将 key 中储存的数字值减一</td></tr><tr><td style="text-align:left;"><code>DECRBY key decrement</code></td><td style="text-align:left;">key 所储存的值减去给定的减量值（decrement）</td></tr><tr><td style="text-align:left;"><code>APPEND key value</code></td><td style="text-align:left;">如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾</td></tr></tbody></table><p>应用场景：</p><ol><li><p><strong>缓存</strong>：经典使用场景，把常用信息，字符串，图片或者视频等信息放到 redis 中，mysql 做持久化层，redis 作为缓存层，可以降低 mysql 的读写压力。</p></li><li><p><strong>计数器</strong>：redis 是单线程模型，一个命令执行完才会执行下一个，同时数据可以一步落地到其他的数据源。</p></li><li><p><strong>session</strong>：常见方案 spring session + redis 实现 <strong>session 共享</strong>。</p></li></ol><h3 id="哈希类型-hash" tabindex="-1">哈希类型（Hash） <a class="header-anchor" href="#哈希类型-hash" aria-label="Permalink to &quot;哈希类型（Hash）&quot;">​</a></h3><p>该类型是由 field 和关联的 value 组成的 map。其中，field 和 value 都是 <strong>字符串类型</strong> 的。</p><p>Hash 的操作命令如下：</p><table tabindex="0"><thead><tr><th>命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td><strong><code>HDEL key field1 [field2]</code></strong></td><td style="text-align:left;"><strong>删除一个或多个哈希表字段</strong></td></tr><tr><td><code>HEXISTS key field</code></td><td style="text-align:left;">查看哈希表 key 中，指定的字段是否存在</td></tr><tr><td><strong><code>HGET key field</code></strong></td><td style="text-align:left;"><strong>获取存储在哈希表中指定字段的值</strong></td></tr><tr><td><strong><code>HGETALL key</code></strong></td><td style="text-align:left;"><strong>获取在哈希表中指定 key 的所有字段和值</strong></td></tr><tr><td><code>HINCRBY key field increment</code></td><td style="text-align:left;">为哈希表 key 中的指定字段的整数值加上增量 increment</td></tr><tr><td><code>HINCRBYFLOAT key field increment</code></td><td style="text-align:left;">为哈希表 key 中的指定字段的浮点数值加上增量 increment</td></tr><tr><td><strong><code>HKEYS key</code></strong></td><td style="text-align:left;"><strong>获取所有哈希表中的字段</strong></td></tr><tr><td><code>HLEN key</code></td><td style="text-align:left;">获取哈希表中字段的数量</td></tr><tr><td><code>HMGET key field1 [field2]</code></td><td style="text-align:left;">获取所有给定字段的值</td></tr><tr><td><code>HMSET key field1 value1 [field2 value2]</code></td><td style="text-align:left;">同时将多个 field-value (域-值)对设置到哈希表 key 中</td></tr><tr><td><strong><code>HSET key field value</code></strong></td><td style="text-align:left;"><strong>将哈希表 key 中的字段 field 的值设为 value</strong></td></tr><tr><td><code>HSETNX key field value</code></td><td style="text-align:left;">只有在字段 field 不存在时，设置哈希表字段的值</td></tr><tr><td><strong><code>HVALS key</code></strong></td><td style="text-align:left;"><strong>获取哈希表中所有值</strong></td></tr><tr><td><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code></td><td style="text-align:left;">迭代哈希表中的键值对</td></tr></tbody></table><p>应用场景：</p><ol><li><strong>缓存</strong>：能更直观，并且相比 String 更节省空间，便于维护缓存信息，如用户信息，视频信息等。</li></ol><h3 id="列表类型-list" tabindex="-1">列表类型（List） <a class="header-anchor" href="#列表类型-list" aria-label="Permalink to &quot;列表类型（List）&quot;">​</a></h3><p>该类型是一个插入顺序排序的字符串元素集合，基于 <strong>双链表</strong> 实现。</p><p>你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>一个列表最多可以包含 $$2^{32} - 1$$ 个元素 （4294967295，每个列表超过40亿个元素）。</p><p>List 的操作命令如下：</p><table tabindex="0"><thead><tr><th>命令</th><th style="text-align:left;">命令及描述</th></tr></thead><tbody><tr><td><code>BLPOP key1 [key2] timeout</code></td><td style="text-align:left;">移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td></tr><tr><td><strong><code>BRPOP key1 [key2] timeout]</code></strong></td><td style="text-align:left;"><strong>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</strong></td></tr><tr><td><code>BRPOPLPUSH source destination timeout</code></td><td style="text-align:left;">从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td></tr><tr><td><code>LINDEX key index</code></td><td style="text-align:left;">通过索引获取列表中的元素</td></tr><tr><td>\`LINSERT key BEFORE</td><td style="text-align:left;">AFTER pivot value\`</td></tr><tr><td><strong><code>LLEN key</code></strong></td><td style="text-align:left;"><strong>获取列表长度</strong></td></tr><tr><td><code>LPOP key</code></td><td style="text-align:left;">移出并获取列表的第一个元素</td></tr><tr><td><strong><code>LPUSH key value1 [value2]</code></strong></td><td style="text-align:left;"><strong>将一个或多个值插入到列表头部</strong></td></tr><tr><td><code>LPUSHX key value</code></td><td style="text-align:left;">将一个值插入到已存在的列表头部</td></tr><tr><td><strong><code>LRANGE key start stop</code></strong></td><td style="text-align:left;"><strong>获取列表指定范围内的元素</strong></td></tr><tr><td><code>LREM key count value</code></td><td style="text-align:left;">移除列表元素</td></tr><tr><td><code>LSET key index value</code></td><td style="text-align:left;">通过索引设置列表元素的值</td></tr><tr><td><code>LTRIM key start stop</code></td><td style="text-align:left;">对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除</td></tr><tr><td><strong><code>RPOP key</code></strong></td><td style="text-align:left;"><strong>移除列表的最后一个元素，返回值为移除的元素</strong></td></tr><tr><td><code>RPOPLPUSH source destination</code></td><td style="text-align:left;">移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td><code>RPUSH key value1 [value2]</code></td><td style="text-align:left;">在列表中添加一个或多个值</td></tr><tr><td><code>RPUSHX key value</code></td><td style="text-align:left;">为已存在的列表添加值</td></tr></tbody></table><p>应用场景：</p><ol><li>timeline：例如微博的时间轴，有人发布微博，用 lpush 加入时间轴，展示新的列表信息。</li><li>消息队列</li></ol><h3 id="集合类型-set" tabindex="-1">集合类型（Set） <a class="header-anchor" href="#集合类型-set" aria-label="Permalink to &quot;集合类型（Set）&quot;">​</a></h3><p>Set 类型是一种无顺序集合, 它和 List 类型最大的区别是：<strong>集合中的元素没有顺序，且元素是唯一的</strong>。</p><p>Set 类型的底层是通过哈希表实现的，其操作命令为：</p><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;"><strong><code>SADD key member1 [member2]</code></strong></td><td><strong>向集合添加一个或多个成员</strong></td></tr><tr><td style="text-align:left;"><strong><code>SCARD key</code></strong></td><td><strong>获取集合的成员数</strong></td></tr><tr><td style="text-align:left;"><strong><code>SDIFF key1 [key2]</code></strong></td><td><strong>返回第一个集合与其他集合之间的差集</strong></td></tr><tr><td style="text-align:left;"><code>SDIFFSTORE destination key1 [key2]</code></td><td>返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td style="text-align:left;"><strong><code>SINTER key1 [key2]</code></strong></td><td><strong>返回给定所有集合的交集</strong></td></tr><tr><td style="text-align:left;"><code>SINTERSTORE destination key1 [key2]</code></td><td>返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td style="text-align:left;"><code>SISMEMBER key member</code></td><td>判断 member 元素是否是集合 key 的成员</td></tr><tr><td style="text-align:left;"><strong><code>SMEMBERS key</code></strong></td><td><strong>返回集合中的所有成员</strong></td></tr><tr><td style="text-align:left;"><code>SMOVE source destination member</code></td><td>将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td style="text-align:left;"><code>SPOP key</code></td><td>移除并返回集合中的一个随机元素</td></tr><tr><td style="text-align:left;"><code>SRANDMEMBER key [count]</code></td><td>返回集合中一个或多个随机数</td></tr><tr><td style="text-align:left;"><strong><code>SREM key member1 [member2]</code></strong></td><td><strong>移除集合中一个或多个成员</strong></td></tr><tr><td style="text-align:left;"><strong><code>SUNION key1 [key2]</code></strong></td><td><strong>返回所有给定集合的并集</strong></td></tr><tr><td style="text-align:left;"><code>SUNIONSTORE destination key1 [key2]</code></td><td>所有给定集合的并集存储在 destination 集合中</td></tr><tr><td style="text-align:left;"><code>SSCAN key cursor [MATCH pattern\\] [COUNT count]</code></td><td>迭代集合中的元素</td></tr></tbody></table><p>应用场景：在某些场景，如社交场景中，通过交集、并集和差集运算，通过 Set 类型可以非常方便地查找共同好友、共同关注和共同偏好等社交关系。</p><h3 id="顺序集合类型-sorted-set" tabindex="-1">顺序集合类型（sorted Set） <a class="header-anchor" href="#顺序集合类型-sorted-set" aria-label="Permalink to &quot;顺序集合类型（sorted Set）&quot;">​</a></h3><p>ZSet 是一种有序集合类型，每个元素都会关联一个 double 类型的分数权值，通过这个权值来为集合中的成员进行从小到大的排序。</p><p>有序集合的成员是唯一的，但分数是可以重复的。</p><p>与 Set 类型一样，其底层也是通过哈希表实现的。</p><p>ZSet 命令：</p><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;"><strong><code>ZADD key score1 member1 [score2 member2]</code></strong></td><td><strong>向有序集合添加一个或多个成员，或者更新已存在成员的分数</strong></td></tr><tr><td style="text-align:left;"><code>ZCARD key</code></td><td>获取有序集合的成员数</td></tr><tr><td style="text-align:left;"><code>ZCOUNT key min max</code></td><td>计算在有序集合中指定区间分数的成员数</td></tr><tr><td style="text-align:left;"><strong><code>ZINCRBY key increment member</code></strong></td><td><strong>有序集合中对指定成员的分数加上增量 increment</strong></td></tr><tr><td style="text-align:left;"><code>ZINTERSTORE destination numkeys key [key ...]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中</td></tr><tr><td style="text-align:left;"><code>ZLEXCOUNT key min max</code></td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td style="text-align:left;"><strong><code>ZRANGE key start stop [WITHSCORES]</code></strong></td><td><strong>通过索引区间返回有序集合指定区间内的成员</strong></td></tr><tr><td style="text-align:left;"><code>ZRANGEBYLEX key min max [LIMIT offset count]</code></td><td>通过字典区间返回有序集合的成员</td></tr><tr><td style="text-align:left;"><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</code></td><td>通过分数返回有序集合指定区间内的成员</td></tr><tr><td style="text-align:left;"><code>ZRANK key member</code></td><td>返回有序集合中指定成员的索引</td></tr><tr><td style="text-align:left;"><strong><code>ZREM key member [member ...]</code></strong></td><td><strong>移除有序集合中的一个或多个成员</strong></td></tr><tr><td style="text-align:left;"><code>ZREMRANGEBYLEX key min max</code></td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td style="text-align:left;"><code>ZREMRANGEBYRANK key start stop</code></td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td style="text-align:left;"><code>ZREMRANGEBYSCORE key min max</code></td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td style="text-align:left;"><code>ZREVRANGE key start stop [WITHSCORES]</code></td><td>返回有序集中指定区间内的成员，通过索引，分数从高到低</td></tr><tr><td style="text-align:left;"><code>ZREVRANGEBYSCORE key max min [WITHSCORES]</code></td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td style="text-align:left;"><code>ZREVRANK key member</code></td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td style="text-align:left;"><code>ZSCORE key member</code></td><td>返回有序集中，成员的分数值</td></tr><tr><td style="text-align:left;"><code>ZUNIONSTORE destination numkeys key [key ...]</code></td><td>计算给定的一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td style="text-align:left;"><code>ZSCAN key cursor [MATCH pattern] [COUNT count]</code></td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><p>应用场景：</p><ol><li>set 排序、存储班级成绩表、工资表排序</li><li>普通消息、重要消息，带权重进行判断</li><li>排行榜应用实现，取 Top N 测试</li></ol><h2 id="三种特殊数据类型" tabindex="-1">三种特殊数据类型 <a class="header-anchor" href="#三种特殊数据类型" aria-label="Permalink to &quot;三种特殊数据类型&quot;">​</a></h2><h3 id="geospatial" tabindex="-1">geospatial <a class="header-anchor" href="#geospatial" aria-label="Permalink to &quot;geospatial&quot;">​</a></h3><p><strong>应用</strong>：存储位置信息，可以很方便计算和管理位置信息</p><p>主要的命令有：geoadd、geopos、geodist、geohash、georadius、georadiusbymember</p><p><strong>geoadd</strong>：添加一个或多个位置到一个 key 中</p><p>语法：<code>geoadd key longitude latitude member [longitude latitude member ...]</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">geoadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 116.40</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 39.9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 北京</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 添加一个位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">geoadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 121.47</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31.23</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 上海</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 120.15</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30.28</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 杭州</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 113.27</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23.13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 广东</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 添加多个位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">zrange</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 查看用zrange，因为geo本质是一个有序集合</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\\xe5\\xb9\\xbf\\xe4\\xb8\\x9c&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\\xe6\\x9d\\xad\\xe5\\xb7\\x9e&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\\xe4\\xb8\\x8a\\xe6\\xb5\\xb7&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\\xe5\\x8c\\x97\\xe4\\xba\\xac&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM_0_2_centos bin]# redis-cli -h localhost -p 6379 --raw    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --raw 解决中文乱码问题</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">zrange</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">广东</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杭州</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">上海</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">北京</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">zrange</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> withscores</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">广东</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4046533759716104</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杭州</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4054134257390783</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">上海</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4054803462927619</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">北京</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4069885360207904</span></span></code></pre></div><p><strong>geopos</strong>：查看某个key成员的地理位置</p><p>语法：<code>geopos key member [member ...]</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">geopos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 北京</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">116.39999896287918091</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">39.90000009167092543</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">geopos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 北京</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 上海</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">116.39999896287918091</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">39.90000009167092543</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">121.47000163793563843</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">31.22999903975783553</span></span></code></pre></div><p><strong>geodist</strong>：计算两点之间的距离，可以选择计算单位，默认单位是m</p><p>语法：<code>geodist key member1 member2 [m|km|ft|mi]</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">geodist</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 北京</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 上海</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1067378.7564</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">geodist</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 北京</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 上海</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> m</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1067378.7564</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">geodist</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 北京</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 上海</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> km</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1067.3788</span></span></code></pre></div><p><strong>geohash</strong>：获取元素的 hash 值</p>`,188),a("p",null,[t("geohash 可以获取元素的经纬度编码字符串，上面已经提到，它是 base32 编码。 你可以使用这个编码值去 "),a("a",{href:"https://links.jianshu.com/go?to=http%3A%2F%2Fgeohash.org%2F%24",hash:"",target:"_blank",rel:"noreferrer"},"http://geohash.org/$"),t("中进行直接定位，它是 geohash 的标准编码值.")],-1),i(`<p><code>语法：geohash key member [member ...]</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">geohash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 上海</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wtw3sj5zbj0</span></span></code></pre></div><p><strong>georadius</strong>：给定一个坐标点，查找附近指定距离范围内的元素，相当于附近的人</p><p>语法：<code>georadius key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</code></p><p>先查找安徽的坐标：117.25 ， 31.83</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">georadius</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 117.25</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31.83</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> km</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 查看方圆500km内的城市</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杭州</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">上海</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">georadius</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 117.25</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31.83</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> km</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> withcoord</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # withcoord  结果带上坐标</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杭州</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">120.15000075101852417</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">30.2800007575645509</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">上海</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">121.47000163793563843</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">31.22999903975783553</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">georadius</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 117.25</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31.83</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> km</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> withdist</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # withdist 带上距离</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杭州</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">325.6740</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">上海</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">405.5792</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">georadius</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 117.25</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31.83</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> km</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> withdist</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> asc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 由近到远取一个</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杭州</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">325.6740</span></span></code></pre></div><p><strong>georadiusbymember</strong>：与georadius功能相同，不同的是georadiusbymember的中心点是geo中的成员而不是经纬度</p><p>语法：<code>georadiusbymember key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">georadiusbymember</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 上海</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> km</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> withdist</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杭州</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">164.5694</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">上海</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0.0000</span></span></code></pre></div><p><strong>zrem</strong>：应为geo的本质是zset，所以删除也是用zrem</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">zrange</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杭州</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">上海</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">北京</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">zrem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 北京</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">zrange</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> China:city</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">杭州</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">上海</span></span></code></pre></div><h3 id="bitmaps" tabindex="-1">bitmaps <a class="header-anchor" href="#bitmaps" aria-label="Permalink to &quot;bitmaps&quot;">​</a></h3><p>Redis 提供的 Bitmaps 这个“数据结构”可以实现对位的操作。Bitmaps本身不是一种数据结构，实际上就是字符串，但是它可以对字符串的位进行操作。</p><p>可以把 Bitmaps 想象成一个以位为单位数组，数组中的每个单元只能存0或者1，数组的下标在 bitmaps 中叫做偏移量。单个 bitmaps 的最大长度是512MB，即$2^{32}$个比特位。</p><p><strong>setbit</strong>：设置值</p><p>语法：<code>setbit key offset value</code></p><p>理解：key是数组，offset是数组的下标，value是这个下标位置的状态值（0或1）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 支持覆盖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span></code></pre></div><p><strong>getbit</strong>：获取key中一个下标的状态</p><p>语法：<code>getbit key offset</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">getbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span></code></pre></div><p><strong>bitcount</strong>：统计一个key中状态为1的下标数量</p><p>语法：<code>bitcount key [start end]</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bitcount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 默认统计全部</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bitcount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 统计指定下标范围</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span></span></code></pre></div><p><strong>bitop</strong>：用来做bitmaps之间的运算</p><p>语法：<code>bitop operation destkey key [key ...]</code></p><p>operation：表明操作类型，有四个可选值</p><ul><li>and：与</li><li>or：或</li><li>not：非</li><li>xor：异或</li></ul><p>destkey：目标key，运算的结果会存到这里</p><p>key [key ...] 被运算的一个或多个bitmaps的key</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">setbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bitop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and-result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 获取sign和sign2的交集存入and-result</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">getbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and-result</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bitop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or-result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 获取sign和sign2的并集存入or-result</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">getbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or-result</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">getbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or-result</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bitop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not-result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 将sign2中是0的值存入not-result</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">getbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not-result</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">getbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not-result</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bitop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xor-result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 将sign和sign2的异或值存入xor-result</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">getbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xor-result</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">getbit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xor-result</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span></code></pre></div><p><strong>bitpos</strong>：计算 Bitmaps 中第一个值为 targetBit 的偏移量：</p><p>语法：<code>bitpos key bit [start] [end]</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bitpos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # sing中第一个状态为1的下标</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bitpos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sign</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # sing中第一个状态为0的下标</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span></span></code></pre></div><p>小结：我们在生活中，或编程中，只要只有两个标志位（0 1）我们都可以考虑使用 bitmaps 来进行操作，这 样的话，十分方便，还有就是能够极大的节约内存！</p><h3 id="hyperloglogs" tabindex="-1">hyperloglogs <a class="header-anchor" href="#hyperloglogs" aria-label="Permalink to &quot;hyperloglogs&quot;">​</a></h3><p>hyperloglog 是用来做 <strong>基数统计</strong> 的，其优点是：输入的提及无论多么大，那 hyperloglog 使用的空间总是固定的12KB ，利用12KB，它可以计算 $2^{64}$ 个不同元素的基数！ 非常节省空间！</p><p>应用例子：网页统计 UV （浏览用户数量，同一天同一个ip多次访问算一次访问，目的是计数，而不是保存用户）</p><p><strong>pfadd</strong>：添加元素</p><p><strong>pfcount</strong>：统计基数</p><p><strong>pfmerge</strong>: 合并多个数据集</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pfadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mykey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> e</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pfadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mykey2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pfcount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mykey</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pfcount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mykey2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pfcount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mykey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mykey2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">7</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pfmerge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mergekey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  mykey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mykey2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 合并mykey和mykey2写入到mergekey</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pfcount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mergekey</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">7</span></span></code></pre></div><p>在需要对大数据进行不重复数统计时推荐用hyperloglogs，但是如果需要精确统计的话就不要使用，因为hyperloglogs存在1%左右的误差。</p><h2 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h2><h3 id="redis-的事务是什么" tabindex="-1">Redis 的事务是什么 <a class="header-anchor" href="#redis-的事务是什么" aria-label="Permalink to &quot;Redis 的事务是什么&quot;">​</a></h3><ul><li><p>可以一次执行多个命令，本质是一组命令的集合。</p></li><li><p>一个事务中的所有命令都会被序列化，可以按顺序串行化的执行，而不会被其他命令插入。</p></li></ul><h3 id="redis-的事务能干什么" tabindex="-1">Redis 的事务能干什么 <a class="header-anchor" href="#redis-的事务能干什么" aria-label="Permalink to &quot;Redis 的事务能干什么&quot;">​</a></h3><ul><li>一个队列中，<strong>一次性</strong>、<strong>顺序性</strong>、<strong>排他性</strong> 的执行一系列命令（要和 pipeline 区分开）</li></ul><h3 id="redis-的事务没有隔离级别的概念" tabindex="-1">Redis 的事务没有隔离级别的概念 <a class="header-anchor" href="#redis-的事务没有隔离级别的概念" aria-label="Permalink to &quot;Redis 的事务没有隔离级别的概念&quot;">​</a></h3><ul><li>所有的命令在事务中，并没有直接被执行，只有发起执行命令的时候才会执行。</li></ul><h3 id="redis-的事务有以下三个重要的保证" tabindex="-1">Redis 的事务有以下三个重要的保证 <a class="header-anchor" href="#redis-的事务有以下三个重要的保证" aria-label="Permalink to &quot;Redis 的事务有以下三个重要的保证&quot;">​</a></h3><ul><li>批量操作在发送 <code>EXEC</code> 命令前被放入队列缓存。</li><li>收到 <code>EXEC</code> 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ul><h3 id="一个事务从开始到执行会经历以下三个阶段" tabindex="-1">一个事务从开始到执行会经历以下三个阶段 <a class="header-anchor" href="#一个事务从开始到执行会经历以下三个阶段" aria-label="Permalink to &quot;一个事务从开始到执行会经历以下三个阶段&quot;">​</a></h3><ul><li>开始事务（<strong>MULTI</strong>）</li><li>命令入队</li><li>执行事务（<strong>EXEC</strong>）</li></ul><p>实例：</p><p>先以 <strong>MULTI</strong> 开始一个事务， 然后将多个命令入队到事务中， 最后由 <strong>EXEC</strong> 命令触发事务， 一并执行事务中的所有命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MULTI</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> book-name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mastering C++ in 21 days&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QUEUED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> book-name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QUEUED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SADD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C++&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Programming&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mastering Series&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QUEUED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SMEMBERS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QUEUED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EXEC</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mastering C++ in 21 days&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) 1) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mastering Series&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C++&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Programming&quot;</span></span></code></pre></div><p><strong>单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。</strong></p><p>事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，<strong>中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</strong></p><p>比如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 127.0.0.1:700</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> multi</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 127.0.0.1:700</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aaa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QUEUED</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 127.0.0.1:700</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bbb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QUEUED</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 127.0.0.1:700</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ccc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QUEUED</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 127.0.0.1:700</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) OK</span></span></code></pre></div><p>如果在 <code>set b bbb</code> 处失败，<code>set a</code> 已成功不会回滚，<code>set c</code> 还会继续执行。</p><h3 id="redis-事务命令" tabindex="-1">Redis 事务命令 <a class="header-anchor" href="#redis-事务命令" aria-label="Permalink to &quot;Redis 事务命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>DISCARD</code></td><td>取消事务，放弃执行事务块内的所有命令</td></tr><tr><td style="text-align:left;"><code>EXEC</code></td><td>执行所有事务块内的命令</td></tr><tr><td style="text-align:left;"><code>MULTI</code></td><td>标记一个事务块的开始</td></tr><tr><td style="text-align:left;"><code>UNWATCH</code></td><td>取消 WATCH 命令对所有 key 的监视</td></tr><tr><td style="text-align:left;"><code>WATCH key [key ...]</code></td><td>监视一个（或多个） key ，如果在事务执行之前这个（或这些） key 被其他命令所改动，那么事务将被打断</td></tr></tbody></table><p>使用 <code>watch</code> 可以当做 redis 的 <strong>乐观锁</strong> 操作。</p><h2 id="jedis" tabindex="-1">Jedis <a class="header-anchor" href="#jedis" aria-label="Permalink to &quot;Jedis&quot;">​</a></h2><p>在 Java 程序中操作 Redis 需要使用 Redis 的 Java 客户端，就如同我们使用 JDBC 操作 MySQL 数据库一样。</p><p>Redis 的 Java 客户端很多，官方推荐的有三种：</p><ul><li>Jedis</li><li>Lettuce</li><li>Redisson</li></ul><p><strong>1 、导入对应的依赖</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--Jedis--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;redis.clients&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;jedis&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;3.3.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--fastjson--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.alibaba&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;fastjson&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1.2.73&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>2 、编码测试：</strong></p><ul><li><p>获取连接，连接数据库</p></li><li><p>执行操作命令</p></li><li><p>关闭连接</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis.clients.jedis.Jedis;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestPing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //连接本地的 Redis 服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Jedis jedis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Jedis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果 Redis 服务设置来密码，需要下面这行，没有就不需要</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // jedis.auth(&quot;123456&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;连接成功&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //查看服务是否运行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;服务正在运行: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jedis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>3、运行结果：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>连接成功</span></span>
<span class="line"><span>服务正在运行: PONG</span></span></code></pre></div><p><strong>4、常用的 API：</strong></p><p>所有的 api 命令，就是我们对应的上面学习的 Redis 指令，一个都没有变化。</p><p><strong>5、Jedis 事务：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestTX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Jedis jedis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Jedis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        JSONObject jsonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JSONObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jsonObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jsonObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;leeyazhou&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 开启事务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Transaction multi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jedis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">multi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // jedis.watch(result)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            multi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            multi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 执行事务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            multi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 放弃事务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            multi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">discard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 关闭连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jedis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jedis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            jedis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="springboot-整合-redis" tabindex="-1">SpringBoot 整合 Redis <a class="header-anchor" href="#springboot-整合-redis" aria-label="Permalink to &quot;SpringBoot 整合 Redis&quot;">​</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>Spring Data Redis 是 Spring 的一部分，提供了在 Spring 应用中通过简单的配置就可以访问 Redis 服务，对 Redis 底层开发包进行了高度封装。在 Spring 项目中，可以使用 Spring Data Redis 来简化 Redis 操作。</p><p>SpringBoot 操作数据：<code>spring-data jpa jdbc mongodb redis</code>。</p><p>SpringData 是和 SpringBoot 齐名的项目。</p><p>注意，在 SpringBoot2.x 之后，原来使用的 Jedis 被替换为了 lettuce</p><ul><li>jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全，就要使用 jedis pool 连接池， 更像 <strong>BIO 模式</strong></li><li>lettuce : 采用 netty，实例可以再多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据了，更像 <strong>NIO 模式</strong></li></ul><p>我们在学习 SpringBoot 自动配置的原理时，整合一个组件并进行配置一定会有一个自动配置类 <code>xxxAutoConfiguration</code>，并且在 <code>spring.factories</code> 中也一定能找到这个类的完全限定名。Redis 也不例外。 <img src="`+y+'" alt="在这里插入图片描述"> 那么就一定还存在一个 <code>RedisProperties</code> 类 <img src="'+F+'" alt="在这里插入图片描述"></p><p>之前我们说 <code>SpringBoot2.x</code> 后默认使用 Lettuce 来替换 Jedis，现在我们就能来验证了。</p><p>先看 Jedis: <img src="'+c+'" alt="在这里插入图片描述"></p><p><code>@ConditionalOnClass</code> 注解中有两个类是默认不存在的，所以 Jedis 是无法生效的</p><p>然后再看 Lettuce： <img src="'+C+`" alt="在这里插入图片描述"></p><p>完美生效。</p><p>Spring Data Redis 中提供了一个高度封装的类：<strong>RedisTemplate</strong>，针对 Redis 客户端中大量 api 进行了归类封装，将同一类型操作封装为 operation 接口，具体分类如下：</p><ul><li>ValueOperations：简单 K-V 操作</li><li>SetOperations：set 类型数据操作</li><li>ZSetOperations：zset 类型数据操作</li><li>HashOperations：针对 hash 类型的数据操作</li><li>ListOperations：针对 list 类型的数据操作</li></ul><p>源码分析：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* RedisAutoConfiguration.java */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnMissingBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;redisTemplate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 我们可以自己定义一个redisTemplate来替换这个默认的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RedisTemplate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object, Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> redisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RedisConnectionFactory redisConnectionFactory)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     throws UnknownHostException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 两个泛型都是 Object, Object 的类型，我们后使用需要强制转换 &lt;String, Object&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RedisTemplate&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RedisTemplate&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    template.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConnectionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(redisConnectionFactory);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> template;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnMissingBean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //由于String是redis中最常使用的类型，所以说单独提出来了一个bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StringRedisTemplate </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringRedisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RedisConnectionFactory redisConnectionFactory)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throws UnknownHostException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    StringRedisTemplate template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringRedisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    template.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConnectionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(redisConnectionFactory);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> template;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h3><p>1、导入依赖</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 操作 redis --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>2、配置连接信息</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置 Redis</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6379</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 操作的是0号数据库</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ......</span></span></code></pre></div><p>3、测试</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootTest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Redis02SpringbootApplicationTests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RedisTemplate redisTemplate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextLoads</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // redisTemplate 操作不同的数据类型，api 和我们的指令是一样的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // opsForValue 操作字符串 类似 String</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // opsForList 操作 List 类似 List</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // opsForSet</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // opsForHash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // opsForZSet</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // opsForGeo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // opsForHyperLogLog</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 除了基本的操作，我们常用的方法都可以直接通过 redisTemplate 操作，比如事务，和基本的CRUD</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 获取 redis 的连接对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // connection.flushDb();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // connection.flushAll();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mykey&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;leeyazhou&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mykey&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>4、测试结果：</p><p>IDEA 的控制台中可以正常输出 mykey 字段的内容，但如果 <strong>我们回到 Redis 客户端中查看数据，会发现全是乱码</strong>。</p><p>这时候就关系到存储对象的序列化问题，在网络中传输的对象也是一样需要序列化，否者就全是乱码。</p><p>我们转到看那个默认的 RedisTemplate 内部什么样子：</p><p><img src="`+B+`" alt="img"></p><p>RedisTemplate 中默认的序列化机制是采用 JDK 序列化器（JdkSerializationRedisSerializer），该序列化器将对象转化成 byte 数组进行存储，这种方式需要存入对象必须实现 Serializable 接口，而且转化效率低、数据可读性差、有可能会造成字符串的转义，所以我们可以定制自己的 RedisTemplate 对其进行修改。</p><p>通常大部分项目会改用 Jackson2JsonRedisSerializer 或 FastJsonRedisSerializer 将对象转化为 json 进行序列化及反序列化。</p><p>关于对象的保存：<strong>所有的对象都需要序列化</strong></p><p>我们来编写一个自己的 RedisTemplete：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.fasterxml.jackson.annotation.JsonAutoDetect;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.fasterxml.jackson.annotation.PropertyAccessor;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.data.redis.connection.RedisConnectionFactory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.data.redis.core.RedisTemplate;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.data.redis.serializer.StringRedisSerializer;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RedisConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用！</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 自己定义了一个 RedisTemplate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RedisTemplate&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RedisConnectionFactory </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        RedisTemplate&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RedisTemplate&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        template.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConnectionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Json序列化配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Jackson2JsonRedisSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ObjectMapper om </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        om.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setVisibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        om.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enableDefaultTyping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ObjectMapper.DefaultTyping.NON_FINAL);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jackson2JsonRedisSerializer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setObjectMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(om);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // String 的序列化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        StringRedisSerializer stringRedisSerializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  StringRedisSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // key 采用 String 的序列化方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        template.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setKeySerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringRedisSerializer);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // hash 的 key 也采用 String 的序列化方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        template.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHashKeySerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringRedisSerializer);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // value 序列化方式采用 jackson</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        template.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setValueSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jackson2JsonRedisSerializer);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // hash 的 value 序列化方式采用 jackson</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        template.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHashValueSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jackson2JsonRedisSerializer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        template.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">afterPropertiesSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> template;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>3.0 版本的 RedisTemplete：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.fasterxml.jackson.annotation.JsonAutoDetect;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.fasterxml.jackson.annotation.JsonTypeInfo;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.fasterxml.jackson.annotation.PropertyAccessor;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.data.redis.connection.RedisConnectionFactory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.data.redis.core.RedisTemplate;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.data.redis.serializer.StringRedisSerializer;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RedisConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 自己定义了一个 RedisTemplate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RedisTemplate&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RedisConnectionFactory </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 我们为了开发方便，一般直接使用 &lt;String, Object&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建RedisTemplate实例，并设置连接工厂</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        RedisTemplate&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; redisTemplate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RedisTemplate&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConnectionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Json序列化配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ObjectMapper objectMapper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 方法设置JavaBean的可见性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        objectMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setVisibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 设置默认类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        objectMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">activateDefaultTyping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建一个FastJson序列化器，用于将Java对象序列化成JSON格式存储到Redis中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Jackson2JsonRedisSerializer&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; jackson2JsonRedisSerializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Jackson2JsonRedisSerializer&lt;&gt;(objectMapper, Object.class);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // String 的序列化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        StringRedisSerializer stringRedisSerializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringRedisSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // key 采用 String 的序列化方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setKeySerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringRedisSerializer);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // hash 的 key 也采用 String 的序列化方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHashKeySerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringRedisSerializer);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // value 序列化方式采用 jackson</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setValueSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jackson2JsonRedisSerializer);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // hash 的 value 序列化方式采用 jackson</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHashValueSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jackson2JsonRedisSerializer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">afterPropertiesSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redisTemplate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="自定义-redis-工具类" tabindex="-1">自定义 Redis 工具类 <a class="header-anchor" href="#自定义-redis-工具类" aria-label="Permalink to &quot;自定义 Redis 工具类&quot;">​</a></h3><p>使用 RedisTemplate 需要频繁调用 <code>.opForxxx</code> 然后才能进行对应的操作，这样使用起来代码效率低下，工作中一般不会这样使用，而是将这些常用的公共 API 抽取出来封装成为一个工具类，然后直接使用工具类来间接操作 Redis，不但效率高并且易用。</p><p>工具类参考博客：<a href="https://www.cnblogs.com/zhzhlong/p/11434284.html" target="_blank" rel="noreferrer">java redisUtils工具类很全 - 静静别跑 - 博客园</a></p><p>所有的 Redis 操作，其实对于 Java 开发人员来说，十分的简单，更重要的是去理解 Redis 的思想和每一种数据结构的用处和应用场景！</p>`,120)]))}const v=n(u,[["render",b]]);export{S as __pageData,v as default};
