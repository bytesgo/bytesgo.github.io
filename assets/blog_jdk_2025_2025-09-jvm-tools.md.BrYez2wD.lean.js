import{_ as s,o as i,c as e,a6 as l}from"./chunks/framework.BkI9ovSD.js";const c=JSON.parse('{"title":"JVM分析常用工具","description":"","frontmatter":{"title":"JVM分析常用工具","date":"2025-09-16T00:00:00.000Z","author":"leeyazhou","tags":["jdk","jvm"],"categories":"jdk"},"headers":[],"relativePath":"blog/jdk/2025/2025-09-jvm-tools.md","filePath":"blog/jdk/2025/2025-09-jvm-tools.md","lastUpdated":1758000526000}'),t={name:"blog/jdk/2025/2025-09-jvm-tools.md"};function p(n,a,h,o,r,d){return i(),e("div",{"data-pagefind-body":!0},a[0]||(a[0]=[l(`<h2 id="jvm分析常用工具" tabindex="-1">JVM分析常用工具 <a class="header-anchor" href="#jvm分析常用工具" aria-label="Permalink to &quot;JVM分析常用工具&quot;">​</a></h2><h3 id="jvm堆内存分析教程" tabindex="-1">JVM堆内存分析教程 <a class="header-anchor" href="#jvm堆内存分析教程" aria-label="Permalink to &quot;JVM堆内存分析教程&quot;">​</a></h3><p>JVM堆内存是Java应用中最重要的内存区域之一，主要用于存放对象实例。堆内存分析可以帮助我们定位内存泄漏、内存溢出等问题。下面介绍常用的堆内存分析方法和工具。</p><h4 id="_1-导出堆内存快照-heap-dump" tabindex="-1">1. 导出堆内存快照（Heap Dump） <a class="header-anchor" href="#_1-导出堆内存快照-heap-dump" aria-label="Permalink to &quot;1. 导出堆内存快照（Heap Dump）&quot;">​</a></h4><p>可以通过以下方式导出堆内存快照：</p><ul><li><p>使用jmap命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jmap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dump:format=b,file=heapdump.hprof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>使用JVM参数自动导出（如发生OOM）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:+HeapDumpOnOutOfMemoryError</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:HeapDumpPath=/path/to/heapdump.hprof</span></span></code></pre></div></li></ul><h4 id="_2-常用堆分析工具" tabindex="-1">2. 常用堆分析工具 <a class="header-anchor" href="#_2-常用堆分析工具" aria-label="Permalink to &quot;2. 常用堆分析工具&quot;">​</a></h4><ul><li><p><strong>MAT（Memory Analyzer Tool）</strong><br> Eclipse出品的堆分析工具，支持分析大文件，查找内存泄漏、查看对象引用关系等。</p></li><li><p><strong>VisualVM</strong><br> 集成了堆快照分析、内存监控、GC分析等功能，支持插件扩展。</p></li><li><p><strong>jhat</strong><br> JDK自带的堆分析工具，适合简单分析。</p></li></ul><h4 id="_3-mat分析堆快照示例" tabindex="-1">3. MAT分析堆快照示例 <a class="header-anchor" href="#_3-mat分析堆快照示例" aria-label="Permalink to &quot;3. MAT分析堆快照示例&quot;">​</a></h4><ol><li>打开MAT，选择<code>File -&gt; Open Heap Dump</code>，加载<code>.hprof</code>文件。</li><li>使用<code>Dominator Tree</code>查看内存占用最多的对象。</li><li>通过<code>Histogram</code>查看各类对象数量和大小。</li><li>利用<code>Leak Suspects Report</code>自动分析潜在的内存泄漏。</li></ol><h4 id="_4-常见分析思路" tabindex="-1">4. 常见分析思路 <a class="header-anchor" href="#_4-常见分析思路" aria-label="Permalink to &quot;4. 常见分析思路&quot;">​</a></h4><ul><li>查找大对象、异常增长的对象类型。</li><li>分析对象引用链，定位无法回收的原因。</li><li>结合代码和业务场景，排查内存泄漏点。</li></ul><h4 id="_5-参考命令" tabindex="-1">5. 参考命令 <a class="header-anchor" href="#_5-参考命令" aria-label="Permalink to &quot;5. 参考命令&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看JVM进程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导出堆快照</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jmap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dump:format=b,file=heapdump.hprof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 分析堆快照（MAT/VisualVM等工具打开heapdump.hprof文件）</span></span></code></pre></div><hr><p>如需更深入的堆内存分析，可结合GC日志、线程Dump等信息综合排查。</p>`,16)]))}const u=s(t,[["render",p]]);export{c as __pageData,u as default};
