import{_ as s,o as t,c as a,a6 as e}from"./chunks/framework.BkI9ovSD.js";const l="/assets/553.CoPYJA5H.png",n="/assets/554.DpYCF03V.jpg",p="/assets/570.BuHpYRom.png",h="/assets/571.6jDqhG1A.png",u=JSON.parse('{"title":"Filter和Listener总结","description":"","frontmatter":{"title":"Filter和Listener总结","date":"2020-04-09T00:00:00.000Z","tags":["JSP","Java"],"categories":["JavaWeb"]},"headers":[],"relativePath":"blog/JavaWeb/Filter和Listener总结.md","filePath":"blog/JavaWeb/Filter和Listener总结.md","lastUpdated":1736224824000}'),r={name:"blog/JavaWeb/Filter和Listener总结.md"};function k(d,i,E,o,g,c){return t(),a("div",{"data-pagefind-body":!0},i[0]||(i[0]=[e('<h1 id="filter和listener总结" tabindex="-1">Filter和Listener总结 <a class="header-anchor" href="#filter和listener总结" aria-label="Permalink to &quot;Filter和Listener总结&quot;">​</a></h1><h2 id="filter" tabindex="-1">Filter <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;Filter&quot;">​</a></h2><h3 id="filter-概述" tabindex="-1">Filter 概述 <a class="header-anchor" href="#filter-概述" aria-label="Permalink to &quot;Filter 概述&quot;">​</a></h3><p>Filter 表示过滤器，是 JavaWeb 三大组件（Servlet、Filter、Listener）之一。</p><p>过滤器可以把对资源的请求 <strong>拦截</strong> 下来，从而实现一些特殊的功能。</p><p>如下图所示，浏览器原本可以无限制访问服务器上的所有的资源（servlet、jsp、html等）：</p><p><img src="'+l+'" alt=""></p><p>而在访问到这些资源之前可以使过滤器拦截来下，也就是说在访问资源之前会先经过 Filter，如下图：</p><p><img src="'+n+`" alt=""></p><p>拦截器拦截到后可以做什么功能呢？</p><p><strong>过滤器一般完成一些通用的操作</strong>。比如每个资源都要写一些代码完成某个功能，我们为了提高代码复用率、减少冗余，可以将这些代码写在过滤器中，因为请求每一个资源都要经过过滤器。</p><h3 id="filter-的常见应用场景" tabindex="-1">Filter 的常见应用场景 <a class="header-anchor" href="#filter-的常见应用场景" aria-label="Permalink to &quot;Filter 的常见应用场景&quot;">​</a></h3><ul><li><p>后台页面的访问过滤、权限控制</p></li><li><p>中文参数处理（字符集编码处理）</p></li><li><p>过滤敏感词汇</p></li><li><p>请求的 <strong>预</strong> 处理以及请求的 <strong>后</strong> 处理</p></li></ul><h3 id="如何创建-filter" tabindex="-1">如何创建 Filter <a class="header-anchor" href="#如何创建-filter" aria-label="Permalink to &quot;如何创建 Filter&quot;">​</a></h3><ol><li><p>定义类，实现 Filter接口，并重写其所有方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FilterDemo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pubLic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FilterConfig </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filterConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pubLic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, FilterChain </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>配置 Filter 拦截资源的路径：在类上定义 <code>@WebFilter</code> 注解（也可以在 web.xml 中进行路径配置）。而注解的 <code>value</code> 属性值 <code>/*</code> 表示拦截所有的资源：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WebFileter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FilterDemo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div></li><li><p>在 doFilter() 方法中输出一句话，并放行：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pubLic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServletRequest request, ServletResponse response, FilterChain chain) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;filter 被执行了...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //放行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request,response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>上述代码中的 <code>chain.doFilter(request,response);</code> 就是放行，也就是让其访问本该访问的资源。</p><h3 id="filter-的-web-xml-配置方法" tabindex="-1">Filter 的 web.xml 配置方法 <a class="header-anchor" href="#filter-的-web-xml-配置方法" aria-label="Permalink to &quot;Filter 的 web.xml 配置方法&quot;">​</a></h3><p>在 <code>web.xml</code> 中进行 filter 的配置，和 Servlet 的配置很类似。</p><ul><li><p>过滤所有的访问请求：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;/*&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>只过滤 JSP：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;*.jsp&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>配置文件具体方式：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>给过滤器添加参数：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">init-param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">init-param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>过滤器的 dispatcher（配置到 servletmapping 里面）：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;REQUEST&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;INCLUDE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;FORWARD&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;ERROR&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h3 id="filter-执行流程" tabindex="-1">Filter 执行流程 <a class="header-anchor" href="#filter-执行流程" aria-label="Permalink to &quot;Filter 执行流程&quot;">​</a></h3><p>访问对应资源，资源访问完成后，进程会回到 Filter 中，并且会回到 <strong>放行后逻辑</strong>，执行该部分代码。</p><p>通过上述的说明，我们就可以总结 Filter 的执行流程如下：</p><p><img src="`+p+'" alt=""></p><p>以后我们可以将对请求进行处理的代码放在放行之前进行处理，而如果请求完资源后还要对响应的数据进行处理，则可以在放行后进行逻辑处理。</p><h3 id="filter-的拦截路径配置" tabindex="-1">Filter 的拦截路径配置 <a class="header-anchor" href="#filter-的拦截路径配置" aria-label="Permalink to &quot;Filter 的拦截路径配置&quot;">​</a></h3><p>拦截路径表示 Filter 会对请求的哪些资源进行拦截，使用 <code>@WebFilter</code> 注解进行配置。如：<code>@WebFilter(&quot;拦截路径&quot;)</code></p><p>拦截路径有如下四种配置方式：</p><ul><li>拦截具体的资源：/index.jsp：只有访问 index.jsp 时才会被拦截</li><li>目录拦截：/user/*：访问 /user 下的所有资源，都会被拦截</li><li>后缀名拦截：*.jsp：访问后缀名为jsp的资源，都会被拦截</li><li>拦截所有：/*：访问所有资源，都会被拦截</li></ul><p>不难发现拦截路径的配置方式和 <code>Servlet</code> 的请求资源路径配置方式一样，但是表示的含义不同。</p><h3 id="过滤器链" tabindex="-1">过滤器链 <a class="header-anchor" href="#过滤器链" aria-label="Permalink to &quot;过滤器链&quot;">​</a></h3><p>过滤器链是指在一个 Web 应用，可以配置多个过滤器，这多个过滤器称为过滤器链。</p><p>如下图就是一个过滤器链，我们学习过滤器链主要是学习过滤器链执行的流程：</p><p><img src="'+h+'" alt=""></p><p>上图中的过滤器链执行是按照以下流程执行：</p><ol><li>执行 <code>Filter1</code> 的放行前逻辑代码</li><li>执行 <code>Filter1</code> 的放行代码</li><li>执行 <code>Filter2</code> 的放行前逻辑代码</li><li>执行 <code>Filter2</code> 的放行代码</li><li>访问到资源</li><li>执行 <code>Filter2</code> 的放行后逻辑代码</li><li>执行 <code>Filter1</code> 的放行后逻辑代码</li></ol><p>以上流程串起来就像一条链子，故称之为过滤器链。</p><p><strong>注意</strong>：</p><p>使用 <strong>注解</strong> 配置 Filter 时，这种配置方式的优先级是按照过滤器类名（字符串）的自然排序。</p><p>比如有如下两个名称的过滤器 ： <code>BFilterDemo</code> 和 <code>AFilterDemo</code> 。那一定是 <code>AFilterDemo</code> 过滤器先执行。</p><p>使用 <strong>web.xml</strong> 配置时，则按照配置的顺序来执行。</p><h2 id="listener" tabindex="-1">Listener <a class="header-anchor" href="#listener" aria-label="Permalink to &quot;Listener&quot;">​</a></h2><h3 id="listener-概述" tabindex="-1">Listener 概述 <a class="header-anchor" href="#listener-概述" aria-label="Permalink to &quot;Listener 概述&quot;">​</a></h3><p>Listener 表示监听器，是 JavaWeb 三大组件（Servlet、Filter、Listener）之一。</p><p>监听器可以监听 <code>application</code>，<code>session</code>，<code>request</code> 三个对象的创建、销毁或者往其中添加修改删除属性等事件。</p><p>当这些事件发生时，监听器可以自动执行一些代码。</p><p>request 和 session 我们学习过，而 <code>application</code> 是 ServletContext 类型的对象。</p><p>ServletContext 代表整个 Web 应用，在服务器启动的时候，Tomcat 会自动创建该对象，在服务器关闭时会自动销毁该对象。</p><h3 id="listener-的常见应用场景" tabindex="-1">Listener 的常见应用场景 <a class="header-anchor" href="#listener-的常见应用场景" aria-label="Permalink to &quot;Listener 的常见应用场景&quot;">​</a></h3><ul><li><p>统计在线人数</p></li><li><p>Web 应用启动起来的时候用来做一些初始化的工作</p></li></ul><h3 id="listener-的分类" tabindex="-1">Listener 的分类 <a class="header-anchor" href="#listener-的分类" aria-label="Permalink to &quot;Listener 的分类&quot;">​</a></h3><p>JavaWeb 提供了8个监听器：</p><table tabindex="0"><thead><tr><th>分类</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>ServletContext监听</td><td>ServletContextListener</td><td>用于对ServletContext对象进行监听（创建、销毁）</td></tr><tr><td></td><td>ServletContextAttributeListener</td><td>对ServletContext对象中属性的监听（增删改属性）</td></tr><tr><td>Session监听</td><td>HttpSessionListener</td><td>对Session对象的整体状态的监听（创建、 销毁）</td></tr><tr><td></td><td>HttpSessionAttributeListener</td><td>对Session对象中的属性监听（增删改属性）</td></tr><tr><td></td><td>HttpSessionBindingListener</td><td>监听对象于Session的绑定和解除</td></tr><tr><td></td><td>HttpSessionActivationListener</td><td>对Session数据的钝化和活化的监听</td></tr><tr><td>Request监听</td><td>ServletRequestListener</td><td>对Request对象进行监听（创建、销毁）</td></tr><tr><td></td><td>ServletRequestAttributeListener</td><td>对Request对象中属性的监听（增删改属性）</td></tr></tbody></table><p>这里面只有 <code>ServletContextListener</code> 这个监听器后期我们会接触到，<code>ServletContextListener</code> 是用来监听 ServletContext 对象的创建和销毁。</p><p><code>ServletContextListener</code> 接口中有以下两个方法</p><ul><li><code>void contextInitialized(ServletContextEvent sce)</code>：ServletContext 对象被创建了会自动执行的方法</li><li><code>void contextDestroyed(ServletContextEvent sce)</code>：ServletContext 对象被销毁时会自动执行的方法</li></ul><h3 id="如何创建-listener" tabindex="-1">如何创建 Listener <a class="header-anchor" href="#如何创建-listener" aria-label="Permalink to &quot;如何创建 Listener&quot;">​</a></h3><ul><li>定义一个类，实现<code>ServletContextListener</code> 接口</li><li>重写所有的抽象方法</li><li>使用 <code>@WebListener</code> 进行配置（或者在 web.xml 中配置）</li></ul>',57)]))}const b=s(r,[["render",k]]);export{u as __pageData,b as default};
