import{_ as i,o as a,c as t,a6 as n}from"./chunks/framework.BkI9ovSD.js";const l="/assets/142H4N00-0.Cm4H0VrV.png",o=JSON.parse('{"title":"Maven插件","description":"","frontmatter":{"title":"Maven插件","date":"2023-04-19T00:00:00.000Z","tags":["Maven"],"categories":["笔记"]},"headers":[],"relativePath":"blog/Note/Maven插件.md","filePath":"blog/Note/Maven插件.md","lastUpdated":1734486541000}'),e={name:"blog/Note/Maven插件.md"};function p(h,s,d,k,E,r){return a(),t("div",{"data-pagefind-body":!0},s[0]||(s[0]=[n('<h1 id="maven插件" tabindex="-1">Maven插件 <a class="header-anchor" href="#maven插件" aria-label="Permalink to &quot;Maven插件&quot;">​</a></h1><p>Maven 实际上是一个依赖插件执行的框架，它执行的每个任务实际上都由插件完成的。Maven 的核心发布包中并不包含任何 Maven 插件，它们以独立构件的形式存在， 只有在 Maven 需要使用某个插件时，才会去仓库中下载。</p><p>如下表所示，Maven 提供了如下 2 种类型的插件。</p><table tabindex="0"><thead><tr><th>插件类型</th><th>描述</th></tr></thead><tbody><tr><td>Build plugins</td><td>在项目构建过程中执行，在 pom.xml 中的 build 元素中配置</td></tr><tr><td>Reporting plugins</td><td>在网站生成过程中执行，在 pom.xml 中的 reporting 元素中配置</td></tr></tbody></table><h2 id="插件目标" tabindex="-1">插件目标 <a class="header-anchor" href="#插件目标" aria-label="Permalink to &quot;插件目标&quot;">​</a></h2><p>对于 Maven 插件而言，为了提高代码的复用性，通常一个 Maven 插件能够实现多个功能，每一个功能都是一个插件目标，即 Maven 插件是插件目标的集合。我们可以把插件理解为一个类，而插件目标是类中的方法，调用插件目标就能实现对应的功能。</p><h3 id="通用写法" tabindex="-1">通用写法 <a class="header-anchor" href="#通用写法" aria-label="Permalink to &quot;通用写法&quot;">​</a></h3><p>插件目标的通用写法如下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[插件名]:[插件目标名]</span></span></code></pre></div><p>例如，maven-compiler-plugin 插件的 compile 目标的通用写法如下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>maven-compiler-plugin:compile</span></span></code></pre></div><h3 id="执行插件目标" tabindex="-1">执行插件目标 <a class="header-anchor" href="#执行插件目标" aria-label="Permalink to &quot;执行插件目标&quot;">​</a></h3><p>使用 Maven 命令执行插件的目标，语法如下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mvn [插件名]:[目标名]</span></span></code></pre></div><p>例如，调用 maven-compiler-plugin 插件的 compile 目标，命令如下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mvn compiler:compile</span></span></code></pre></div><h2 id="插件绑定" tabindex="-1">插件绑定 <a class="header-anchor" href="#插件绑定" aria-label="Permalink to &quot;插件绑定&quot;">​</a></h2><p>为了完成某个具体的构建任务，Maven 生命周期的阶段需要和 Maven 插件的目标相互绑定。例如，代码编译任务对应了default 生命周期的 compile 阶段，而 maven-compiler-plugin 插件的 compile 目标能够完成这个任务，因此将它们进行绑定就能达到代码编译的目的。</p><h3 id="内置绑定" tabindex="-1">内置绑定 <a class="header-anchor" href="#内置绑定" aria-label="Permalink to &quot;内置绑定&quot;">​</a></h3><p>Maven 默认为一些核心的生命周期阶段绑定了插件目标，当用户调用这些阶段时，对应的插件目标就会自动执行相应的任务。</p><table tabindex="0"><thead><tr><th>生命周期</th><th>阶段</th><th>插件目标</th><th>执行的任务</th></tr></thead><tbody><tr><td>clean</td><td>pre-clean</td><td></td><td></td></tr><tr><td>clean</td><td>maven-clean-plugin:clean</td><td>清理 Maven 的输出目录</td><td></td></tr><tr><td>post-clean</td><td></td><td></td><td></td></tr><tr><td>site</td><td>pre-site</td><td></td><td></td></tr><tr><td>site</td><td>maven-site-plugin:site</td><td>生成项目站点</td><td></td></tr><tr><td>post-site</td><td></td><td></td><td></td></tr><tr><td>site-deploy</td><td>maven-site-plugin:deploy</td><td>部署项目站点</td><td></td></tr><tr><td>default</td><td>process-resources</td><td>maven-resources-plugin:resources</td><td>复制资源文件到输出目录</td></tr><tr><td>compile</td><td>maven-compiler-plugin:compile</td><td>编译代码到输出目录</td><td></td></tr><tr><td>process-test-resources</td><td>maven-resources-plugin:testResources</td><td>复制测试资源文件到测试输出目录</td><td></td></tr><tr><td>test-compile</td><td>maven-compiler-plugin:testCompile</td><td>编译测试代码到测试输出目录</td><td></td></tr><tr><td>test</td><td>maven-surefire-plugin:test</td><td>执行测试用例</td><td></td></tr><tr><td>package</td><td>maven-jar-plugin:jar/maven-jar-plugin:war</td><td>创建项目 jar/war 包</td><td></td></tr><tr><td>install</td><td>maven-install-plugin:install</td><td>将项目输出的包文件安装到本地仓库</td><td></td></tr><tr><td>deploy</td><td>maven-deploy-plugin:deploy</td><td>将项目输出的包文件部署到到远程仓库</td><td></td></tr></tbody></table><p>上表中，default 生命周期中只列出了绑定了插件目标的阶段，它还有很多其他的阶段，但这些阶段默认没有绑定任何插件目标，因此它们也没有任何实际的行为。</p><p>我们可以直接在执行 Maven 命令看到该构建过程包含了哪些插件目标。例如，在 Maven 项目中执行 mvn clean install 命令，能看到如下输出，图中标记的部分就是执行此命令时所调用的插件目标。</p><p><img src="'+l+`" alt="Maven 内置插件目标"></p><h3 id="自定义绑定" tabindex="-1">自定义绑定 <a class="header-anchor" href="#自定义绑定" aria-label="Permalink to &quot;自定义绑定&quot;">​</a></h3><p>除了内置绑定之外，用户也可以自己选择将某个插件目标绑定到 Maven 生命周期的某个阶段上，这种绑定方式就是自定义绑定。自定义绑定能够让 Maven 在构建过程中执行更多更丰富的任务。</p><p>例如，我们想要在 clean 生命周期的 clean 阶段中显示自定义文本信息，则只需要在项目的 POM 中 ，通过 build 元素的子元素 plugins，将 maven-antrun-plugin:run 目标绑定到 clean 阶段上，并使用该插件输出自定义文本信息即可。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            &lt;!-- 绑定插件 maven-antrun-plugin --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.apache.maven.plugins&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;maven-antrun-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1.8&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">executions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        &lt;!--自定义 id --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;www.biancheng.net clean&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        &lt;!--插件目标绑定的构建阶段 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">phase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;clean&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">phase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        &lt;!--插件目标 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;run&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        &lt;!--配置 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            &lt;!-- 执行的任务 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                &lt;!--自定义文本信息 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;清理阶段，编程帮 欢迎您的到来，网址：www.biancheng.net&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;               </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">executions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>以上配置中除了插件的坐标信息之外，还通过 executions 元素定义了一些执行配置。executions 下的每一个 executin 子元素都可以用来配置执行一个任务。</p><p>execution 下各个元素含义如下：</p><ul><li>id：任务的唯一标识。</li><li>phase：插件目标需要绑定的生命周期阶段。</li><li>goals：用于指定一组插件目标，其子元素 goal 用于指定一个插件目标。</li><li>configuration：该任务的配置，其子元素 tasks 用于指定该插件目标执行的任务。</li></ul><p><strong>当插件目标绑定到生命周期的不同阶段时，其执行顺序由生命周期阶段的先后顺序决定。如果多个目标绑定到同一个生命周期阶段，其执行顺序与插件声明顺序一致，先声明的先执行，后声明的后执行。</strong></p>`,32)]))}const c=i(e,[["render",p]]);export{o as __pageData,c as default};
