import{_ as a,o as i,c as n,a6 as t}from"./chunks/framework.BkI9ovSD.js";const l="/assets/282.C-DK45tU.jpg",e="/assets/283.BshviO0H.png",g=JSON.parse('{"title":"JUnit4的使用教程","description":"","frontmatter":{"title":"JUnit4的使用教程","date":"2020-08-02T00:00:00.000Z","tags":["Java","JUnit"],"categories":["笔记"]},"headers":[],"relativePath":"blog/Note/JUnit4的使用教程.md","filePath":"blog/Note/JUnit4的使用教程.md","lastUpdated":1734486716000}'),p={name:"blog/Note/JUnit4的使用教程.md"};function h(k,s,r,d,E,o){return i(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>JUint 是 Java 编程语言的单元测试框架，用于编写和运行可重复的自动化测试</p></div><h1 id="junit4的使用教程" tabindex="-1">JUnit4的使用教程 <a class="header-anchor" href="#junit4的使用教程" aria-label="Permalink to &quot;JUnit4的使用教程&quot;">​</a></h1><h2 id="测试分类" tabindex="-1">测试分类 <a class="header-anchor" href="#测试分类" aria-label="Permalink to &quot;测试分类&quot;">​</a></h2><ul><li>黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</li><li>白盒测试（比如 JUnit 测试）：需要写代码的，关注程序具体的执行流程。</li></ul><p><img src="'+l+'" alt=""></p><h3 id="什么是单元测试" tabindex="-1">什么是单元测试 <a class="header-anchor" href="#什么是单元测试" aria-label="Permalink to &quot;什么是单元测试&quot;">​</a></h3><ul><li>单元测试是针对最小的功能单位编写测试代码</li><li>Java 程序的最小功能单元是方法</li><li>单元测试就是针对单个 Java 方法的测试</li></ul><h3 id="使用-main-方法测试的缺点" tabindex="-1">使用 main() 方法测试的缺点 <a class="header-anchor" href="#使用-main-方法测试的缺点" aria-label="Permalink to &quot;使用 main() 方法测试的缺点&quot;">​</a></h3><p><img src="'+e+`" alt=""></p><ul><li>只能有一个 main() 方法，不能分离测试代码</li><li>没有打印出 <strong>测试结果</strong> 和 <strong>期望结果</strong> 例如，expected: 3628800, but actual: 123456</li></ul><h3 id="单元测试的好处" tabindex="-1">单元测试的好处 <a class="header-anchor" href="#单元测试的好处" aria-label="Permalink to &quot;单元测试的好处&quot;">​</a></h3><ul><li>确保单个方法运行正常</li><li>如果修改了方法代码，只需确保其对应的单元测试通过</li><li>测试代码本身就可以作为示例代码</li><li>可以自动化运行所有测试并获得报告</li></ul><h2 id="junit-特点" tabindex="-1">JUnit 特点 <a class="header-anchor" href="#junit-特点" aria-label="Permalink to &quot;JUnit 特点&quot;">​</a></h2><ul><li>JUnit 是一个开源的 Java 语言的单元测试框架</li><li>专门针对 Java 语言设计，使用最广泛</li><li>JUnit 是事实上的标准单元测试框架</li><li>提供 <strong>注解</strong> 来识别测试方法</li><li>提供 <strong>断言</strong> 来测试预期结果</li><li>可以方便地组织和运行测试</li><li>可以方便地查看测试结果</li><li>常用 IDE（例如 Eclipse）都集成了 JUnit</li><li>可以方便地集成到 Maven</li></ul><h2 id="junit-基本使用" tabindex="-1">JUnit 基本使用 <a class="header-anchor" href="#junit-基本使用" aria-label="Permalink to &quot;JUnit 基本使用&quot;">​</a></h2><h3 id="导入-junit-依赖环境" tabindex="-1">导入 JUnit 依赖环境 <a class="header-anchor" href="#导入-junit-依赖环境" aria-label="Permalink to &quot;导入 JUnit 依赖环境&quot;">​</a></h3><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 添加junit4依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;junit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;junit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;4.11&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 指定范围，在测试时才会加载 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;test&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="定义一个测试类-测试用例" tabindex="-1">定义一个测试类（测试用例） <a class="header-anchor" href="#定义一个测试类-测试用例" aria-label="Permalink to &quot;定义一个测试类（测试用例）&quot;">​</a></h3><p>建议：</p><ul><li>测试类名：被测试的类名 Test，例如 <code>CalculatorTest</code></li><li>包名：xxx.xxx.xx.test，例如 <code>cn.itcast.test</code></li></ul><h3 id="定义测试方法-可以独立运行" tabindex="-1">定义测试方法（可以独立运行） <a class="header-anchor" href="#定义测试方法-可以独立运行" aria-label="Permalink to &quot;定义测试方法（可以独立运行）&quot;">​</a></h3><p>建议：</p><ul><li>方法名：test 测试的方法名，例如 <code>testAdd()</code></li><li>返回值：void</li><li>参数列表：空参</li></ul><h3 id="给方法加上-test-注解" tabindex="-1">给方法加上 @Test 注解 <a class="header-anchor" href="#给方法加上-test-注解" aria-label="Permalink to &quot;给方法加上 @Test 注解&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> selectUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SqlSession session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MybatisUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        UserMapper mapper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserMapper.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (User user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="junit-常用注解" tabindex="-1">JUnit 常用注解 <a class="header-anchor" href="#junit-常用注解" aria-label="Permalink to &quot;JUnit 常用注解&quot;">​</a></h2><table tabindex="0"><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Test</td><td>测试注解，标记一个方法可以作为一个测试用例</td></tr><tr><td>@Before</td><td>该方法必须在类中的每个测试之前执行，以便执行某些必要的先决条件</td></tr><tr><td>@BeforeClass</td><td>指出这是附着在 <strong>静态方法</strong> 必须执行一次并在类的所有测试之前，这种情况一般用于测试计算、共享配制方法（如数据库连接）</td></tr><tr><td>@After</td><td>表示该方法在每项测试后执行（如执行每一个测试后重置某些变量，删除临时变量等）</td></tr><tr><td>@AfterClass</td><td>当需要执行所有测试在 JUnit 测试用例类后执行，AlterClass 注解可以使用以清理一些资源（如数据库连接），注意：方法必须为 <strong>静态方法</strong></td></tr><tr><td>@Ignore</td><td>当想暂时禁用特定的测试执行可以使用这个注解，每个被注解为 @Ignore 的方法将不再执行</td></tr><tr><td>@Runwith</td><td>放在测试类名之前，用来确定这个类使用什么运行器来运行，不标注时会使用默认运行器</td></tr><tr><td>@Parameters</td><td>用于使用参数化功能</td></tr><tr><td>@SuiteClasses</td><td>用于套件测试</td></tr></tbody></table><h2 id="断言" tabindex="-1">断言 <a class="header-anchor" href="#断言" aria-label="Permalink to &quot;断言&quot;">​</a></h2><p>一般我们会使用 <strong>断言</strong> 操作来处理结果：</p><table tabindex="0"><thead><tr><th>断言</th><th>描述</th></tr></thead><tbody><tr><td>void assertEquals([String message], expected value, actual value)</td><td>断言两个值相等；<br>值类型可能是int，short，long，byte，char，Object；<br>第一个参数是一个可选字符串信息，第三个参数为误差值，可为空</td></tr><tr><td>void assertTrue([String message], boolean condition)</td><td>断言一个条件为真</td></tr><tr><td>void assertFalse([String message], boolean condition)</td><td>断言一个条件为假</td></tr><tr><td>void assertNotNull([String message], java.lang.Object object)</td><td>断言一个对象不为空（null）</td></tr><tr><td>void assertNull([String message], java.lang.Object object)</td><td>断言一个对象为空（null）</td></tr><tr><td>void assertSame([String message], java.lang.Object expected,java.lang.Object actual)</td><td>断言两个对象引用相同的对象</td></tr><tr><td>void assertNotSame([String message], java.lang.Object unexpected,java.lang.Object actual)</td><td>断言两个对象不是引用同一个对象</td></tr><tr><td>void assertArrayEquals([String message],expectedArray,resultArray)</td><td>断言预期数组和结果数组相等；<br>数组类型可能是 int，short，long，byte，char，Object</td></tr></tbody></table><h2 id="junit执行过程" tabindex="-1">JUnit执行过程 <a class="header-anchor" href="#junit执行过程" aria-label="Permalink to &quot;JUnit执行过程&quot;">​</a></h2><p>测试用例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JunitTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BeforeClass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> beforeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in before class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AfterClass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> afterClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in after class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Before</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">After</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testCase1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in test case 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testCase2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in test case 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>in before class</span></span>
<span class="line"><span>in before</span></span>
<span class="line"><span>in test case 1</span></span>
<span class="line"><span>in after</span></span>
<span class="line"><span>in before</span></span>
<span class="line"><span>in test case 2</span></span>
<span class="line"><span>in after</span></span>
<span class="line"><span>in after class</span></span></code></pre></div><h2 id="异常测试" tabindex="-1">异常测试 <a class="header-anchor" href="#异常测试" aria-label="Permalink to &quot;异常测试&quot;">​</a></h2><p>JUnit 使用 <code>@Test 注释</code> 和 <code>expected 参数</code> 来测试不同的异常类型：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArithmeticException.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testCase3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in test case 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>单独执行 testCase3() 方法，由于得到了一个预期异常，所以测试通过，结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>in before class</span></span>
<span class="line"><span>in before</span></span>
<span class="line"><span>in test case 3</span></span>
<span class="line"><span>in after</span></span>
<span class="line"><span>in after class</span></span></code></pre></div><p>如果没有得到预期异常：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>in before class</span></span>
<span class="line"><span>in before</span></span>
<span class="line"><span>in test case 3</span></span>
<span class="line"><span>in after</span></span>
<span class="line"><span></span></span>
<span class="line"><span>java.lang.AssertionError: Expected exception: java.lang.ArithmeticException</span></span>
<span class="line"><span></span></span>
<span class="line"><span>in after class</span></span></code></pre></div><h2 id="参数化测试" tabindex="-1">参数化测试 <a class="header-anchor" href="#参数化测试" aria-label="Permalink to &quot;参数化测试&quot;">​</a></h2><p><strong>参数化测试允许开发人员使用不同的测试数据来反复运行同一个测试方法</strong></p><p>我们一般会遵循 5 个步骤来创建参数化测试：</p><ol><li><p>为准备使用参数化测试的测试类指定特殊的运行器 <code>org.junit.runners.Parameterized</code></p></li><li><p>为测试类声明几个变量，分别用于存放期望值和测试所用数据</p></li><li><p>为测试类声明一个带有参数的公共构造函数，并在其中为第二个环节中声明的几个变量赋值</p></li><li><p>为测试类声明一个使用注解 <code>org.junit.runners.Parameterized.Parameters</code> 修饰的，返回值为 <code>java.util.Collection</code> 的公共静态方法，并在此方法中初始化所有需要测试的参数对</p></li><li><p>编写测试方法，使用定义的变量作为参数进行测试。</p></li></ol><h2 id="超时测试" tabindex="-1">超时测试 <a class="header-anchor" href="#超时测试" aria-label="Permalink to &quot;超时测试&quot;">​</a></h2><p>如果一个测试用例比起指定的毫秒数花费了更多的时间，那么 JUnit 将自动将它标记为失败。</p><p>利用 <code>@Test注解</code> 和 <code>timeout参数</code> 一起使用，例如 <code>@Test(timeout=1000)</code></p><p>继续使用刚才的例子，现在将testCase1的执行时间延长到5000毫秒，并加上时间参数,设置超时为1000毫秒，然后执行测试类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testCase1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() throws InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TimeUnit.SECONDS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in test case 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>testCase1 被标记为失败，并且抛出异常，执行结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>in before class</span></span>
<span class="line"><span>in before</span></span>
<span class="line"><span>in after</span></span>
<span class="line"><span></span></span>
<span class="line"><span>org.junit.runners.model.TestTimedOutException: test timed out after 1000 milliseconds</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	at java.lang.Thread.sleep(Native Method)</span></span>
<span class="line"><span>	at java.lang.Thread.sleep(Thread.java:340)</span></span>
<span class="line"><span>	at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386)</span></span>
<span class="line"><span>	at com.lxs.JUnit.JunitTest.testCase1(JunitTest.java:35)</span></span>
<span class="line"><span>	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></span>
<span class="line"><span>	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span></span>
<span class="line"><span>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></span>
<span class="line"><span>	at java.lang.reflect.Method.invoke(Method.java:498)</span></span>
<span class="line"><span>	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</span></span>
<span class="line"><span>	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span></span>
<span class="line"><span>	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</span></span>
<span class="line"><span>	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span></span>
<span class="line"><span>	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)</span></span>
<span class="line"><span>	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)</span></span>
<span class="line"><span>	at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span></span>
<span class="line"><span>	at java.lang.Thread.run(Thread.java:748)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>in before</span></span>
<span class="line"><span>in test case 2</span></span>
<span class="line"><span>in after</span></span>
<span class="line"><span>in after class</span></span></code></pre></div><p><strong>注意，超时测试不能取代性能测试和压力测试。</strong></p>`,54)]))}const y=a(p,[["render",h]]);export{g as __pageData,y as default};
