import{_ as i,o as a,c as t,a6 as n}from"./chunks/framework.BkI9ovSD.js";const l="/assets/lst8e510q7.hr7EA_Lq.png",h="/assets/rly4l6xj3n.CU30NXmu.png",e="/assets/op5zl3aeey.DuIc2Y5V.png",p="/assets/wslthll8zf.9iaZdkWA.png",y=JSON.parse('{"title":"Elasticsearch 分页查询","description":"","frontmatter":{"title":"Elasticsearch 分页查询","date":"2024-06-24T00:00:00.000Z","sidebar":"auto","tags":["Elasticsearch"],"categories":["笔记"]},"headers":[],"relativePath":"blog/Note/Elasticsearch分页查询.md","filePath":"blog/Note/Elasticsearch分页查询.md","lastUpdated":1734486541000}'),k={name:"blog/Note/Elasticsearch分页查询.md"};function r(E,s,o,d,c,g){return a(),t("div",{"data-pagefind-body":!0},s[0]||(s[0]=[n(`<h1 id="elasticsearch-分页查询" tabindex="-1">Elasticsearch 分页查询 <a class="header-anchor" href="#elasticsearch-分页查询" aria-label="Permalink to &quot;Elasticsearch 分页查询&quot;">​</a></h1><p>关于 Elasticsearch 分页查询，这几个问题经常被问到：</p><ol><li>一次性获取索引上的某个字段的所有值（100 万左右），除了把 max_result_window 调大 ，还有没有其他方法？</li><li>每次拿 20 条数据展示在前台，然后点击下一页，再查询后面的 20 条数据，应该要怎么写</li><li>From+size、Scroll、search_after 的本质区别和应用场景分别是什么？</li></ol><h2 id="elasticsearch-支持的分页方式" tabindex="-1">Elasticsearch 支持的分页方式 <a class="header-anchor" href="#elasticsearch-支持的分页方式" aria-label="Permalink to &quot;Elasticsearch 支持的分页方式&quot;">​</a></h2><ul><li>From + Size</li><li>Scroll</li><li>Search After</li></ul><p>下面我就三种方式的联系与区别、优缺点、适用场景等展开进行解读。</p><h2 id="from-size" tabindex="-1">From + size <a class="header-anchor" href="#from-size" aria-label="Permalink to &quot;From + size&quot;">​</a></h2><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;from&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>from：定义了当前页返回数据的起始位置，默认为 0。</li><li>size：定义了当前页返回数据的文档数量，默认为 10。</li></ul><h3 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h3><p><strong>优点</strong>：支持随机翻页</p><p><strong>缺点</strong>：</p><ul><li>受制于 <code>max_result_window</code> 的设置，不能无限制翻页</li><li>存在 <strong>深度翻页</strong> 的问题，越往后翻页越慢</li></ul><h3 id="max-result-window-问题" tabindex="-1">max_result_window 问题 <a class="header-anchor" href="#max-result-window-问题" aria-label="Permalink to &quot;max_result_window 问题&quot;">​</a></h3><p>Elasticsearch 会限制最大分页数，避免大数据量的召回导致性能低下。</p><p>Elasticsearch 的 <code>max_result_window</code> 默认值是 10000。也就意味着：如果每页有 10 条数据，会最大翻页至 1000 页。</p><p>实际主流搜索引擎都翻不了那么多页，举例：百度搜索“上海”，翻到第 76 页，就无法再往下翻页了，提示信息如下：</p><p><img src="`+l+`" alt="img"></p><p>如下的分页查询:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;from&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10001</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;from&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>会报错：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;root_cause&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;illegal_argument_exception&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;reason&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Result window is too large, from + size must be less than or equal to: [10000] but was [10001]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>原因就是请求的数据集超过了 ES 默认的最大窗口限制，<code>index.max_result_window</code> 默认值为 10000。</p><p>报错信息中还给出了两个解决方案：</p><ul><li><p>方案一：大数据集召回数据使用 scroll api</p></li><li><p>方案二：增大 <code>index.max_result_window</code> 默认值</p></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PUT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_settings</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;index.max_result_window&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意：修改这个设置可能需要对集群进行额外的硬件投入，因为处理大量数据时对资源的需求会显著增加。</p><h3 id="深度分页问题" tabindex="-1">深度分页问题 <a class="header-anchor" href="#深度分页问题" aria-label="Permalink to &quot;深度分页问题&quot;">​</a></h3><p>比如这个查询：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;from&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>搜索请求通常跨越多个分片，每个分片必须将其请求的命中内容以及任何先前页面的命中内容加载到内存中。也就是说，每次查询都需要从头开始计数到 <code>from</code> 参数所指定的位置，然后返回从那里开始的 <code>size</code> 数量的文档。</p><p>上述例子中，ES 会将 10011 条数据加载到内存中，然后经过后台处理，再返回最后 10 条我们想要的数据。</p><p>那也就意味着，越往后翻页（也就是深度翻页）我们需要加载的数据量越大，对于翻页较深的页面或大量结果，这些操作会显著增加内存和 CPU 使用率，从而导致性能下降或节点故障。</p><h3 id="form-size-分页原理" tabindex="-1">form size 分页原理 <a class="header-anchor" href="#form-size-分页原理" aria-label="Permalink to &quot;form size 分页原理&quot;">​</a></h3><p>在 Elasticsearch 中，索引被分割成多个分片，这些分片可以分布在不同的服务器上。这种设计的目的是为了提高系统的可伸缩性和容错性。</p><p>因此，Elasticsearch 在处理查询时，会在所有相关的分片上执行查询，并将初步结果集汇总到协调节点。</p><p>协调节点必须处理来自每个分片的部分结果，然后汇总这些数据以形成最终的响应。</p><p>当 <code>from</code> 值较大时，协调节点需要处理和排序的数据量显著增加，从而增加了处理每个查询的负担。</p><h3 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><p>第一：非常适合小型数据集或者大数据集返回 Top N（N &lt;= 10000）结果集的业务场景。</p><p>第二：类似主流 PC 搜索引擎（谷歌、bing、百度、360、sogou等）支持随机跳转分页的业务场景。</p><p><img src="`+h+`" alt="img"></p><h2 id="scroll" tabindex="-1">Scroll <a class="header-anchor" href="#scroll" aria-label="Permalink to &quot;Scroll&quot;">​</a></h2><p>Scroll API 是 Elasticsearch 用来处理大量数据检索的一种机制，它特别适合于需要导出或处理大量结果集的场合。</p><h3 id="核心执行步骤" tabindex="-1">核心执行步骤 <a class="header-anchor" href="#核心执行步骤" aria-label="Permalink to &quot;核心执行步骤&quot;">​</a></h3><h4 id="_1-初始化-scroll-会话" tabindex="-1">1. 初始化 Scroll 会话 <a class="header-anchor" href="#_1-初始化-scroll-会话" aria-label="Permalink to &quot;1. 初始化 Scroll 会话&quot;">​</a></h4><p>首先初始化一个 <code>scroll</code> 会话：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_search</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scroll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1m  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保持滚动窗口1分钟</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;sort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;_doc&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用文档顺序来优化性能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>scroll</code> 参数：</li></ul><p>当你首次发送一个带有 scroll 参数（如 <code>1m</code> 表示每个滚动请求有 1 分钟的有效期）的查询时，Elasticsearch 会创建一个快照（snapshot）或称为上下文（context），这个快照包含了查询时刻的所有匹配文档的信息。</p><p>这个快照会保持一段时间（例如 1 分钟），在这段时间内，即使底层数据发生了改变，快照的内容也保持不变。</p><blockquote><p>使用 <code>_doc</code> 作为排序参数在使用 Scroll API 时的优化意义主要体现在性能和效率上。<code>_doc</code> 是一种内部的排序方式，代表按文档存储在磁盘上的顺序进行排序。这种排序方式最小化了查询操作的开销，因为它遵循了文档在物理存储上的顺序，从而减少了磁盘I/O操作和提高了数据的读取速度。</p><p>当您的需求是遍历整个索引中的所有文档，而不关心它们的返回顺序时，使用 <code>_doc</code> 排序可以显著提升性能。这在执行大规模数据迁移、备份或分析时尤为有用，因为这些操作通常需要处理大量数据而不需要特定的排序。</p></blockquote><h4 id="_2-持续获取数据" tabindex="-1">2. 持续获取数据 <a class="header-anchor" href="#_2-持续获取数据" aria-label="Permalink to &quot;2. 持续获取数据&quot;">​</a></h4><p>然后使用返回的 <code>scroll_id</code> 获取下一批数据：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_search</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scroll</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;scroll&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;scroll_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAxV4WVmpa...&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>随着初次查询的执行，Elasticsearch 会返回第一批结果和一个 <code>scroll_id</code>。你需要使用这个 <code>scroll_id</code> 来请求下一批结果。</p><p>你可以重复使用返回的新 <code>scroll_id</code> 来持续获取后续的数据批次，直到数据集的末尾。</p><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li><p>Scroll 查询在后端占用资源较多，因为它们需要在服务器上持续保持查询状态。因此，使用完成后必须显式清除 scroll 上下文，以释放这些资源。</p></li><li><p>如果未及时清除，scroll 上下文会在其超时后自动过期，但这期间内可能会对集群性能造成影响。</p></li><li><p>Scroll 提供了稳定的数据视图。意味着即使在滚动读取期间索引发生变化（如文档被删除或修改），返回的数据也不会受到影响，保证了数据的一致性。</p></li></ul><h3 id="优缺点-1" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点-1" aria-label="Permalink to &quot;优缺点&quot;">​</a></h3><p><strong>优点</strong>：</p><ul><li><p>能够处理大量数据，不受单次查询大小限制</p></li><li><p>保持搜索上下文的一致性，即使索引在滚动期间发生变化。</p></li></ul><p><strong>缺点</strong>：</p><ul><li>不适合实时用户交互。</li><li>占用资源较多，因为需要在 Elasticsearch 集群中维护状态信息。</li><li>滚动窗口过期后，需要重新开始。</li></ul><h3 id="适用场景-1" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-1" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><ul><li>全量或数据量很大时遍历结果数据，而非分页查询</li><li>官方文档强调：不再建议使用 scroll API 进行深度分页。如果要分页检索超过 Top 10,000+ 结果时，推荐使用：PIT + search_after</li></ul><h2 id="search-after" tabindex="-1">search_after <a class="header-anchor" href="#search-after" aria-label="Permalink to &quot;search_after&quot;">​</a></h2><h3 id="核心执行步骤-1" tabindex="-1">核心执行步骤 <a class="header-anchor" href="#核心执行步骤-1" aria-label="Permalink to &quot;核心执行步骤&quot;">​</a></h3><h4 id="_1-准备初始查询" tabindex="-1">1. 准备初始查询 <a class="header-anchor" href="#_1-准备初始查询" aria-label="Permalink to &quot;1. 准备初始查询&quot;">​</a></h4><p>首先，你需要准备一个查询请求，并指定排序字段，因为 <code>search_after</code> 需要基于一组定义好的排序字段来获取下一页数据。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定每页的文档数量</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者任何其他具体的查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;sort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 主要排序字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通常添加 _id 作为次要排序以确保唯一性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2-执行查询并保存最后一条记录的排序值" tabindex="-1">2. 执行查询并保存最后一条记录的排序值 <a class="header-anchor" href="#_2-执行查询并保存最后一条记录的排序值" aria-label="Permalink to &quot;2. 执行查询并保存最后一条记录的排序值&quot;">​</a></h4><p>执行初始查询后，你需要从返回的最后一条记录中保存排序字段的值。</p><p>这些值将用于后续查询中的 <code>search_after</code> 参数。</p><h4 id="_3-使用-search-after-参数重复地进行后续查询" tabindex="-1">3. 使用 search_after 参数重复地进行后续查询 <a class="header-anchor" href="#_3-使用-search-after-参数重复地进行后续查询" aria-label="Permalink to &quot;3. 使用 search_after 参数重复地进行后续查询&quot;">​</a></h4><p>在收到上一个查询的响应后，使用最后一条记录的排序值进行下一个查询：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;sort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确保至少有一个唯一的排序字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;desc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;search_after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2024-06-20T12:46:29.711Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last_id_in_previous_batch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一批次的最后一个文档的排序字段值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>sort 参数进行排序</li><li>search_after 参数需要传入上一批次查询结果中的最后一个文档的排序字段值</li></ul><p>注意事项：</p><ul><li><strong>排序字段的选择</strong>：确保使用的字段有稳定的增量值，通常是时间戳或数字字段，以避免任何可能的重复或遗漏。</li><li><strong>性能和效率</strong>：<code>search_after</code> 方法依赖于排序，可能需要对所使用的字段进行适当的索引优化。</li><li><strong>唯一性保证</strong>：通常结合 <code>_id</code> 字段使用，以确保记录的唯一性，特别是在基于非唯一字段排序时。</li></ul><h3 id="search-after-查询原理" tabindex="-1">search_after 查询原理 <a class="header-anchor" href="#search-after-查询原理" aria-label="Permalink to &quot;search_after 查询原理&quot;">​</a></h3><p><code>search_after</code> 的核心是使用上一页中最后一条记录的排序字段值来开始检索下一页的数据。这种方法通过跳过已经检索过的数据，直接从上一次的结束点开始，使得数据检索更加高效。</p><p>前置条件：使用 <code>search_after</code> 要求所有请求都使用相同的排序规则，以确保数据的连续性和一致性。不同的排序会导致数据的不一致性，从而影响翻页的准确性。</p><h3 id="tiebreaker" tabindex="-1">Tiebreaker <a class="header-anchor" href="#tiebreaker" aria-label="Permalink to &quot;Tiebreaker&quot;">​</a></h3><p><code>search_after</code> 通常用于实现深度分页。为了确保分页的一致性和精确的数据排序，特别是在多个文档可能具有相同排序值的场景中，通常需要一个额外的排序字段作为 tiebreaker（决定因子）。</p><p>通常，<code>_doc</code> ID 用作 tiebreaker，因为它保证了每个文档的唯一性和稳定的排序顺序，即便是在多个文档有相同的主排序字段时。在实际应用中，你应该在 <code>sort</code> 参数中包括 <code>_id</code> 或其他唯一字段作为 tiebreaker。</p><p>在上面的例子中，<code>_id</code> 作为 tiebreaker 来确保即使有多个文档的 <code>timestamp</code> 相同，结果的顺序也是一致和可预测的。</p><h3 id="point-in-time" tabindex="-1">Point in Time <a class="header-anchor" href="#point-in-time" aria-label="Permalink to &quot;Point in Time&quot;">​</a></h3><p>PIT（Point-In-Time）是 Elasticsearch 中的一个特性，它允许用户创建一个查询的快照。这个快照代表了在特定时间点上索引的状态，确保在使用如 <code>search_after</code> 这类深度分页技术时，即便索引数据在查询过程中发生变更（如文档被添加、删除或修改），返回的结果依然是一致的。这类似于数据库中的事务隔离，允许进行一致的读取而不受并发写入操作的影响。</p><h4 id="没有-pit" tabindex="-1">没有 PIT <a class="header-anchor" href="#没有-pit" aria-label="Permalink to &quot;没有 PIT&quot;">​</a></h4><p>如果不使用 PIT，<code>search_after</code> 依然可以正常工作，但后续查询可能会受到并发数据写入（如插入、删除、更新）的影响，这可能导致数据重复或漏读。</p><h4 id="使用-pit" tabindex="-1">使用 PIT <a class="header-anchor" href="#使用-pit" aria-label="Permalink to &quot;使用 PIT&quot;">​</a></h4><p><strong>数据视图稳定性</strong>：PIT 为搜索创建了一个快照，确保在 PIT 生命周期内，搜索结果不受并发更新的影响。这意味着即使数据发生变化，查询的上下文仍然是创建 PIT 时的状态。</p><p><strong>一致性</strong>：PIT 保持查询的上下文不变，使得使用 <code>search_after</code> 进行多次翻页时，每页返回的数据都是基于同一数据快照的。这在多用户环境中尤其重要，因为它防止了用户看到因并发数据修改而导致的不一致结果。</p><h3 id="结合-pit-和-search-after-的使用实例" tabindex="-1">结合 PIT 和 search_after 的使用实例 <a class="header-anchor" href="#结合-pit-和-search-after-的使用实例" aria-label="Permalink to &quot;结合 PIT 和 search_after 的使用实例&quot;">​</a></h3><h4 id="_1-创建-point-in-time-pit" tabindex="-1">1. 创建 Point-in-Time (PIT) <a class="header-anchor" href="#_1-创建-point-in-time-pit" aria-label="Permalink to &quot;1. 创建 Point-in-Time (PIT)&quot;">​</a></h4><p>首先，你需要创建一个PIT来获取一个稳定的视图，这样即使数据更新，查询结果也不会改变。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_pit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keep_alive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1m</span></span></code></pre></div><p>假设返回的响应是这样的：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;46ToAwMDaWR5BXV1ZXJ5AndB...&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2-初始查询与-search-after" tabindex="-1">2. 初始查询与 search_after <a class="header-anchor" href="#_2-初始查询与-search-after" aria-label="Permalink to &quot;2. 初始查询与 search_after&quot;">​</a></h4><p>进行初始查询时，不使用 <code>search_after</code>，而是设置排序规则，并将 PIT ID 包括在请求中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;sort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_doc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;pit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;46ToAwMDaWR5BXV1ZXJ5AndB...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;keep_alive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1m&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>注意</strong>：</p><ul><li>使用 PIT 进行检索时，通常不需要再指定具体的索引名称。PIT 本身就是基于特定索引或索引的集合创建的，所以查询时只需引用 PIT ID 即可。</li><li>如果在使用 PIT 时仍然指定了索引名称，这通常会导致请求失败，并返回一个错误。</li><li>因为 PIT 与特定的索引状态相关联，指定索引可能会导致冲突或查询逻辑混乱，因为 ES 不确定应该优先考虑哪个索引指示——是 PIT 中封装的索引状态还是请求中显式指定的索引。</li></ul><h4 id="_3-使用-search-after-进行后续查询" tabindex="-1">3. 使用 search_after 进行后续查询 <a class="header-anchor" href="#_3-使用-search-after-进行后续查询" aria-label="Permalink to &quot;3. 使用 search_after 进行后续查询&quot;">​</a></h4><p>在获取到初始查询的结果后，从最后一条记录中提取出排序值，用于 <code>search_after</code> 参数。</p><p>假设初始查询的最后一条记录的排序值是 <code>[&quot;2024-06-21T07:46:54.696Z&quot;, 142]</code>，接下来的查询将使用这个值来获取下一页数据。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;sort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_doc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;search_after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2024-06-21T07:46:54.696Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">142</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;pit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;46ToAwMDaWR5BXV1ZXJ5AndB...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;keep_alive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1m&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_4-关闭-pit" tabindex="-1">4. 关闭 PIT <a class="header-anchor" href="#_4-关闭-pit" aria-label="Permalink to &quot;4. 关闭 PIT&quot;">​</a></h4><p>完成所有分页查询后，你需要关闭PIT，以释放服务器上的资源。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DELETE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_pit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;46ToAwMDaWR5BXV1ZXJ5AndB...&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个流程确保了查询的一致性，即使在数据频繁变化的环境中也能保持结果的稳定。每次查询都应根据需要调整 <code>keep_alive</code> 参数，以保持 PIT 的有效性直到查询完成。</p><h3 id="优缺点-2" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点-2" aria-label="Permalink to &quot;优缺点&quot;">​</a></h3><p><strong>优点</strong>：不严格受制于 <code>max_result_window</code>，单次请求值不能超过 <code>max_result_window</code>，但总翻页结果集可以超过，所以可以无限制往后翻页。</p><p><strong>缺点</strong>：不能随机访问任意页，必须按顺序访问。</p><h3 id="适用场景-2" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-2" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><p>类似：今日头条分页搜索 <a href="https://m.toutiao.com/search" target="_blank" rel="noreferrer">https://m.toutiao.com/search</a></p><p>不支持随机翻页，更适合手机端应用的场景。</p><p><img src="`+e+'" alt="img"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>From+ size：需要随机跳转不同分页（类似主流搜索引擎）、Top 10000 条数据之内分页显示场景。</li><li>Scroll：需要遍历全量数据场景 。</li><li>search_after：仅需要向后翻页的场景及超过Top 10000 数据需要分页场景。</li><li>max_result_window：调大治标不治本，不建议调过大。</li><li>PIT：本质是视图。</li></ul><p><img src="'+p+'" alt="img"></p><p>本文说法有不严谨的地方，以官方文档为准。</p><p>参考：</p><ol><li><a href="https://coralogix.com/log-analytics-blog/how-to-optimize-your-elasticsearch-queries-using-pagination" target="_blank" rel="noreferrer">https://coralogix.com/log-analytics-blog/how-to-optimize-your-elasticsearch-queries-using-pagination</a></li><li><a href="https://www.javatpoint.com/elasticsearch-pagination" target="_blank" rel="noreferrer">https://www.javatpoint.com/elasticsearch-pagination</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html" target="_blank" rel="noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/paginate-search-results.html</a></li></ol>',127)]))}const F=i(k,[["render",r]]);export{y as __pageData,F as default};
