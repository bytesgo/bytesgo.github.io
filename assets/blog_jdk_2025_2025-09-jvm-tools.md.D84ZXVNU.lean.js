import{_ as i,o as a,c as l,a6 as t}from"./chunks/framework.BkI9ovSD.js";const c=JSON.parse('{"title":"JVM分析常用工具","description":"","frontmatter":{"title":"JVM分析常用工具","date":"2025-09-16T00:00:00.000Z","author":"leeyazhou","tags":["jdk","jvm"],"categories":"jdk"},"headers":[],"relativePath":"blog/jdk/2025/2025-09-jvm-tools.md","filePath":"blog/jdk/2025/2025-09-jvm-tools.md","lastUpdated":1758000873000}'),e={name:"blog/jdk/2025/2025-09-jvm-tools.md"};function p(h,s,n,k,d,o){return a(),l("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t(`<h2 id="jvm分析常用工具" tabindex="-1">JVM分析常用工具 <a class="header-anchor" href="#jvm分析常用工具" aria-label="Permalink to &quot;JVM分析常用工具&quot;">​</a></h2><h3 id="jvm堆内存分析教程" tabindex="-1">JVM堆内存分析教程 <a class="header-anchor" href="#jvm堆内存分析教程" aria-label="Permalink to &quot;JVM堆内存分析教程&quot;">​</a></h3><p>JVM堆内存是Java应用中最重要的内存区域之一，主要用于存放对象实例。堆内存分析可以帮助我们定位内存泄漏、内存溢出等问题。下面介绍常用的堆内存分析方法和工具。</p><h4 id="_1-导出堆内存快照-heap-dump" tabindex="-1">1. 导出堆内存快照（Heap Dump） <a class="header-anchor" href="#_1-导出堆内存快照-heap-dump" aria-label="Permalink to &quot;1. 导出堆内存快照（Heap Dump）&quot;">​</a></h4><p>可以通过以下方式导出堆内存快照：</p><ul><li><p>使用jmap命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jmap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dump:live,format=b,file=heapdump.hprof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>使用JVM参数自动导出（如发生OOM）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:+HeapDumpOnOutOfMemoryError</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:HeapDumpPath=/usr/local/heapdump.hprof</span></span></code></pre></div></li></ul><h4 id="_2-常用堆分析工具" tabindex="-1">2. 常用堆分析工具 <a class="header-anchor" href="#_2-常用堆分析工具" aria-label="Permalink to &quot;2. 常用堆分析工具&quot;">​</a></h4><ul><li><p><strong>MAT（Memory Analyzer Tool）</strong><br> Eclipse出品的堆分析工具，支持分析大文件，查找内存泄漏、查看对象引用关系等。</p></li><li><p><strong>JProfiler</strong><br> 商业产品，支持插件扩展，功能丰富。这个工具适合高级用户，需要掌握JVM的内存管理机制。</p></li><li><p><strong>VisualVM</strong><br> 集成了堆快照分析、内存监控、GC分析等功能，支持插件扩展。</p></li><li><p><strong>jhat</strong><br> JDK自带的堆分析工具，适合简单分析。</p></li></ul><h4 id="_3-mat分析堆快照示例" tabindex="-1">3. MAT分析堆快照示例 <a class="header-anchor" href="#_3-mat分析堆快照示例" aria-label="Permalink to &quot;3. MAT分析堆快照示例&quot;">​</a></h4><ol><li>打开MAT，选择<code>File -&gt; Open Heap Dump</code>，加载<code>.hprof</code>文件。</li><li>使用<code>Dominator Tree</code>查看内存占用最多的对象。</li><li>通过<code>Histogram</code>查看各类对象数量和大小。</li><li>利用<code>Leak Suspects Report</code>自动分析潜在的内存泄漏。</li></ol><h4 id="_4-常见分析思路" tabindex="-1">4. 常见分析思路 <a class="header-anchor" href="#_4-常见分析思路" aria-label="Permalink to &quot;4. 常见分析思路&quot;">​</a></h4><ul><li>查找大对象、异常增长的对象类型。</li><li>分析对象引用链，定位无法回收的原因。</li><li>结合代码和业务场景，排查内存泄漏点。</li></ul><h4 id="_5-参考命令" tabindex="-1">5. 参考命令 <a class="header-anchor" href="#_5-参考命令" aria-label="Permalink to &quot;5. 参考命令&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看JVM进程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导出堆快照</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jmap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dump:format=b,file=heapdump.hprof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 分析堆快照（MAT/VisualVM等工具打开heapdump.hprof文件）</span></span></code></pre></div><h4 id="_6-jmap-其他常用用法" tabindex="-1">6. jmap 其他常用用法 <a class="header-anchor" href="#_6-jmap-其他常用用法" aria-label="Permalink to &quot;6. jmap 其他常用用法&quot;">​</a></h4><p><code>jmap</code> 不仅可以导出堆快照，还支持多种内存相关操作，常见用法如下：</p><ul><li><p>查看堆内存概要信息：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jmap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -heap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>查看对象实例统计（类似 MAT 的 Histogram）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jmap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -histo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>查看类的详细信息（包括类加载器）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jmap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -clstats</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>查看 JVM 内存映射信息：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jmap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -mem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>查看 finalizer 队列中的对象：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jmap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -finalizerinfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li></ul><blockquote><p>注意：部分命令在不同 JDK 版本下可能略有差异，具体可通过 <code>jmap -help</code> 查看所有支持的参数。</p></blockquote><h4 id="_7-jstack-常用用法" tabindex="-1">7. jstack 常用用法 <a class="header-anchor" href="#_7-jstack-常用用法" aria-label="Permalink to &quot;7. jstack 常用用法&quot;">​</a></h4><p><code>jstack</code> 是JDK自带的线程堆栈分析工具，常用于排查线程死锁、阻塞、CPU飙高等问题。常见用法如下：</p><ul><li><p>查看指定Java进程的线程堆栈信息：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>将线程堆栈信息输出到文件：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> thread_dump.txt</span></span></code></pre></div></li><li><p>多次采集线程堆栈（适合分析线程状态变化）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1..5}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jstack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> thread_dump_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.txt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div></li><li><p>分析死锁：</p><p><code>jstack</code> 输出中如有 <code>Found one Java-level deadlock:</code> 字样，即表示检测到死锁。</p></li></ul><blockquote><p>注意：</p><ul><li>建议用 root 或与目标进程相同用户执行。</li><li>对于高并发或生产环境，建议多次采集分析。</li><li>也可结合 <code>jps</code> 命令查找目标进程PID。</li></ul></blockquote><h2 id="更多参数可通过-jstack-help-查看。" tabindex="-1">更多参数可通过 <code>jstack -help</code> 查看。 <a class="header-anchor" href="#更多参数可通过-jstack-help-查看。" aria-label="Permalink to &quot;更多参数可通过 \`jstack -help\` 查看。&quot;">​</a></h2><p>如需更深入的堆内存分析，可结合GC日志、线程Dump等信息综合排查。</p>`,24)]))}const g=i(e,[["render",p]]);export{c as __pageData,g as default};
