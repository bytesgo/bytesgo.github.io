import{_ as n,o as l,c as p,a6 as s,f as e,g as o,w as i,a as c,L as r}from"./chunks/framework.BkI9ovSD.js";const k=JSON.parse('{"title":"JSTL和EL表达式","description":"","frontmatter":{"title":"JSTL和EL表达式","date":"2020-04-06T00:00:00.000Z","tags":["JSP"],"categories":["JavaWeb"]},"headers":[],"relativePath":"blog/JavaWeb/JSTL和EL表达式.md","filePath":"blog/JavaWeb/JSTL和EL表达式.md","lastUpdated":1742889557000}'),u={name:"blog/JavaWeb/JSTL和EL表达式.md"};function d(g,a,h,b,q,v){const t=r("font");return l(),p("div",{"data-pagefind-body":!0},[a[2]||(a[2]=s('<h1 id="jstl和el表达式" tabindex="-1">JSTL和EL表达式 <a class="header-anchor" href="#jstl和el表达式" aria-label="Permalink to &quot;JSTL和EL表达式&quot;">​</a></h1><h2 id="el表达式简介" tabindex="-1">EL表达式简介 <a class="header-anchor" href="#el表达式简介" aria-label="Permalink to &quot;EL表达式简介&quot;">​</a></h2><ul><li><strong>EL</strong>（Expression Language） 是<strong>为了使JSP写起来更加简单</strong>。它提供了在 JSP 中<strong>简化表达式</strong>的方法，让Jsp的代码更加简化。</li></ul><h2 id="el表达式能干什么" tabindex="-1">EL表达式能干什么 <a class="header-anchor" href="#el表达式能干什么" aria-label="Permalink to &quot;EL表达式能干什么&quot;">​</a></h2><ul><li><p>可以从域对象（request、session、application、pageContext）中取得数据</p></li><li><p>如果4个作用域都有同一个（同名）属性怎么办？</p><p>EL会按照从高到低的<strong>优先级顺序</strong>获取数据： <strong>pageContext&gt;request&gt;session&gt;application</strong></p></li></ul><h2 id="el表达式取值" tabindex="-1">EL表达式取值 <a class="header-anchor" href="#el表达式取值" aria-label="Permalink to &quot;EL表达式取值&quot;">​</a></h2><ul><li><p>不同版本的tomcat是否默认开启对EL表达式的支持，是不一定的。所以为了保证EL表达式能够正常使用，需要在<code>&lt;%@page</code> 标签里加上<code>isELIgnored=&quot;false&quot;</code></p></li><li><p>使用EL表达式，非常简单，比如使用JSTL输出要写成</p></li></ul><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;c:out value=&quot;${name}&quot; /&gt;</span></span></code></pre></div><ul><li>但是用EL只需要</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>${name}</span></span></code></pre></div><h2 id="el表达式语法结构" tabindex="-1">EL表达式语法结构 <a class="header-anchor" href="#el表达式语法结构" aria-label="Permalink to &quot;EL表达式语法结构&quot;">​</a></h2><ul><li><code>${expression}</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>${requestScope.key}</span></span>\n<span class="line"><span>${pageContextScope.key}</span></span>\n<span class="line"><span>${sessionScope.key}</span></span>\n<span class="line"><span>${applicationScope.key}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>${key} 如果不指定域，那么会依次从域中搜索key属性</span></span></code></pre></div><ul><li><code>${username}</code> 取得request里面名字为username的属性值（如果不存在返回空字符串）</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>${pageContext.request.contextPath} 返回根路径</span></span>\n<span class="line"><span>${10+89} 支持放置表达式运算</span></span>\n<span class="line"><span>${age&gt;10} 支持做基础判断</span></span>\n<span class="line"><span>${empty user} 判断是否是null对象</span></span></code></pre></div><h2 id="jstl简介" tabindex="-1">JSTL简介 <a class="header-anchor" href="#jstl简介" aria-label="Permalink to &quot;JSTL简介&quot;">​</a></h2><ul><li><p>JSTL：<strong>JSP Standard Tag Library</strong>标准标签库</p><p>什么是标签库？可以使用一些具有<strong>自定义功能</strong>的标签。</p></li><li><p>JSTL允许开发人员可以像使用HTML标签那样在JSP中开发Java功能</p></li><li><p>JSTL库有core、i18n、fmt、sql 等等</p></li><li><p>i18n和sql用的很少，core和fmt在工作中会用到</p></li><li><p>JSTL和EL表达式是合作关系，一起使用可以让JSP写起来更加简单优雅</p></li></ul><h2 id="如何使用jstl" tabindex="-1">如何使用JSTL <a class="header-anchor" href="#如何使用jstl" aria-label="Permalink to &quot;如何使用JSTL&quot;">​</a></h2><ol><li><p>导入jar包</p></li><li><p>引入jstl对应的标签库 taglib</p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</span></span></code></pre></div><p>prefix=&quot;c&quot; 表示后续的标签使用都会以 <strong>&lt;c:</strong> 开头</p></li></ol><h3 id="跟储存相关的标签-set、out、remove" tabindex="-1">跟储存相关的标签（set、out、remove） <a class="header-anchor" href="#跟储存相关的标签-set、out、remove" aria-label="Permalink to &quot;跟储存相关的标签（set、out、remove）&quot;">​</a></h3><ul><li><p>在作用域request中设置name,相当于<code>&lt;%request.setAttribute(&quot;name&quot;,&quot;gareen&quot;)%&gt;</code></p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;c:set var=&quot;name&quot; value=&quot;${&#39;gareen&#39;}&quot; scope=&quot;request&quot; /&gt;</span></span></code></pre></div></li><li><p><code>&lt;%=request.getAttribute(&quot;name&quot;)%&gt;</code>可以写成：</p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;c:out value=&quot;${name}&quot; /&gt;</span></span></code></pre></div></li><li><p>在作用域request中删掉name,相当于<code>&lt;%request.removeAttribute(&quot;name&quot;)%&gt;</code></p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;c:remove var=&quot;name&quot; scope=&quot;request&quot; /&gt;</span></span></code></pre></div></li></ul><h3 id="条件标签-if、choose" tabindex="-1">条件标签（if、choose） <a class="header-anchor" href="#条件标签-if、choose" aria-label="Permalink to &quot;条件标签（if、choose）&quot;">​</a></h3><ul><li><p>JSTL通过<code>&lt;c:if tesr=&quot;&quot;</code>进行条件判断</p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;c:if test=&quot;${age&gt;=19 }&quot;&gt;</span></span>\n<span class="line"><span>&lt;font color=&quot;green&quot;&gt;你是成年人&lt;/font&gt;</span></span>\n<span class="line"><span>&lt;/c:if&gt;</span></span></code></pre></div></li><li><p>但是 JSTL 没有<code>&lt;c:else</code>，所以常用的办法是在<code>&lt;c:if</code>的条件里取反，用<code>&lt;c:if test=&quot;!&quot;</code>来表示else</p></li><li><p>配合if使用的还有通过<strong>empty</strong>进行为空判断</p></li><li><p><strong>empty</strong>可以判断对象是否为null,字符串长度是否为0，集合长度是否为0</p></li><li><p>虽然JSTL没有提供else标签，但是提供了一个具有else功能的标签<code>choose</code></p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;c:choose&gt;</span></span>\n<span class="line"><span>	&lt;c:when test=&quot;${age&gt;=19 }&quot;&gt;</span></span>\n<span class="line"><span>		&lt;font color=&quot;green&quot;&gt;你是成年人&lt;/font&gt;</span></span>\n<span class="line"><span>	&lt;/c:when&gt;</span></span>\n<span class="line"><span>	&lt;c:otherwise&gt;</span></span>\n<span class="line"><span>		&lt;font color=&quot;red&quot;&gt;未成年&lt;/font&gt;</span></span>\n<span class="line"><span>	&lt;/c:otherwise&gt;</span></span>\n<span class="line"><span>&lt;/c:choose&gt;</span></span></code></pre></div></li></ul><h3 id="循环标签" tabindex="-1">循环标签 <a class="header-anchor" href="#循环标签" aria-label="Permalink to &quot;循环标签&quot;">​</a></h3>',24)),e("ul",null,[a[1]||(a[1]=s('<li><p>可以在JSP中使用for循环，但是其可读性很差。 借助JSTL的<code>c:forEach</code>标签，可以很好的改善可读性。</p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;c:forEach items=&quot;${lists }&quot; var=&quot;user&quot;&gt;</span></span>\n<span class="line"><span>	${user.username }:${user.age } &lt;br/&gt;</span></span>\n<span class="line"><span>&lt;/c:forEach&gt;</span></span>\n<span class="line"><span>&lt;c:forEach items=&quot;${map }&quot; var=&quot;kv&quot;&gt;</span></span>\n<span class="line"><span>	${kv.key }:${kv.value } &lt;br/&gt;</span></span>\n<span class="line"><span>&lt;/c:forEach&gt;</span></span></code></pre></div></li>',1)),e("li",null,[o(t,{color:"red"},{default:i(()=>a[0]||(a[0]=[c("**一定要给属性提供get方法！**")])),_:1})])])])}const f=n(u,[["render",d]]);export{k as __pageData,f as default};
