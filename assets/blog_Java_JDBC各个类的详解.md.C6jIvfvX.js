import{_ as i,o as a,c as t,a6 as n}from"./chunks/framework.BkI9ovSD.js";const l="/assets/284.DKPuw9zT.png",c=JSON.parse('{"title":"JDBC 各个类的详解","description":"","frontmatter":{"title":"JDBC 各个类的详解","date":"2020-08-02T00:00:00.000Z","tags":["Java","JDBC"],"categories":["Java"]},"headers":[],"relativePath":"blog/Java/JDBC各个类的详解.md","filePath":"blog/Java/JDBC各个类的详解.md","lastUpdated":1734691949000}'),e={name:"blog/Java/JDBC各个类的详解.md"};function p(h,s,k,r,d,o){return a(),t("div",{"data-pagefind-body":!0},s[0]||(s[0]=[n('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Java DateBase Connectivity （Java数据库连接， Java语言操作数据库）</p><p>JDBC <strong>本质</strong>是SUN公司定义的一套操作所有关系型数据库的规则，即 <strong>接口</strong>。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口编程，但真正执行的代码是 <strong>驱动jar包中的实现类</strong>。</p></div><h1 id="jdbc各个类的详解" tabindex="-1">JDBC各个类的详解 <a class="header-anchor" href="#jdbc各个类的详解" aria-label="Permalink to &quot;JDBC各个类的详解&quot;">​</a></h1><h2 id="一、快速入门" tabindex="-1">一、快速入门 <a class="header-anchor" href="#一、快速入门" aria-label="Permalink to &quot;一、快速入门&quot;">​</a></h2><h3 id="我们为什么要使用jdbc" tabindex="-1">我们为什么要使用JDBC <a class="header-anchor" href="#我们为什么要使用jdbc" aria-label="Permalink to &quot;我们为什么要使用JDBC&quot;">​</a></h3><p><img src="'+l+`" alt="284"></p><h3 id="使用jdbc开发要使用的包" tabindex="-1">使用JDBC开发要使用的包 <a class="header-anchor" href="#使用jdbc开发要使用的包" aria-label="Permalink to &quot;使用JDBC开发要使用的包&quot;">​</a></h3><ul><li><p><strong>java.sql</strong>：所有与 JDBC 访问数据库相关的接口和类</p></li><li><p><strong>javax.sql</strong>：数据库扩展包，提供数据库额外的功能。如：连接池</p></li><li><p><strong>数据库的驱动</strong>：由各大数据库厂商提供，需要额外去下载，是<strong>实现 JDBC 接口的一些类</strong></p></li></ul><h3 id="具体步骤" tabindex="-1">具体步骤 <a class="header-anchor" href="#具体步骤" aria-label="Permalink to &quot;具体步骤&quot;">​</a></h3><ol><li><p>导入驱动jar包 <code>mysql-connector-java-5.1.37-bin.jar</code></p><ol><li><p>复制 <code>mysql-connector-java-5.1.37-bin.jar</code> 文件到项目的 <code>libs</code> 目录下</p></li><li><p>项目文件夹 右键 --&gt; <code>Add As Library</code></p></li></ol></li><li><p>注册驱动（让程序知道导入的是哪一个版本的jar包），<code>Class.forName</code>（数据库驱动实现类）</p></li><li><p>获取数据库连接对象 <strong>Connection</strong> （本地java代码和数据库之间的一个桥梁对象）</p></li><li><p>定义 sql 语句</p></li><li><p>获取执行 sql 语句的对象 <strong>Statement</strong> （因为 <strong>Connection</strong> 不能直接执行）</p></li><li><p>执行 sql，接受返回结果</p></li><li><p>处理结果</p></li><li><p>释放资源（避免内存泄露）</p></li></ol><h3 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.sql.Connection;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.sql.DriverManager;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.sql.Statement;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * JDBC快速入门</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JdbcDemo1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //1. 导入所使用的数据库相对应的驱动jar包</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //2. 注册驱动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	        /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	        	Class.forName()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">					装载一个类并且对其进行实例化的操作，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">					装载过程中使用到的类加载器是当前类。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //3. 获取数据库连接对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Connection conn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DriverManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jdbc:mysql://localhost:3306/db3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				DriverManager：驱动管理对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				Connection：数据库连接对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				Java DriverManager.getConnection() 方法用于获得试图建立到指定数据库 URL 的连接。 里面的参数为：数据库的url、用户名、密码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //4. 定义sql语句</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String sql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;update account set balance = 500 where id = 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //5. 获取一个可执行的sql的对象 Statement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Statement stmt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createStatement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	        /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				Statement：执行sql的对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //6. execute执行sql语句</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sql);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //7. 处理结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //8. 按顺序释放资源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="二、jdbc-各个类的功能详解" tabindex="-1">二、JDBC 各个类的功能详解 <a class="header-anchor" href="#二、jdbc-各个类的功能详解" aria-label="Permalink to &quot;二、JDBC 各个类的功能详解&quot;">​</a></h2><h3 id="drivermanager-驱动管理对象" tabindex="-1">DriverManager：驱动管理对象 <a class="header-anchor" href="#drivermanager-驱动管理对象" aria-label="Permalink to &quot;DriverManager：驱动管理对象&quot;">​</a></h3><h4 id="注册驱动-告诉程序该使用哪一个数据库驱动-jar" tabindex="-1"><strong>注册驱动</strong>：告诉程序该使用哪一个数据库驱动 jar <a class="header-anchor" href="#注册驱动-告诉程序该使用哪一个数据库驱动-jar" aria-label="Permalink to &quot;**注册驱动**：告诉程序该使用哪一个数据库驱动 jar&quot;">​</a></h4><p>驱动包里实现注册驱动的静态方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> registerDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Driver driver);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//注册与给定的驱动程序 DriverManager 。</span></span></code></pre></div><p>而写代码时我们使用的是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>有一些类在加载进内存的时候会自动执行类中的某些方法。</strong></p><p>通过查看源码我们可以发现：在 <code>com.mysql.jdbc.Driver</code> 类中存在<strong>静态代码块</strong>，此代码块实现了<strong>DriverManager</strong> 中的方法，我们使用的写法只是更加简单而已：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        java.sql.DriverManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SQLException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Can&#39;t register driver!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>MySQL 5.* 版本开始，<strong>注册驱动</strong>的步骤可以省去不写，因为驱动包会自动帮我们注册驱动。</p><p>当然你写了也没事，注意路径别写错就行。</p></div><h4 id="获取数据库连接" tabindex="-1"><strong>获取数据库连接</strong> <a class="header-anchor" href="#获取数据库连接" aria-label="Permalink to &quot;**获取数据库连接**&quot;">​</a></h4><p>驱动包里的静态方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Commection </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String url, String user, String password);</span></span></code></pre></div><p>三个参数：</p><ul><li><p><strong>url</strong>：指定连接的路径</p><ul><li>语法：<strong>jdbc:mysql://ip地址(域名):端口号/数据库名称</strong></li><li>例子：jdbc:mysql://localhost : 3306/db3</li><li>细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则ip地址和端口号可以省略不写，即url可以简写为：jdbc:mysql:///数据库名称</li></ul></li><li><p><strong>user</strong>：用户名</p></li><li><p><strong>password</strong>：密码</p></li></ul><h3 id="connection-数据库连接对象" tabindex="-1">Connection：数据库连接对象 <a class="header-anchor" href="#connection-数据库连接对象" aria-label="Permalink to &quot;Connection：数据库连接对象&quot;">​</a></h3><h4 id="获取执行-sql-的对象" tabindex="-1">获取执行 sql 的对象 <a class="header-anchor" href="#获取执行-sql-的对象" aria-label="Permalink to &quot;获取执行 sql 的对象&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Statement </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createStatement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PrepareStatement </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepareStatement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String sql);</span></span></code></pre></div><h4 id="管理事务" tabindex="-1">管理事务 <a class="header-anchor" href="#管理事务" aria-label="Permalink to &quot;管理事务&quot;">​</a></h4><ul><li><p>开启事务：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setAutoCommit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> autoCommit);  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//调用该方法设置参数为false，即开启事务</span></span></code></pre></div></li><li><p>提交事务：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( );</span></span></code></pre></div></li><li><p>回滚事物：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rollback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( );</span></span></code></pre></div></li></ul><h3 id="statement-执行sql的对象" tabindex="-1">Statement：执行sql的对象 <a class="header-anchor" href="#statement-执行sql的对象" aria-label="Permalink to &quot;Statement：执行sql的对象&quot;">​</a></h3><h4 id="执行-sql" tabindex="-1">执行 sql <a class="header-anchor" href="#执行-sql" aria-label="Permalink to &quot;执行 sql&quot;">​</a></h4><ul><li><p>可以执行任意的 sql 的方法。但使用并不多，了解即可：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String sql);</span></span></code></pre></div></li><li><p>可以执行DML（insert、update、dalete）语句、DDL（create、alter、drop）语句的方法。</p><p>其返回值代表的是影响的行数，可以通过这个影响的行数来判断DML语句是否执行成功 ，返回值 &gt;0 则执行成功，反之，则执行失败：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> executeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String sql);</span></span></code></pre></div></li></ul><ul><li><p>可以执行DQL语句（select）语句的方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ResultSet </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String sql);</span></span></code></pre></div></li></ul><h3 id="resultset-结果集对象-封装查询结果" tabindex="-1">ResultSet：结果集对象，封装查询结果 <a class="header-anchor" href="#resultset-结果集对象-封装查询结果" aria-label="Permalink to &quot;ResultSet：结果集对象，封装查询结果&quot;">​</a></h3><ul><li><p>游标向下移动一行，判断当前行是否是最后一行末尾（是否有数据），如果是，则返回false，如果不是则返回true：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li><li><p>获取数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getXxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(参数)</span></span></code></pre></div><ul><li>Xxx：代表数据类型 如：int getInt()，String getString()</li><li>参数： <ol><li><strong>int</strong>: 代表表中列的编号，从 <strong>1</strong> 开始 如：getString(1)</li><li><strong>String</strong>: 代表列名称， 如：getDouble(&quot;balance&quot;)</li></ol></li></ul></li><li><p>使用步骤：</p><ol><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据</li></ol></li></ul><h3 id="preparedstatement-执行-sql-的对象" tabindex="-1">PreparedStatement：执行 sql 的对象 <a class="header-anchor" href="#preparedstatement-执行-sql-的对象" aria-label="Permalink to &quot;PreparedStatement：执行 sql 的对象&quot;">​</a></h3><p><strong>PreparedStatement</strong> 是 <strong>Statement</strong>的子接口，但功能更加强大</p><h4 id="sql-注入的问题" tabindex="-1">sql 注入的问题 <a class="header-anchor" href="#sql-注入的问题" aria-label="Permalink to &quot;sql 注入的问题&quot;">​</a></h4><p>在拼接sql时，有一些sql特殊关键字参与字符串的拼接，会造成安全问题！</p><p>随便输入用户，输入密码：<code>a&#39; or &#39;a&#39; = &#39;a</code> 即可实现成功登录：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;fhdsjkf&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- password将永远为true</span></span></code></pre></div><h4 id="解决-sql-注入的问题-使用-preparaedstatement-对象" tabindex="-1">解决 sql 注入的问题：使用 PreparaedStatement 对象 <a class="header-anchor" href="#解决-sql-注入的问题-使用-preparaedstatement-对象" aria-label="Permalink to &quot;解决 sql 注入的问题：使用 PreparaedStatement 对象&quot;">​</a></h4><ol><li><p>预编译SQL：参数使用 <code>?</code> 作为占位符</p></li><li><p>步骤：</p></li><li><p>导入jar包 <code>mysql-connector-java-5.1.37-bin.jar</code></p></li><li><p>注册驱动</p></li><li><p>获取数据库连接对象 <code>Connection</code></p></li><li><p>定义sql：</p><p>注意：sql的参数使用 <code>?</code> 作为占位符。如：</p></li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ?;</span></span></code></pre></div><ol start="5"><li><p>获取执行sql语句的对象 <code>PreparedStatement Connection.prepareStatement(String sql)</code></p></li><li><p>给 <code>?</code> 赋值，需要两个参数：</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setXxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(参数1，参数2);</span></span></code></pre></div><p>参数1：<code>?</code> 的位置编号，从1开始计数</p><p>参数2：<code>?</code> 的值</p><ol start="7"><li><p>执行sql，接受返回结果，不需要传递sql语句。</p></li><li><p>处理结果</p></li><li><p>释放资源</p></li></ol><p>一般我们都会使用 <code>PreparedStatement</code> 来完成增删改查的所有操作，因为这样可以<strong>防止SQL注入，而且效率更高</strong>。</p>`,53)]))}const E=i(e,[["render",p]]);export{c as __pageData,E as default};
