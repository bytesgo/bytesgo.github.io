import{_ as i,o as a,c as n,a6 as l}from"./chunks/framework.BkI9ovSD.js";const t="/assets/640-1232132133.4V0hweEi.png",e="/assets/640-1702279376937-3.DrPZ_oP4.png",p="/assets/640-1702279376937-4.DiKFbuE4.png",h="/assets/640-1702279376938-5.DyZ_ijjC.png",r="/assets/640-1702279376938-6.CuiedEQW.png",o="/assets/640-1702279376938-7.BMK4Zeyo.png",k="/assets/640-1702279376938-8.B72ily9K.png",d="/assets/640-1702279376938-9.CLmlqEzb.png",g="/assets/640-1702279376938-10.DKLlMh9O.png",c="/assets/640-1702279376938-11.CRgX7xK8.png",E="/assets/640-1702279376938-12.CW16xPId.png",u="/assets/640-1702279376939-13.CfDMIKLf.png",x="/assets/640-1702279376939-14.esSnF5wJ.png",J=JSON.parse('{"title":"定时任务框架XXL-Job","description":"","frontmatter":{"title":"定时任务框架XXL-Job","date":"2023-12-11T00:00:00.000Z","tags":["XXL-Job","定时任务"],"categories":["SpringBoot"]},"headers":[],"relativePath":"blog/SpringBoot/定时任务框架XXL-Job.md","filePath":"blog/SpringBoot/定时任务框架XXL-Job.md","lastUpdated":1734484803000}'),b={name:"blog/SpringBoot/定时任务框架XXL-Job.md"};function y(m,s,A,D,q,F){return a(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[l('<h1 id="定时任务框架xxl-job" tabindex="-1">定时任务框架XXL-Job <a class="header-anchor" href="#定时任务框架xxl-job" aria-label="Permalink to &quot;定时任务框架XXL-Job&quot;">​</a></h1><h2 id="定时任务概述" tabindex="-1">定时任务概述 <a class="header-anchor" href="#定时任务概述" aria-label="Permalink to &quot;定时任务概述&quot;">​</a></h2><h3 id="什么是定时任务" tabindex="-1">什么是定时任务 <a class="header-anchor" href="#什么是定时任务" aria-label="Permalink to &quot;什么是定时任务&quot;">​</a></h3><p>定时任务是按照指定的时间周期来运行任务。使用场景为在某个固定时间点执行，或者周期性的去执行某个任务，比如：每天晚上 24 点做数据汇总，定时发送短信等。</p><h3 id="常见定时任务方案" tabindex="-1">常见定时任务方案 <a class="header-anchor" href="#常见定时任务方案" aria-label="Permalink to &quot;常见定时任务方案&quot;">​</a></h3><ul><li><strong>While + Sleep</strong> : 通过循环加休眠的方式定时执行</li><li><strong>Timer 和 TimerTask</strong> ：JDK自带的定时任务，可以实现简单的间隔执行任务（在指定时间点执行某一任务，也能定时的周期性执行），但无法实现按日历去调度执行任务。</li><li><strong>ScheduledExecutorService</strong> : Java 并发包下，自 JDK1.5 出现，是比较理想的定时任务实现方案。Eureka就使用的是它</li><li><strong>QuartZ</strong> : 使用 Quartz，它是一个异步任务调度框架，功能丰富，可以实现按日历调度,支持持久化。</li><li><strong>使用 Spring Task</strong>：Spring 3.0 后提供 Spring Task 实现任务调度，支持按日历调度，相比 Quartz 功能稍简单，但是在开发基本够用，支持注解编程方式。</li><li><strong>SpringBoot 中的 Schedule</strong> ： 通过 <code>@EnableScheduling</code> + <code>@Scheduled</code> 最实现定时任务，底层使用的是 Spring Task</li></ul><h3 id="分布式定时任务面临的问题" tabindex="-1">分布式定时任务面临的问题 <a class="header-anchor" href="#分布式定时任务面临的问题" aria-label="Permalink to &quot;分布式定时任务面临的问题&quot;">​</a></h3><p>上述的定时任务都是集中式（单体项目使用）的定时任务，在分布式中将会面临一些问题或不足</p><ul><li>业务量大，单机性能瓶颈需要扩展</li><li>多台机器部署如何保证定时任务不重复执行</li><li>定时任务时间需要可调整，可以暂停</li><li>机器发生故障宕机，定时任务依然可用，也就是如何实现故障转移</li><li>定时任务，执行日志是否可监控</li></ul><h3 id="分布式定时任务-xxl-job" tabindex="-1">分布式定时任务 XXL-Job <a class="header-anchor" href="#分布式定时任务-xxl-job" aria-label="Permalink to &quot;分布式定时任务 XXL-Job&quot;">​</a></h3><p>XXL-Job 是一个分布式任务调度平台，于 2015 问世，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。其具备且不止如下能力：</p><ul><li><strong>简单</strong>：支持通过 Web 页面对任务进行 CRUD 操作，操作简单，一分钟上手；</li><li><strong>动态</strong>：支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；</li><li><strong>调度中心HA（中心式）</strong>：调度采用中心式设计，“调度中心”基于集群 Quartz 实现并支持集群部署，可保证调度中心 HA；</li><li><strong>执行器HA（分布式）</strong>：任务分布式执行，任务&quot;执行器&quot;支持集群部署，可保证任务执行HA；</li><li><strong>弹性扩容缩容</strong>：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；</li><li><strong>路由策略</strong>：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；</li><li><strong>故障转移</strong>：任务路由策略选择&quot;故障转移&quot;情况下，如果执行器集群中某一台机器故障，将会自动 Failover 切换到一台正常的执行器发送调度请求。</li><li><strong>任务失败告警</strong>：默认提供邮件方式失败告警，同时预留扩展接口，可方面的扩展短信、钉钉等告警方式；</li></ul><blockquote><p>具体见：<a href="https://github.com/xuxueli/xxl-job" target="_blank" rel="noreferrer">https://github.com/xuxueli/xxl-job</a></p></blockquote><h2 id="xxl-job-架构设计" tabindex="-1">xxl-job 架构设计 <a class="header-anchor" href="#xxl-job-架构设计" aria-label="Permalink to &quot;xxl-job 架构设计&quot;">​</a></h2><h3 id="设计思想" tabindex="-1">设计思想 <a class="header-anchor" href="#设计思想" aria-label="Permalink to &quot;设计思想&quot;">​</a></h3><p>将调度行为抽象形成“调度中心”公共平台，而平台自身并不承担业务逻辑，“调度中心”负责发起调度请求。</p><p>将任务抽象成分散的 JobHandler，交由“执行器”统一管理，“执行器”负责接收调度请求并执行对应的 JobHandler 中的业务逻辑。因此，“调度”和“任务”两部分可以相互解耦，提高系统整体的稳定性和可扩展性。</p><h3 id="架构设计图" tabindex="-1">架构设计图 <a class="header-anchor" href="#架构设计图" aria-label="Permalink to &quot;架构设计图&quot;">​</a></h3><p>XXL-Job 分为 <strong>调度中心</strong> 和 <strong>执行器</strong> 两大模块</p><ul><li><strong>调度模块（调度中心）</strong></li></ul><p>负责管理调度信息，按照调度配置发出调度请求，自身不承担业务代码。调度系统与任务解耦，提高了系统可用性和稳定性，同时调度系统性能不再受限于任务模块；</p><p>支持可视化、简单且动态的管理调度信息，包括任务新建，更新，删除，GLUE开发和任务报警等，所有上述操作都会实时生效，同时支持监控调度结果以及执行日志，支持执行器 Failover（故障转移）。</p><ul><li><strong>执行模块（执行器）</strong></li></ul><p>负责接收调度请求并执行任务逻辑。任务模块专注于任务的执行等操作，开发和维护更加简单和高效；</p><p>接收“调度中心”的执行请求、终止请求和日志请求等。</p><p><img src="'+t+'" alt="图片"></p><ul><li><strong>调度中心高可用</strong></li></ul><p>基于数据库的集群方案，数据库选用 Mysql；集群分布式并发环境中进行定时任务调度时，会在各个节点会上报任务，存到数据库中，执行时会从数据库中取出触发器来执行，如果触发器的名称和执行时间相同，则只有一个节点去执行此任务。</p><ul><li><strong>并行调度</strong></li></ul><p>调度采用线程池方式实现，避免单线程因阻塞而引起任务调度延迟。XXL-JOB 调度模块默认采用并行机制，在多线程调度的情况下，调度模块被阻塞的几率很低，大大提高了调度系统的承载量。</p><p>XXL-JOB 的不同任务之间并行调度、并行执行。XXL-JO B的单个任务，针对多个执行器是并行运行的，针对单个执行器是串行执行的。同时支持任务终止。</p><ul><li><strong>执行器（任务）高可用</strong></li></ul><p>执行器如若集群部署，调度中心将会感知到在线的所有执行器，如“<code>127.0.0.1:9997</code>, <code>127.0.0.1:9998</code>, <code>127.0.0.1:9999</code>”。多个执行器可以选择“路由策略”来采用轮询，随机等方式进行多机器调度。</p><p>当任务”路由策略”选择”故障转移(<code>FAILOVER</code>)”时，当调度中心每次发起调度请求时，会按照顺序对执行器发出心跳检测请求，第一个检测为存活状态的执行器将会被选定并发送调度请求。调度成功后，可在日志监控界面查看“调度备注”</p><h2 id="xxl-job-入门" tabindex="-1">xxl-job 入门 <a class="header-anchor" href="#xxl-job-入门" aria-label="Permalink to &quot;xxl-job 入门&quot;">​</a></h2><h3 id="下载源码" tabindex="-1">下载源码 <a class="header-anchor" href="#下载源码" aria-label="Permalink to &quot;下载源码&quot;">​</a></h3><p>请下载 <a href="./(https://github.com/xuxueli/xxl-job).html">项目源码</a> 并解压，使用 IDEA 工具导入项目。</p><p>项目代码结构如下：</p><p><img src="'+e+'" alt="图片"></p><ul><li><strong>doc</strong>：文档，即 SQL 脚本所在目录</li><li><strong>db</strong>：“调度数据库”建表脚本</li><li><strong>xxl-job-admin</strong>：调度中心</li><li><strong>xxl-job-core</strong>：核心模块，公共依赖</li><li><strong>xxl-job-executor-samples</strong>：执行器，sample 示例项目（大家可以在该项目上进行开发，也可以将现有项目改造生成执行器项目） <ul><li><strong>xxl-job-executor-sample-springboot</strong>：Springboot 版本，通过 Springboot 管理执行器，推荐这种方式；</li><li><strong>xxl-job-executor-sample-frameless</strong>：无框架版本；</li></ul></li></ul><h3 id="导入数据库" tabindex="-1">导入数据库 <a class="header-anchor" href="#导入数据库" aria-label="Permalink to &quot;导入数据库&quot;">​</a></h3><p>打开项目代码，获取 “调度数据库初始化SQL脚本” 并执行即可。“调度数据库初始化SQL脚本” 位置为: <code>/xxl-job/doc/db/tables_xxl_job.sql</code> ，数据库名：<code>xxl_job</code></p><p><img src="'+p+'" alt="图片"></p><p>数据库如下：</p><p><img src="'+h+`" alt="图片"></p><ul><li><strong>xxl_job_lock</strong> ：任务调度锁表；</li><li><strong>xxl_job_group</strong> ：执行器信息表，维护任务执行器信息；</li><li><strong>xxl_job_info</strong> ：调度扩展信息表：用于保存 XXL-JOB 调度任务的扩展信息，如任务分组、任务名、机器地址、执行器、执行入参和报警邮件等等；</li><li><strong>xxl_job_log</strong> ：调度日志表：用于保存 XXL-JOB 任务调度的历史信息，如调度结果、执行结果、调度入参、调度机器和执行器等等；</li><li><strong>xxl_job_log_report</strong> ：调度日志报表：用户存储 XXL-JOB 任务调度日志的报表，调度中心报表功能页面会用到；</li><li><strong>xxl_job_logglue</strong> ：任务 GLUE 日志：用于保存 GLUE 更新历史，用于支持 GLUE 的版本回溯功能；</li><li><strong>xxl_job_registry</strong> ：执行器注册表，维护在线的执行器和调度中心机器地址信息；</li><li><strong>xxl_job_user</strong> ：系统用户表；</li></ul><h3 id="配置部署调度中心" tabindex="-1">配置部署调度中心 <a class="header-anchor" href="#配置部署调度中心" aria-label="Permalink to &quot;配置部署调度中心&quot;">​</a></h3><h4 id="配置调度中心" tabindex="-1">配置调度中心 <a class="header-anchor" href="#配置调度中心" aria-label="Permalink to &quot;配置调度中心&quot;">​</a></h4><p>打开 <code>xxl-job-admin</code> 的配置文件，<code>/xxl-job/xxl-job-admin/src/main/resources/application.properties</code> 对调度中心进行配置，重要配置如下：</p><ul><li><strong>server.port</strong> : 服务端口</li><li><strong>spring.datasource.url</strong> ：指向刚才准备的数据库</li><li><strong>spring.datasource.password</strong> : 记得修改成自己的数据库密码</li><li><strong>spring.mail.username</strong> ：配置自己的邮件账号</li><li><strong>spring.mail.password</strong> ：邮件的授权码，我下面是以qq邮箱为例</li></ul><p>下面根据自己的情况进行修改，<strong>不要直接复制</strong></p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 调度中心JDBC链接：链接地址请保持和 2.1 章节 所创建的调度数据库的地址一致</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=jdbc:mysql://127.0.0.1:3306/xxl_job?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">useUnicode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">characterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=UTF-8&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">autoReconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">serverTimezone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=root_pwd</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.driver-class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=com.mysql.jdbc.Driver</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 报警邮箱</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=smtp.qq.com</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=25</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=xxx@qq.com</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=邮箱授权码，不是登录密码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.starttls.enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.starttls.required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.socketFactory.class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=javax.net.ssl.SSLSocketFactory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 调度中心通讯TOKEN [选填]：非空时启用；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.accessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 调度中心国际化配置 [必填]： 默认为 &quot;zh_CN&quot;/中文简体, 可选范围为 &quot;zh_CN&quot;/中文简体, &quot;zh_TC&quot;/中文繁体 and &quot;en&quot;/英文；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.i18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=zh_CN</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 调度线程池最大线程配置[必填]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.triggerpool.fast.max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=200</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.triggerpool.slow.max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=100</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 调度中心日志表数据保存天数 [必填]：过期日志自动清理；限制大于等于7时生效，否则, 如-1，关闭自动清理功能；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.logretentiondays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=30</span></span></code></pre></div><h4 id="部署调度中心" tabindex="-1">部署调度中心 <a class="header-anchor" href="#部署调度中心" aria-label="Permalink to &quot;部署调度中心&quot;">​</a></h4><p>然后启动调度中心 ，执行 <code>XxlJobAdminApplication#main</code> 方法 ， 启动之后，浏览器访问 <code>http://localhost:18080/xxl-job-admin/jobinfo?jobGroup=2</code></p><p>注意 URL 中有个上下文路径。默认登录账号 “<code>admin/123456</code>”，登录后运行界面如下图所示：</p><p><img src="`+r+`" alt="图片"></p><h3 id="配置部署执行器项目" tabindex="-1">配置部署执行器项目 <a class="header-anchor" href="#配置部署执行器项目" aria-label="Permalink to &quot;配置部署执行器项目&quot;">​</a></h3><p>“执行器”项目：<code>xxl-job-executor-sample-springboot </code>（提供多种版本执行器供选择，现以 springboot 版本为例，可直接使用，也可以参考其并将现有项目改造成执行器）</p><p>作用：负责接收“调度中心”的调度并执行；可直接部署执行器，也可以将执行器集成到现有业务项目中。</p><h4 id="导入maven-依赖" tabindex="-1">导入maven 依赖 <a class="header-anchor" href="#导入maven-依赖" aria-label="Permalink to &quot;导入maven 依赖&quot;">​</a></h4><p>确认 pom 文件中引入了 “xxl-job-core” 的 maven 依赖：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- http://repo1.maven.org/maven2/com/xuxueli/xxl-job-core/ --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.xuxueli&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;xxl-job-core&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\${最新稳定版本}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="配置执行器" tabindex="-1">配置执行器 <a class="header-anchor" href="#配置执行器" aria-label="Permalink to &quot;配置执行器&quot;">​</a></h4><p>修改配置：<code>/xxl-job/xxl-job-executor-samples/xxl-job-executor-sample-springboot/src/main/resources/application.properties</code></p><ul><li><strong>xxl.job.admin.addresses</strong>： 调度中心的地址，如果调度中心修改过端口，这里也要对应修改</li></ul><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 调度中心部署根地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；为空则关闭自动注册；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.admin.addresses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=http://127.0.0.1:8080/xxl-job-admin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器通讯TOKEN [选填]：非空时启用；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.accessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.appname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=xxl-job-executor-sample</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=9999</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.logpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/data/applogs/xxl-job/jobhandler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.logretentiondays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=30</span></span></code></pre></div><h4 id="执行器组件配置" tabindex="-1">执行器组件配置 <a class="header-anchor" href="#执行器组件配置" aria-label="Permalink to &quot;执行器组件配置&quot;">​</a></h4><p>上面配置是为了在 Spring 容器中创建一个 <code>XxlJobSpringExecutor</code> 执行器 Bean，见：<code>com.xxl.job.executor.core.config.XxlJobConfig#xxlJobExecutor</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XxlJobSpringExecutor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xxlJobExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    XxlJobSpringExecutor xxlJobSpringExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XxlJobSpringExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAdminAddresses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(adminAddresses);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAppname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appname);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setIp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ip);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAccessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(accessToken);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLogPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logPath);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLogRetentionDays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logRetentionDays);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxlJobSpringExecutor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果已经正确进行上述配置，可将执行器项目编译打包部署。</p><h2 id="配置定时任务" tabindex="-1">配置定时任务 <a class="header-anchor" href="#配置定时任务" aria-label="Permalink to &quot;配置定时任务&quot;">​</a></h2><h3 id="bean模式-方法形式" tabindex="-1">BEAN模式（方法形式） <a class="header-anchor" href="#bean模式-方法形式" aria-label="Permalink to &quot;BEAN模式（方法形式）&quot;">​</a></h3><p>Bean 模式任务，支持基于方法的开发方式，每个任务对应一个方法。</p><ul><li>优点： <ul><li>每个任务只需要开发一个方法，并添加”@XxlJob”注解即可，更加方便、快速。</li><li>支持自动扫描任务并注入到执行器容器。</li></ul></li><li>缺点：要求 Spring 容器环境；</li></ul><p>在 <code>com.xxl.job.executor.service.jobhandler.SampleXxlJob</code> 中提供了简单的定时任务实例。</p><p>为方便用户参考与快速实用，示例执行器内原生提供多个 Bean 模式任务 Handler，可以直接配置实用，如下：</p><ul><li><strong>demoJobHandler</strong> ：简单示例任务，任务内部模拟耗时任务逻辑，用户可在线体验 <code>Rolling Log</code> 等功能；</li><li><strong>shardingJobHandler</strong> ：分片示例任务，任务内部模拟处理分片参数，可参考熟悉分片任务；</li><li><strong>httpJobHandler</strong> ：通用 HTTP 任务Handler；业务方只需要提供HTTP链接等信息即可，不限制语言、平台。示例任务入参如下：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * XxlJob开发示例（Bean模式）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 开发步骤：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 1、在Spring Bean实例中，开发Job方法，方式格式要求为 &quot;public ReturnT&lt;String&gt; execute(String param)&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 2、为Job方法添加注解 &quot;@XxlJob(value=&quot;自定义jobhandler名称&quot;, init = &quot;JobHandler初始化方法&quot;, destroy = &quot;JobHandler销毁方法&quot;)&quot;，注解value值对应的是调度中心新建任务的JobHandler属性的值。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 3、执行日志：需要通过 &quot;XxlJobLogger.log&quot; 打印执行日志；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> xuxueli 2019-12-11 21:52:51</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SampleXxlJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoggerFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SampleXxlJob.class);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 1、简单任务示例（Bean模式）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">XxlJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demoJobHandler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReturnT&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">demoJobHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XXL-JOB, Hello World. param={}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,param);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReturnT.SUCCESS;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...省略...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>如果我们要写自己的定时任务，参照上面方法，在方法上注解一个<code>@XxlJob(&quot;任务名字&quot;)</code>，方法可以接受一个字符串参数，方法需要返回 ReturnT 格式。</strong></p><h3 id="创建执行器" tabindex="-1">创建执行器 <a class="header-anchor" href="#创建执行器" aria-label="Permalink to &quot;创建执行器&quot;">​</a></h3><p>打开调度中心可视化界面，在执行器管理界面，添加新增执行器</p><p><img src="`+o+'" alt="图片"></p><ul><li>appName : 执行器的名字，可以任意填写</li><li>名称：任意填写</li><li>注册方式：调度中心是通过 RPC 的方式对执行器发起调度，所以这里需要的是执行器项目的 <code>ip:port</code> ，注意，该端口不是执行器项目的<code>server.port</code> ，而是：<code>xxl.job.executor.port</code> 端口。你可以选择自动注册，也可以手动录入。</li></ul><h3 id="创建任务" tabindex="-1">创建任务 <a class="header-anchor" href="#创建任务" aria-label="Permalink to &quot;创建任务&quot;">​</a></h3><p>在 任务管理 界面，新增任务</p><p><img src="'+k+'" alt="图片"></p><ul><li><strong>路由策略</strong> ：有轮询，随机，故障转移等等策略，是用在集群模式下的调度方式。</li><li><strong>cron</strong> : 定时任务的执行时间规则，时间表达式</li><li><strong>JobHandler</strong> : 这个是要对应 “执行器项目”中 <code>@XxlJob(&quot;demoJobHandler&quot;) </code>注解中的名字</li><li><strong>运行模式</strong> ：Bean ，使用内置代码方式，也可以执行在线执行代码方式</li><li><strong>报警邮件</strong> ：如果定时任务失败，会发送报警邮件到邮箱</li><li><strong>任务参数</strong> ：这个参数可以传递给 <code>@XxlJob(&quot;demoJobHandler&quot;)</code>所在方法的参数。</li></ul><p>创建好任务之后就可以执行了：</p><p><img src="'+d+'" alt="图片"></p><p>调度日志：</p><p><img src="'+g+`" alt="图片"></p><p>IDEA工具控制台效果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>15:47:33.017 logback [Thread-16] INFO  c.x.j.e.s.jobhandler.SampleXxlJob - XXL-JOB, Hello World. param=</span></span>
<span class="line"><span>15:47:34.007 logback [Thread-16] INFO  c.x.j.e.s.jobhandler.SampleXxlJob - XXL-JOB, Hello World. param=</span></span>
<span class="line"><span>15:47:35.008 logback [Thread-16] INFO  c.x.j.e.s.jobhandler.SampleXxlJob - XXL-JOB, Hello World. param=</span></span>
<span class="line"><span>...省略...</span></span></code></pre></div><h3 id="glue模式-java" tabindex="-1">GLUE模式(Java) <a class="header-anchor" href="#glue模式-java" aria-label="Permalink to &quot;GLUE模式(Java)&quot;">​</a></h3><h4 id="添加任务" tabindex="-1">添加任务 <a class="header-anchor" href="#添加任务" aria-label="Permalink to &quot;添加任务&quot;">​</a></h4><p>该模式支持在线编辑定时任务的内容，立刻执行，无需再开发工具中编辑代码，也无需重启项目。</p><p>请点击任务右侧 “GLUE” 按钮，进入 “GLUE编辑器开发界面” ，见下图。“GLUE模式(Java)” 运行模式的任务默认已经初始化了示例任务代码，即打印Hello World。</p><p><img src="`+c+'" alt="图片"></p><p>任务以源码方式维护在调度中心，支持通过Web IDE在线更新，实时编译和生效，因此不需要指定JobHandler</p><h4 id="编写代码" tabindex="-1">编写代码 <a class="header-anchor" href="#编写代码" aria-label="Permalink to &quot;编写代码&quot;">​</a></h4><p>保存之后可以在操作按钮里面去编写任务</p><p><img src="'+E+'" alt="图片"></p><p>(“GLUE模式(Java)” 运行模式的任务实际上是一段继承自<code>IJobHandler</code>的Java类代码，它在执行器项目中运行，可使用<code>@Resource/@Autowire</code>注入执行器里中的其他服务），比如我的定时任务如下，编辑好之后点击保存</p><p><img src="'+u+'" alt="图片"></p><p>保存好之后，启动定时任务，效果如下</p><p><img src="'+x+'" alt="图片"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>xxl-job</code> 确实很强大，功能也很全，但是如果是一个小体量的单体项目，就不太建议使用它，Quzrtz 或者 SpringBoot Task 就足够 ，<code>xxl-job</code> 还是有些笨重。</p>',108)]))}const _=i(b,[["render",y]]);export{J as __pageData,_ as default};
