import{_ as e,o as l,c as t,a6 as s}from"./chunks/framework.BkI9ovSD.js";const p="/assets/491.CayJUJMP.png",i="/assets/492.CssHhFnP.png",g=JSON.parse('{"title":"JSP总结","description":"","frontmatter":{"title":"JSP总结","date":"2020-03-20T00:00:00.000Z","tags":["JSP"],"categories":["JavaWeb"]},"headers":[],"relativePath":"blog/JavaWeb/JSP总结.md","filePath":"blog/JavaWeb/JSP总结.md","lastUpdated":1741679708000}'),n={name:"blog/JavaWeb/JSP总结.md"};function o(r,a,c,d,u,J){return l(),t("div",{"data-pagefind-body":!0},a[0]||(a[0]=[s(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>JSP</strong>（全称<strong>J</strong>ava<strong>S</strong>erver <strong>P</strong>ages）是一种动态网页技术标准。JSP 部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成 HTML、XML 或其他格式文档的 Web 网页，然后返回给请求者。</p></div><h1 id="jsp总结" tabindex="-1">JSP总结 <a class="header-anchor" href="#jsp总结" aria-label="Permalink to &quot;JSP总结&quot;">​</a></h1><h2 id="java-web-和-java-ee-的区别" tabindex="-1">Java Web 和 Java EE 的区别 <a class="header-anchor" href="#java-web-和-java-ee-的区别" aria-label="Permalink to &quot;Java Web 和 Java EE 的区别&quot;">​</a></h2><ul><li>Java Web 就是以 Java 语言为基础，使用 JSP 和 Servlet 来开发 Web 程序。Web 程序简单理解就是我们平时说的网站。</li><li>JavaEE 是 Java 的企业级应用，里面包含的功能比较多。JavaEE 是个大杂烩，包括 Applet、EJB、JDBC、JNDI、Servlet、JSP 等技术的标准，运行在一个完整的应用服务器上，用来开发大规模、分布式、健壮的网络应用。这里的网络应用也可以理解为我们平时使用的网站。</li><li>可以粗略地认为 JavaWeb 就是 JavaEE 的一部分，是成为 JavaEE 大师过程中的第一站。</li><li>使用 JavaEE 开发的应用 <ul><li>国内：淘宝，京东，工行的网银，12306 ...</li><li>国外：Twitter，Minecraft，Hadoop …</li></ul></li></ul><h2 id="学习-java-web-首先要学习的技术" tabindex="-1">学习 Java Web 首先要学习的技术 <a class="header-anchor" href="#学习-java-web-首先要学习的技术" aria-label="Permalink to &quot;学习 Java Web 首先要学习的技术&quot;">​</a></h2><ul><li><p>JSP 和 Servlet 前置技术</p></li><li><p>前端技术：HTML、CSS、JavaScript</p></li><li><p>编程技术：Java 语言编程</p></li><li><p>数据库：MySQL、Oracle、SQL Server</p></li><li><p>后续学习：</p><ul><li>SSM、SSH框架</li><li>SSM：Spring+SpringMVC+MyBatis</li><li>SSH：Spring+Struts+Hibernate</li></ul></li></ul><h2 id="java-web开发需要的软件" tabindex="-1">Java Web开发需要的软件 <a class="header-anchor" href="#java-web开发需要的软件" aria-label="Permalink to &quot;Java Web开发需要的软件&quot;">​</a></h2><ol><li>JDK 8</li><li>Eclipse IDE For Java EE（或者选择IntelliJ IDEA）</li><li>Tomcat 8.5 9（32还是64位根据自己的电脑来选择）</li></ol><h2 id="tomcat-的作用" tabindex="-1">Tomcat 的作用 <a class="header-anchor" href="#tomcat-的作用" aria-label="Permalink to &quot;Tomcat 的作用&quot;">​</a></h2><ul><li><p>Eclipse编写代码---&gt;.Java---&gt;jdk----&gt;.class---&gt;jre运行</p></li><li><p>Eclipse编写代码---&gt;.JSP/servlet--&gt;tomcat运行</p></li><li><p>当在一台机器上配置好 Apache 服务器，可利用它响应对 HTML 页面的访问请求。实际上 Tomcat 部分是 Apache 服务器的扩展，但它是独立运行的，所以当你 Apache Tomcat 运行 Tomcat 时，它实际上作为一个与 Apache 独立的进程单独运行的。</p></li></ul><h2 id="jsp-简介" tabindex="-1">JSP 简介 <a class="header-anchor" href="#jsp-简介" aria-label="Permalink to &quot;JSP 简介&quot;">​</a></h2><ul><li><p>JSP 全称是 Java Server Pages：Java 服务端页面。它是一种动态的网页技术，其中既可以定义 HTML、JS、CSS 等静态内容，还可以定义 Java代码的动态内容，也就是说 <code>JSP = HTML + Java</code>。如下就是 JSP 代码：</p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>    &lt;head&gt;</span></span>
<span class="line"><span>        &lt;title&gt;Title&lt;/title&gt;</span></span>
<span class="line"><span>    &lt;/head&gt;</span></span>
<span class="line"><span>    &lt;body&gt;</span></span>
<span class="line"><span>        &lt;h1&gt;JSP,Hello World&lt;/h1&gt;</span></span>
<span class="line"><span>        &lt;%</span></span>
<span class="line"><span>        	System.out.println(&quot;hello,JSP~&quot;);</span></span>
<span class="line"><span>        %&gt;</span></span>
<span class="line"><span>    &lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre></div><p>上面代码 <code>h1</code> 标签内容是展示在页面上，而 Java 的输出语句是输出在 idea 的控制台。</p></li><li><p>JSP 一般用来开发动态页面。静态页面上的内容（文字、图片）是不改变的。Web前端工程师开发出来后的页面就是一个静态页面，后端人员需要把静态页面变成动态页面。</p></li></ul><h2 id="怎么在-jsp-页面上写-java-代码" tabindex="-1">怎么在 JSP 页面上写 Java 代码 <a class="header-anchor" href="#怎么在-jsp-页面上写-java-代码" aria-label="Permalink to &quot;怎么在 JSP 页面上写 Java 代码&quot;">​</a></h2><ul><li><p>可以多次使用<code>&lt;% %&gt;</code></p></li><li><p>JSP内容输出表达式<code>&lt;%= %&gt;</code></p></li><li><p>JSP定义表达式<code>&lt;%! %&gt;</code></p></li><li><p>JSP中 Java 代码可以和页面 html 代码组合使用</p></li><li><p>成员变量和局部变量：一个 JSP 对应一个Java类，运行的时候，一个 JSP 会创建一个对应的 Java 对象。</p></li><li><p>注释<code>&lt;%-- --%&gt;</code>不起任何实际作用，还可以用来注释<code>&lt;% %&gt;</code>，在Java代码中依然可以使用 Java 支持的注释</p></li><li><p>JSP中引入Java类</p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;%@page import=&quot;Java.util.Random&quot;%&gt;</span></span>
<span class="line"><span>&lt;%@page import=&quot;Java.util.Random,Java.text.*&quot;%&gt;</span></span></code></pre></div></li></ul><h2 id="什么是-jsp-的内置对象" tabindex="-1">什么是 JSP 的内置对象 <a class="header-anchor" href="#什么是-jsp-的内置对象" aria-label="Permalink to &quot;什么是 JSP 的内置对象&quot;">​</a></h2><ul><li><p>不需要声明，不需要创建，就可以直接使用的对象，就是内置对象。</p></li><li><p>JSP有九大内置对象，常用的有 request，response，out。一个请求对应一个 request。</p></li><li><p>page是 JSP 页面对应的类对象</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pageContext</span></span>
<span class="line"><span>pageContext.forward(&quot;xxx.JSP&quot;);</span></span>
<span class="line"><span>pageContext.include(&quot;xxx.JSP&quot;);</span></span>
<span class="line"><span>pageContext.getRequest getResponse get..</span></span></code></pre></div></li><li><p>session 代表会话</p></li><li><p>session request 的生命周期：</p><p>session对象在关闭浏览器，或者到达有效时间（长时间不操作网站）时，会被销毁。</p></li><li><p>application web容器的生命周期：</p><p>网站启动起来，创建一个applition，当网站关闭后，application被销毁。一个web应用只有一个application对象。</p></li></ul><h2 id="page和pagecontext内置对象" tabindex="-1">page和pageContext内置对象 <a class="header-anchor" href="#page和pagecontext内置对象" aria-label="Permalink to &quot;page和pageContext内置对象&quot;">​</a></h2><ul><li><p>page 就是this当前对象</p></li><li><p>page 的作用域只在当前页面有效，如果JSP页面发生了请求转发的话，当前页面的page对象就不见了</p></li><li><p>四大域对象：page、request、session、application</p><ul><li><p>page域：共享的值只能在本页面进行获取；</p></li><li><p>request域：共享的值在跳转页能够获取；</p></li><li><p>session域：在session不过期的情况下，一直可以获取session内的键值对，浏览器关闭开启session就重新创建；</p></li><li><p>application域：这个共享的值在服务器上一直存在，随时都可以获取，直到服务器重启，如果设置过多的application，会影响服务器性能。</p></li></ul></li><li><p>作用域：page&lt;request&lt;session&lt;application</p></li><li><p>pageContext对象是JSP中很重要的一个内置对象，不过在一般的JSP程序中，很少用到它。它是javax.servlet.jsp.PageContext类的实例对象，可以使用PageContext类的方法。</p></li><li><p>实际上，pageContext 对象提供了对JSP页面所有的对象及命名空间的访问。</p></li></ul><h2 id="web-xml" tabindex="-1">web.xml <a class="header-anchor" href="#web-xml" aria-label="Permalink to &quot;web.xml&quot;">​</a></h2><ul><li><p>在创建项目的时候生成（推荐）</p></li><li><p>首页的默认配置</p></li></ul><h2 id="jsp-include指令" tabindex="-1">JSP include指令 <a class="header-anchor" href="#jsp-include指令" aria-label="Permalink to &quot;JSP include指令&quot;">​</a></h2><ul><li><p>JSP include 指令用于通知 JSP 引擎在翻译当前 JSP 页面时，将其他文件中的内容合并进当前 JSP 页面转换成的 Servlet 源文件中，这种在源文件级别进行引入的方式，称为静态引入，当前 JSP 页面与静态引入的文件紧密结合为一个 Servlet。这些文件可以是 JSP 页面、HTML 页面、文本文件或是一段 Java 代码。其语法格式如下：</p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;%@ include file=&quot;relativeURL|absoluteURL&quot; %&gt;</span></span></code></pre></div></li></ul><h2 id="客户端的路径问题" tabindex="-1">客户端的路径问题 <a class="header-anchor" href="#客户端的路径问题" aria-label="Permalink to &quot;客户端的路径问题&quot;">​</a></h2><ul><li><p><code>&lt;%=request.getContextPath()%&gt;</code>可返回站点的根路径，也就是项目的虚拟路径</p></li><li><p>实际应用中，一般用来解决JSP测试和生产环境路径不同的问题</p><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;%</span></span>
<span class="line"><span> String appContext = request.getContextPath();</span></span>
<span class="line"><span> String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+appContext; </span></span>
<span class="line"><span>%&gt;</span></span></code></pre></div></li><li><p>在页面跳转的过程中客户端的相对路径容易不生效，无法被正确找到，所以开发过程中一般不会使用相对路径</p></li></ul><h2 id="jsp-的缺点" tabindex="-1">JSP 的缺点 <a class="header-anchor" href="#jsp-的缺点" aria-label="Permalink to &quot;JSP 的缺点&quot;">​</a></h2><p>由于 JSP页面内，既可以定义 HTML 标签，又可以定义 Java代码，造成了以下问题：</p><ul><li><p>书写麻烦，特别是针对复杂的页面，既要写 HTML 标签，还要写 Java 代码。</p></li><li><p>阅读麻烦，后期再看 JSP 代码时还需要花费很长的时间去梳理。</p></li><li><p>复杂度高，运行需要依赖于各种环境：JRE，JSP容器，JavaEE……</p></li><li><p>占内存和磁盘，JSP会自动生成 .java 和 .class 文件占磁盘，运行的是 .class 文件占内存</p></li><li><p>调试困难，出错后需要找到自动生成的 .java 文件才能进行调试</p></li><li><p>不利于团队协作，前端人员不会 Java，后端人员不精 HTML，如果页面布局发生变化，需要前端工程师对静态页面进行修改，然后再交给后端工程师，由后端工程师最终将该页面改为 JSP 页面</p></li></ul><p>由于上述的问题， <strong>JSP 已逐渐退出历史舞台</strong>，后来开发更多的是使用 <strong>HTML + Ajax</strong> 来替代。</p><p>Ajax 是我们后续会重点学习的技术，有个这个技术后，前端工程师负责前端页面开发，而后端工程师只负责前端代码开发。</p><p>技术的发展历程：</p><p><img src="`+p+'" alt=""></p><ol><li><p>第一阶段：使用 servlet 既要实现逻辑代码编写，也要对页面进行拼接。</p></li><li><p>第二阶段：随着技术的发展，出现了 JSP ，人们发现 JSP 使用起来比 Servlet 方便很多，但是还是要在 JSP 中嵌套 Java 代码，也不利于后期的维护</p></li><li><p>第三阶段：使用 servlet 进行逻辑代码开发，而使用 JSP 进行数据展示</p><p><img src="'+i+'" alt=""></p></li><li><p>第四阶段：使用 servlet 进行后端逻辑代码开发，而使用 HTML 进行数据展示，由于 HTML 是静态页面，所以要利用 ajax 进行进行动态数据展示。</p></li></ol><p>那既然 JSP 已经逐渐的退出历史舞台，那我们为什么还要学习 JSP 呢？原因有两点：</p><ul><li>一些公司可能有些老项目还在用 JSP ，所以要求我们必须动 JSP</li><li>我们如果不经历这些复杂的过程，就不能体现后面阶段开发的简单</li></ul>',34)]))}const v=e(n,[["render",o]]);export{g as __pageData,v as default};
