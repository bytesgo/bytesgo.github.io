import{_ as i,o as a,c as n,a6 as t}from"./chunks/framework.BkI9ovSD.js";const l="/assets/56.CogoMwWC.png",h="/assets/58.Cx1gFpyQ.jpg",p="/assets/57.Bu2FD_5W.jpg",k="/assets/59.BfDpcY-9.jpg",e="/assets/60.CNS1YzK1.jpg",F=JSON.parse('{"title":"初识多线程","description":"","frontmatter":{"title":"初识多线程","date":"2020-04-20T00:00:00.000Z","tags":["Java","多线程","线程池"],"categories":["Java"]},"headers":[],"relativePath":"blog/Java/初识多线程.md","filePath":"blog/Java/初识多线程.md","lastUpdated":1734587597000}'),r={name:"blog/Java/初识多线程.md"};function g(d,s,E,o,y,c){return a(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t('<h1 id="初识多线程" tabindex="-1">初识多线程 <a class="header-anchor" href="#初识多线程" aria-label="Permalink to &quot;初识多线程&quot;">​</a></h1><h2 id="什么是多线程" tabindex="-1">什么是多线程 <a class="header-anchor" href="#什么是多线程" aria-label="Permalink to &quot;什么是多线程&quot;">​</a></h2><p>讲到线程，就不得不提进程了~</p><p>在 Windows 下打开任务管理器，可以发现我们在操作系统上运行的程序其实都是进程：</p><img src="'+l+'" alt="56" style="zoom:67%;"><h2 id="什么是进程" tabindex="-1">什么是进程 <a class="header-anchor" href="#什么是进程" aria-label="Permalink to &quot;什么是进程&quot;">​</a></h2><p>进程是程序的⼀次执行，进程是⼀个程序及其数据在处理机上顺序执行时所发生的活动，进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</p><p><strong>进程是系统进行资源分配和调度的独立单位，每⼀个进程都有它自己的内存空间和系统资源。</strong></p><h2 id="回到线程" tabindex="-1">回到线程 <a class="header-anchor" href="#回到线程" aria-label="Permalink to &quot;回到线程&quot;">​</a></h2><p>那系统有了进程这么⼀个概念了，进程已经是可以进行资源分配和调度了，为什么还要线程呢？</p><p>为使程序能并发执行，系统必须进行以下的⼀系列操作：</p><ol><li><strong>创建进程</strong>，系统在创建⼀个进程时，必须为它分配其所必需的、除处理机以外的所有资源，如内存空间、I/O 设备，以及建立相应的 PCB</li><li><strong>撤消进程</strong>，系统在撤消进程时，⼜必须先对其所占有的资源执行回收操作，然后再撤消 PCB；</li><li><strong>进程切换</strong>，对进程进行上下⽂切换时，需要保留当前进程的 CPU 环境，设置新选中进程的 CPU 环境，因而须花费不少的处理机时间。</li></ol><p><img src="'+h+'" alt=""></p><p>可以看到进程实现多处理机环境下的进程调度、分派、切换时，都需要花费较⼤的时间和空间开销。</p><p>引入线程主要是为了 <strong>提高系统的执行效率</strong>，<strong>减少处理机的空转时间和调度切换的时间</strong>，以及便于系统管理。使 OS 具有更好的并发性。</p><p>简单来说：<strong>进程实现多处理</strong> 非常耗费 CPU 的资源，⽽我们引⼊线程是作为调度和分派的基本单位（取代进程的部分基本功能【<strong>调度</strong>】）。</p><p>那么线程在哪呢？举个例⼦：</p><p><img src="'+p+'" alt=""></p><p>也就是说：<strong>在同⼀个进程内又可以执行多个任务，而这每⼀个任务我就可以看成是⼀个线程。</strong></p><p>所以说：<strong>一个进程一般可以有 1 个或多个线程。</strong></p><h2 id="进程与线程" tabindex="-1">进程与线程 <a class="header-anchor" href="#进程与线程" aria-label="Permalink to &quot;进程与线程&quot;">​</a></h2><p>于是我们可以总结出：</p><ul><li>进程作为资源 <strong>分配</strong> 的基本单位</li><li>线程作为资源 <strong>调度</strong> 的基本单位，<strong>是程序的执行单元，执行路径</strong>（单线程：一条执行路径；多线程：多条执行路径）。是程序使用CPU的最基本单位。</li></ul><p>线程有 <strong>3 个基本状态</strong>：</p><ul><li>执行、就绪、阻塞</li></ul><p>线程有 <strong>5 种基本操作</strong>：</p><ul><li>派生、阻塞、激活、调度、结束</li></ul><h2 id="线程的属性" tabindex="-1">线程的属性 <a class="header-anchor" href="#线程的属性" aria-label="Permalink to &quot;线程的属性&quot;">​</a></h2><ul><li>轻型实体</li><li>独立调度和分派的基本单位</li><li>可并发执行</li><li>共享进程资源</li></ul><p>线程有 <strong>两个基本类型</strong>：</p><ul><li><strong>用户级线程</strong>：管理过程全部由用户程序完成，<strong>操作系统内核心只对进程进行管理</strong>。</li><li><strong>系统级线程</strong>（核心级线程）：<strong>由操作系统内核进行管理</strong>。操作系统内核给应用程序提供相应的系统调用和应用程序接口 API，以使用户程序可以创建、执行以及撤消线程。</li></ul><p><img src="'+k+'" alt=""></p><p>值得注意的是：多线程的存在，不是提高程序的执行速度。其实是 <strong>为了提高应用程序的使用率</strong>，程序的执行其实都是在 <strong>抢CPU的资源</strong>，CPU的执行权。多个进程是在抢这个资源，<strong>而其中的某⼀个进程如果执行路径比较多</strong>，就会有 <strong>更高的几率</strong> 抢到CPU的执行权</p><h2 id="并行与并发" tabindex="-1">并行与并发 <a class="header-anchor" href="#并行与并发" aria-label="Permalink to &quot;并行与并发&quot;">​</a></h2><p><strong>并行</strong>：</p><ul><li>并行性是指 <strong>同一时刻内</strong> 发生两个或多个事件。</li><li>并行是在 <strong>不同实体上</strong> 的多个事件</li></ul><p><strong>并发</strong>：</p><ul><li>并发性是指 <strong>同一时间间隔内</strong> 发生两个或多个事件。</li><li>并发是在 <strong>同一实体上</strong> 的多个事件</li></ul><p>由此可见：并行是针对进程的，<strong>并发是针对线程</strong> 的。</p><h2 id="java实现多线程" tabindex="-1">Java实现多线程 <a class="header-anchor" href="#java实现多线程" aria-label="Permalink to &quot;Java实现多线程&quot;">​</a></h2><p>java实现多线程靠的是 <code>Thread</code> 类，顶部注释如下：</p><p><img src="'+e+`" alt=""></p><p><strong>创建多线程有 3 种方法</strong></p><ul><li>继承 Thread，重写 run() 方法</li><li>实现 Runnable 接口，重写 run() 方法</li><li>实现 Callable 接口，重写 run() 方法</li></ul><h3 id="_1-继承-thread-类-重写-run-方法" tabindex="-1">1. 继承 Thread 类，重写 run() 方法 <a class="header-anchor" href="#_1-继承-thread-类-重写-run-方法" aria-label="Permalink to &quot;1. 继承 Thread 类，重写 run() 方法&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyThread</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>调用方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyThreadDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 创建两个线程对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		MyThread my1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		MyThread my2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 启动线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        my1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		my2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-实现-runnable-接口-重写-run-方法" tabindex="-1">2. 实现 Runnable 接口，重写 run() 方法 <a class="header-anchor" href="#_2-实现-runnable-接口-重写-run-方法" aria-label="Permalink to &quot;2. 实现 Runnable 接口，重写 run() 方法&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyRunnable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>调用方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyRunnableDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 创建MyRunnable类的对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		MyRunnable my </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyRunnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Thread t1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Thread t2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		t1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		t2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="java-实现多线程需要注意的细节" tabindex="-1">Java 实现多线程需要注意的细节 <a class="header-anchor" href="#java-实现多线程需要注意的细节" aria-label="Permalink to &quot;Java 实现多线程需要注意的细节&quot;">​</a></h2><p>不要将 <code>run()</code> 和 <code>start()</code> 搞混了</p><p><strong>run()和start()方法的区别：</strong></p><ul><li><code>run()</code>：仅仅是 <strong>封装被线程执行的代码</strong>，直接调用的话就成了普通方法</li><li><code>start()</code>：首先 <strong>启动了线程</strong>，然后 <strong>再由 jvm 去调用该线程的 run() 方法</strong></li></ul><p><strong>jvm 虚拟机的启动是单线程的还是多线程的?</strong></p><ul><li>是多线程的。不仅仅是启动 main 线程，还至少会启动垃圾回收线程的，不然谁帮你回收不用的内存~</li></ul><p><strong>那么，既然有两种方式实现多线程，我们使用哪一种？</strong></p><ul><li><strong>⼀般我们使用实现 Runnable 接口</strong></li><li><strong>可以避免 Java 中的单继承的限制</strong></li><li>应该将 <strong>并发运行任务和运行机制解耦</strong>，因此我们选择实现 Runnable 接口这种方式</li></ul>`,60)]))}const b=i(r,[["render",g]]);export{F as __pageData,b as default};
