import{_ as i,o as a,c as e,a6 as t}from"./chunks/framework.BkI9ovSD.js";const n="/assets/62.BF2pAUVe.png",l="/assets/493.vsZD9tNg.png",p="/assets/495.BFaSrZyH.png",h="/assets/496.fFMydVcE.png",k="/assets/497.PyOV7nil.png",o="/assets/498.CCfYYKh5.png",r="/assets/499.DpUxWbzY.png",d="/assets/569.CgbLHZis.png",S=JSON.parse('{"title":"会话技术","description":"","frontmatter":{"title":"会话技术","date":"2023-04-21T00:00:00.000Z","tags":["JSP","Servlet","http","Cookie","Session"],"categories":["JavaWeb"]},"headers":[],"relativePath":"blog/JavaWeb/会话技术.md","filePath":"blog/JavaWeb/会话技术.md","lastUpdated":1734533910000}'),g={name:"blog/JavaWeb/会话技术.md"};function E(c,s,y,u,C,F){return a(),e("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t('<h1 id="会话技术" tabindex="-1">会话技术 <a class="header-anchor" href="#会话技术" aria-label="Permalink to &quot;会话技术&quot;">​</a></h1><h2 id="会话跟踪技术" tabindex="-1">会话跟踪技术 <a class="header-anchor" href="#会话跟踪技术" aria-label="Permalink to &quot;会话跟踪技术&quot;">​</a></h2><p><strong>会话跟踪</strong> 这个词，我们需要拆开来进行解释，首先要理解什么是 <strong>会话</strong>，然后再去理解什么是 <strong>会话跟踪</strong>。</p><h3 id="会话" tabindex="-1">会话 <a class="header-anchor" href="#会话" aria-label="Permalink to &quot;会话&quot;">​</a></h3><p>会话是指用户打开浏览器，访问 web 服务器的资源，会话建立，直到有一方断开连接，会话结束。</p><p>在一次会话中可以包含 <strong>多次</strong> 请求和响应。</p><ul><li>从浏览器发出请求到服务端响应数据给前端之后，一次会话（在浏览器和服务器之间）就被建立了</li><li>会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会一直保持着</li><li>浏览器和服务器就可以继续使用该会话进行请求发送和响应，上述的整个过程就被称之为 <strong>会话</strong>。</li></ul><p>用实际场景来理解的话，比方说在我们访问京东的时候，当打开浏览器进入京东首页后，浏览器和京东的服务器之间就建立了一次会话，后面的搜索商品，查看商品的详情，加入购物车等操作，都是在这一次会话中完成。</p><p>思考：下图中总共建立了几个会话？</p><p><img src="'+n+'" alt=""></p><p>每个浏览器都会与服务端建立一个会话，加起来总共是 <strong>3</strong> 个会话。</p><h3 id="会话跟踪" tabindex="-1">会话跟踪 <a class="header-anchor" href="#会话跟踪" aria-label="Permalink to &quot;会话跟踪&quot;">​</a></h3><p>会话跟踪是一种维护浏览器状态的方法，服务端需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间 <strong>共享数据</strong>。</p><p>服务端平时会收到多个请求，这多个请求可能来自多个浏览器，如上图中的 6 个请求其实来自 3 个浏览器，而服务端需要识别请求是否来自同一个浏览器。服务端识别浏览器的过程，这个过程就是 <strong>会话跟踪</strong>。服务端识别浏览器后就可以在同一个会话中多次请求之间来共享数据。</p><p>那么我们又有问题需要思考：一个会话中的多次请求为什么要共享数据呢？数据共享后能实现哪些功能呢？</p><ul><li><p>购物车：<strong>加入购物车</strong> 和 <strong>去购物车结算</strong> 是两次请求，但是后面这次请求要想展示前一次请求所添加的商品，就需要用到数据共享。</p></li><li><p>页面展示用户登录信息：很多网站，登录后访问多个功能发送多次请求后，浏览器上都会有当前登录用户的信息[用户名]，比如百度、京东、码云等。</p></li><li><p>网站登录页面的 <strong>记住我</strong> 功能：当用户登录成功后，勾选 <strong>记住我</strong> 按钮后下次再登录的时候，网站就会自动填充用户名和密码，简化用户的登录操作，多次登录就会有多次请求，他们之间也涉及到共享数据。</p></li><li><p>登录页面的验证码功能：<strong>生成验证码</strong> 和 <strong>输入验证码后点击注册</strong> 这也是两次请求，这两次请求的数据之间要进行对比，相同则允许注册，不同则拒绝注册，该功能的实现也需要在同一次会话中共享数据。</p></li></ul><p>通过这几个例子，我们对 <strong>会话追踪</strong> 技术已经有了一定的理解，该技术在实际开发中也非常重要。</p><p>在学习会话跟踪技术之前，我们需要思考：为什么现在 <strong>浏览器</strong> 和 <strong>服务器</strong> 之间不支持数据共享呢？</p><p>原因是：</p><ul><li>浏览器和服务器之间使用的是 HTTP 请求来进行数据传输的，而 HTTP 协议是 <strong>无状态</strong> 的，每次浏览器向服务器请求时，服务器都会将该请求视为 <strong>新的</strong> 请求</li></ul><ul><li>HTTP 协议设计成无状态的目的是让每次请求之间相互独立，互不影响</li><li>所以请求与请求之间独立后，就无法实现多次请求之间的数据共享</li></ul><p>会话跟踪技术的实现方式有：</p><ul><li><p><strong>客户端</strong> 会话跟踪技术：<strong>Cookie</strong></p></li><li><p><strong>服务端</strong> 会话跟踪技术：<strong>Session</strong></p></li></ul><p>这两个技术都可以实现会话跟踪，它们之间最大的区别：Cookie 是存储在浏览器端的，而 Session 是存储在服务器端的。</p><h2 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h2><h3 id="cookie-的概念" tabindex="-1">Cookie 的概念 <a class="header-anchor" href="#cookie-的概念" aria-label="Permalink to &quot;Cookie 的概念&quot;">​</a></h3><p>Cookie 是客户端会话技术，它是将数据保存到客户端，以后每次请求都携带 Cookie 数据进行访问。</p><h3 id="cookie-的工作流程" tabindex="-1">Cookie 的工作流程 <a class="header-anchor" href="#cookie-的工作流程" aria-label="Permalink to &quot;Cookie 的工作流程&quot;">​</a></h3><p><img src="'+l+`" alt=""></p><ol><li>服务端提供了两个 Servlet，分别是 ServletA 和 ServletB</li><li>浏览器发送 HTTP 请求 1 给服务端，服务端 ServletA 接收请求并进行业务处理</li><li>服务端 ServletA 在处理的过程中可以创建一个 Cookie 对象并将 <strong>name = zs</strong> 的数据存入 Cookie</li><li>服务端 ServletA 在响应数据的时候，会把 Cookie 对象一并返回给浏览器</li><li>浏览器接收到响应数据，会把 Cookie 对象中的数据存储在浏览器内存中，<strong>此时浏览器和服务端就建立了一次会话</strong></li><li><strong>在同一次会话中</strong>，浏览器再次发送 HTTP 请求 2 给服务端 ServletB，浏览器这次会同时携带着 Cookie 对象中的数据</li><li>ServletB 接收到请求和数据后，就可以获取到存储在 Cookie 对象中的数据，这样同一个会话中的多次请求之间就实现了数据的共享</li></ol><h3 id="cookie-的基本使用" tabindex="-1">Cookie 的基本使用 <a class="header-anchor" href="#cookie-的基本使用" aria-label="Permalink to &quot;Cookie 的基本使用&quot;">​</a></h3><p>对于 Cookie 的使用，我们更关注的应该是服务端代码如何操作 Cookie。服务端对于 Cookie 的操作主要分两大类，分别是发送 Cookie 和获取 Cookie。</p><h4 id="发送-cookie" tabindex="-1">发送 Cookie <a class="header-anchor" href="#发送-cookie" aria-label="Permalink to &quot;发送 Cookie&quot;">​</a></h4><ol><li><p>创建 Cookie 对象，并设置数据:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cookie cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li><li><p>发送 Cookie 到客户端：使用 <strong>response</strong> 对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cookie);</span></span></code></pre></div></li></ol><h4 id="获取-cookie" tabindex="-1">获取 Cookie <a class="header-anchor" href="#获取-cookie" aria-label="Permalink to &quot;获取 Cookie&quot;">​</a></h4><ol><li><p>获取客户端携带的所有 Cookie，使用 <strong>request</strong> 对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] cookies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCookies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li><li><p>遍历数组，获取每一个 Cookie 对象</p></li><li><p>使用 Cookie 对象方法获取数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cookie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cookie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li></ol><p>思考，在访问 ServletA 和 ServletB 的时候，关闭浏览器，重启浏览器后访问 ServletB 能否获取到 Cookie 中的数据呢？这个问题，我会在 <strong>Cookie 的使用细节</strong> 一节中讲。</p><h3 id="cookie-的原理分析" tabindex="-1">Cookie 的原理分析 <a class="header-anchor" href="#cookie-的原理分析" aria-label="Permalink to &quot;Cookie 的原理分析&quot;">​</a></h3><p>对于 Cookie 的实现原理是基于 HTTP 协议的，其中涉及到 HTTP 协议中的两个请求头信息：</p><ul><li>响应头：set-cookie</li><li>请求头：cookie</li></ul><p><img src="`+p+`" alt=""></p><p>前面的案例中，ServletA 给前端发送 Cookie，ServletB 可以从 request 中获取到 Cookie。</p><p>ServletA 给前端响应数据的时候，Tomcat 服务器都是基于 HTTP 协议来响应数据，当 Tomcat 发现后端要返回的是一个 Cookie 对象之后，Tomcat 就会在响应头中添加一行数据 <strong>Set-Cookie:username=zs</strong>。</p><p>浏览器获取到响应结果后，从响应头中就可以获取到 Set-Cookie 对应的值 username=zs，并将数据存储在浏览器的内存中。</p><p>浏览器再次发送请求给 ServletB 的时候，浏览器会自动在请求头中添加 <strong>Cookie: username=zs</strong> 发送给服务端 ServletB。</p><p>Request 对象会把请求头中 cookie 对应的值封装成一个个 Cookie 对象，最终形成一个数组，ServletB 通过 Request 对象获取到 Cookie[] 后，就可以从中获取自己需要的数据。</p><h3 id="cookie-的使用细节" tabindex="-1">Cookie 的使用细节 <a class="header-anchor" href="#cookie-的使用细节" aria-label="Permalink to &quot;Cookie 的使用细节&quot;">​</a></h3><h4 id="cookie-的存活时间" tabindex="-1">Cookie 的存活时间 <a class="header-anchor" href="#cookie-的存活时间" aria-label="Permalink to &quot;Cookie 的存活时间&quot;">​</a></h4><p>前面我们思考过一个问题：在访问 ServletA 和 ServletB 的时候，关闭浏览器，重启浏览器后访问 ServletB 能否获取到 Cookie 中的数据呢？</p><p><strong>注意：浏览器关闭再打开不是指打开一个新的选项卡，而且必须是先关闭整个浏览器再打开浏览器，顺序不能变。</strong></p><p>针对上面这个问题，通过测试我们会发现，ServletB 中无法再获取到 Cookie 数据了，这是为什么呢？</p><p><strong>答案是，在默认情况下，Cookie 存储在了浏览器的内存中，当浏览器关闭时，内存也会得到释放，Cookie 就会被销毁。</strong></p><p>如果我们只使用这种默认情况下的 Cookie，那么有些需求就永远无法实现，比如：</p><p>很多网站的登录页面上有一个 <strong>记住我</strong> 的功能，第一次输入用户名和密码并勾选 <strong>记住我</strong> ，然后进行登录，下次再登陆的时候，用户名和密码就会被自动填充，不需要再重新输入登录。</p><p>倘若我们希望 <strong>记住我</strong> 这个功能需要记住用户名和密码一个星期，那么默认情况下的 Cookie 就是做不到的，因为默认情况下，浏览器一关，Cookie 就会从浏览器内存中删除，<strong>记住我</strong> 功能就无法实现。</p><p>所以我们 <strong>需要将 Cookie 进行持久化存储</strong>，而 Cookie 已经为我们提供好了对应的 API 来完成这件事：</p><ul><li><p>设置 Cookie 存活时间，单位为秒</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setMaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> seconds)</span></span></code></pre></div></li></ul><p>其参数范围为：</p><ol><li><p>正数：将 Cookie 写入浏览器所在电脑的硬盘，持久化存储，到时间自动删除</p></li><li><p>负数：默认值，Cookie 在当前浏览器内存中，当浏览器关闭，则 Cookie 被销毁</p></li><li><p>零：删除操作，删除对应的 Cookie</p></li></ol><p>接下来，咱们就在 ServletA 中去设置 Cookie 的存活时间。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WebServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/aServlet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AServlet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //发送Cookie</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //1. 创建Cookie对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cookie cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //设置存活时间，一周、7天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setMaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//易阅读，需程序计算</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//cookie.setMaxAge(604800); //不易阅读(可以使用注解弥补)，程序少进行一次计算</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //2. 发送Cookie，response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cookie);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="cookie-存储中文" tabindex="-1">Cookie 存储中文 <a class="header-anchor" href="#cookie-存储中文" aria-label="Permalink to &quot;Cookie 存储中文&quot;">​</a></h4><p>测试一下，将之前 <strong>username=zs</strong> 的值改成 <strong>username=张三</strong>，把汉字 <strong>张三</strong> 存入到 Cookie 中，看看效果:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WebServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/aServlet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AServlet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 		//发送Cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cookie cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,value);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //设置存活时间   ，1周 7天</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setMaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //2. 发送Cookie，response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cookie);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>启动访问测试，访问 <code>http://localhost:8080/cookie-demo/aServlet</code> 会发现浏览器会提示错误信息：</p><p><img src="`+h+'" alt=""></p><p>由此，我们得到一个结论：<strong>Cookie 不能直接存储中文！</strong></p><p>那该怎么办呢？这个时候，我们可以使用之前学过的 <strong>URL 编码和 URL 解码</strong>，所以如果需要存储中文，就需要进行转码，具体的实现思路为:</p><ol><li><p>在 ServletA 中对中文进行 URL 编码，采用 URLEncoder.encode()，将编码后的值存入 Cookie 中</p></li><li><p>在 ServletB 中获取 Cookie 中的值，获取的值为 URL 编码后的值</p></li><li><p>将获取的值再进行 URL 解码，采用 URLDecoder.decode()，就可以获取到对应的中文值</p></li></ol><h2 id="session" tabindex="-1">Session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;Session&quot;">​</a></h2><p>Cookie 已经能完成一次会话多次请求之间的数据共享，之前我们还提到过 Session 也可以实现。</p><h3 id="session-的概念" tabindex="-1">Session 的概念 <a class="header-anchor" href="#session-的概念" aria-label="Permalink to &quot;Session 的概念&quot;">​</a></h3><p>Session 是服务端会话跟踪技术，它是将数据保存在了服务端。</p><p>Session 是存储在服务端，而 Cookie 是存储在客户端，因为存储在客户端的数据容易被窃取和截获，存在很多不安全的因素，所以数据存储在服务端相比于客户端来说显然更加安全。</p><h3 id="session-的工作流程" tabindex="-1">Session 的工作流程 <a class="header-anchor" href="#session-的工作流程" aria-label="Permalink to &quot;Session 的工作流程&quot;">​</a></h3><p><img src="'+k+'" alt=""></p><ol><li>在服务端的 ServletA 获取一个 Session 对象，把数据存入其中</li><li>在服务端的 ServletB 获取到相同的 Session 对象，从中取出数据</li><li>就可以实现一次会话中多次请求之间的数据共享了</li><li>现在最大的问题是如何保证 ServletA 和 ServletB 使用的是同一个 Session 对象（在 <strong>Session 的原理分析</strong> 中会讲解）</li></ol><h3 id="session-的基本使用" tabindex="-1">Session 的基本使用 <a class="header-anchor" href="#session-的基本使用" aria-label="Permalink to &quot;Session 的基本使用&quot;">​</a></h3><p>在 JavaEE 中提供了 HttpSession 接口，来实现一次会话的多次请求之间数据共享功能。</p><p>具体的使用步骤：</p><h4 id="获取-session-对象" tabindex="-1">获取 Session 对象 <a class="header-anchor" href="#获取-session-对象" aria-label="Permalink to &quot;获取 Session 对象&quot;">​</a></h4><ul><li><p>使用的是 request 对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HttpSession Session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li></ul><h4 id="session-对象提供的功能" tabindex="-1">Session 对象提供的功能 <a class="header-anchor" href="#session-对象提供的功能" aria-label="Permalink to &quot;Session 对象提供的功能&quot;">​</a></h4><ul><li><p>存储数据到 Session 域中</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String name, Object o)</span></span></code></pre></div></li><li><p>根据 key 获取值</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String name)</span></span></code></pre></div></li><li><p>根据 key 删除键值对</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String name)</span></span></code></pre></div></li></ul><p><strong>注意：Session 中可以存储的是一个 Object 类型的数据，也就是说 Session 中可以存储任意数据类型。</strong></p><h3 id="session-的原理分析" tabindex="-1">Session 的原理分析 <a class="header-anchor" href="#session-的原理分析" aria-label="Permalink to &quot;Session 的原理分析&quot;">​</a></h3><p>首先，<strong>Session 是基于 Cookie 实现的</strong>，但这句话其实不太能详细的说明 Session 的底层实现。</p><p><img src="'+o+'" alt=""></p><p>Session 要想实现一次会话多次请求之间的数据共享，就必须要保证在一次会话多次请求中获取 Session 的对象是同一个。</p><p>原理如下：</p><p><img src="'+r+'" alt=""></p><ol><li>ServletA 在第一次获取 Session 对象的时候，Session 对象会有一个唯一的标识，假如是 <code>id:10</code></li><li>ServletA 在 Session 中存入其他数据并处理完成所有业务后，需要通过 Tomcat 服务器响应结果给浏览器</li><li>Tomcat 服务器发现业务处理中使用了 Session 对象，就会把 Session 的唯一标识 <code>id:10</code> 当做一个cookie，添加 <code>Set-Cookie:JESSIONID=10</code> 到响应头中，并响应给浏览器</li><li>浏览器接收到响应结果后，会把响应头中的 coookie 数据存储到浏览器的内存中</li><li>浏览器在同一会话中访问 ServletB 的时候，会把cookie中的数据按照 <code>cookie: JESSIONID=10</code> 的格式添加到请求头中并发送给服务器 Tomcat</li><li>ServletB 获取到请求后，从请求头中就读取 cookie 中的 <strong>JSessionID</strong> 值为10，然后就会到服务器 Tomcat 的内存中寻找 <code>id:10</code> 的 Session 对象，如果找到了，就直接返回该对象，如果没有则再创建一个 Session 对象</li><li>关闭再打开浏览器后，因为浏览器的 cookie 已被销毁，所以就没有 JESSIONID 的数据，服务端获取到的 Session 就是一个全新的 Session 对象</li></ol><p>由上文可知，Session 是由 Tomcat 进行统一管理的，至此，我们就解释了什么叫 <strong>Session 是基于 Cookie 实现的</strong>。</p><h3 id="session-的使用细节" tabindex="-1">Session 的使用细节 <a class="header-anchor" href="#session-的使用细节" aria-label="Permalink to &quot;Session 的使用细节&quot;">​</a></h3><h4 id="session-钝化与活化" tabindex="-1">Session 钝化与活化 <a class="header-anchor" href="#session-钝化与活化" aria-label="Permalink to &quot;Session 钝化与活化&quot;">​</a></h4><p>思考：服务器重启后，Session 中的数据是否还会存在？</p><p>理论上，服务器端 ServletA 和 ServletB 共用的 Session 对象是存储在服务器的内存中，服务器重新启动后，内存中的数据应该已经被释放，对象也应该都销毁了，所以 Session 数据应该也已经不存在了。</p><p>但是如果 Session 不存在会引发什么问题呢?</p><p>场景举例：</p><ol><li>用户把需要购买的商品添加到购物车，因为要实现同一个会话多次请求的数据共享，所以假设把数据存在了 Session 对象中</li><li>用户正要付钱的时候接到一个电话，付钱的动作就暂停了</li><li>正在用户打电话的时候，购物网站因为某些原因需要重启</li><li>重启后 Session 数据被销毁，购物车中的商品信息也就会随之而消失</li><li>用户电话结束，想再次发起支付，此时就会出为问题</li></ol><p><strong>所以说，对于 Session 里的数据，我们应该做到就算服务器重启了，也应该能把数据保存下来才对。</strong></p><p>实际上，Tomcat 服务器在正常关闭和启动的情况下，Session 中的数据是可以被保存下来的。</p><p>那么 Tomcat 服务器到底是如何做到的呢？</p><p>答案就是：Session 的 <strong>钝化</strong> 和 <strong>活化</strong>。</p><p><strong>钝化</strong>：</p><ul><li><p>在服务器正常关闭后，Tomcat 会自动将 Session 数据写入到硬盘中。</p></li><li><p>钝化的数据路径为：<code>项目目录\\target\\tomcat\\work\\Tomcat\\localhost\\项目名称\\SessionS.ser</code></p><p><img src="'+d+`" alt="1629440576828"></p></li></ul><p><strong>活化</strong>：</p><ul><li>再次启动服务器后，Tomcat 会把钝化的数据从文件中加载到 Session 中。</li></ul><ul><li>数据加载到 Session 中后，路径中的 <code>SESSIONS.ser</code> 文件会被删除掉。</li></ul><p>对于上述的整个过程，只需要了解下即可，因为所有的过程都是 Tomcat 自己完成的，不需要我们参与。</p><p>值得我们注意的是：</p><ul><li><p>Session 数据存储在服务端，服务器重启后，Session 数据会被保存</p></li><li><p>浏览器被关闭启动后，重新建立的连接就已经是一个全新的会话，获取的 Session 数据也是一个新的对象</p></li><li><p>Session 的数据要想共享，浏览器不能关闭，所以 Session 数据不能长期保存数据</p></li><li><p>cookie 存储在客户端，是可以长期保存的</p></li></ul><h4 id="session-销毁" tabindex="-1">Session 销毁 <a class="header-anchor" href="#session-销毁" aria-label="Permalink to &quot;Session 销毁&quot;">​</a></h4><p>Session 的销毁会有两种方式：</p><ul><li><p>默认情况下，无操作后 30 分钟自动销毁。</p><ul><li><p>这个失效时间，是可以通过配置进行修改的</p></li><li><p>在项目的 web.xml 中配置</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">web-app</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xmlns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         xmlns:xsi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         xsi:schemaLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Session-config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Session-timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;100&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Session-timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Session-config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">web-app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>如果没有配置，默认是30分钟，默认值是在 Tomcat 的 web.xml 配置文件中写死的</p></li></ul></li></ul><ul><li><p>调用 Session 对象的 invalidate() 方法进行销毁。</p><ul><li><p>在SessionDemo2 类中添加 Session 销毁的方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取Session对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HttpSession Session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 销毁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li><li><p>该销毁方法一般会用在用户退出的时候，这时需要将 Session 销毁掉。</p></li></ul></li></ul><p>Cookie 和 Session 都是来完成一次会话内多次请求间 <strong>数据共享</strong> 的，但其区别如下：</p><table tabindex="0"><thead><tr><th>区别</th><th>Cookie</th><th>Session</th></tr></thead><tbody><tr><td>存储位置</td><td>客户端</td><td>服务端</td></tr><tr><td>安全性</td><td>不安全</td><td>安全</td></tr><tr><td>数据大小</td><td>最大 3KB</td><td>无大小限制</td></tr><tr><td>存储时间</td><td>可以通过 setMaxAge() 长期存储</td><td>默认30分钟</td></tr><tr><td>服务器性能</td><td>不占用服务器资源</td><td>占用服务器资源</td></tr></tbody></table><p>各自常见的应用场景：</p><ul><li>购物车：使用Cookie来存储</li><li>以登录用户的名称展示：使用Session来存储</li><li>记住我功能：使用Cookie来存储</li><li>验证码：使用Session来存储</li></ul><p>结论：</p><ul><li>Cookie 是用来保证用户在未登录情况下的身份识别</li><li>Session 是用来保存用户登录后的数据</li></ul><p>介绍完 Cookie 和 Session 以后，具体用哪个还是需要根据具体的业务进行具体分析。</p>`,123)]))}const b=i(g,[["render",E]]);export{S as __pageData,b as default};
