import{_ as i,o as a,c as e,a6 as t}from"./chunks/framework.BkI9ovSD.js";const n="/assets/image-20240705162734189.B2jbmIjd.png",l="/assets/image-20210731142219735.DWUDNK9B.png",p="/assets/image-20210731143401460.C1-by8XU.png",o="/assets/image-20210731144304990.CpdBYd67.png",r="/assets/image-20210731144458680.mAjMqvRs.png",h="/assets/image-20210731144820638.BagcNBRN.png",k="/assets/image-20210731145914960.CPKrAv5G.png",d="/assets/image-20210731153059464.CI_ab3vJ.png",c="/assets/image-20210731153743354.BZ0z9iKK.png",g="/assets/image-20210731154257653.BtLqOl5I.png",u="/assets/image-20210731155649535.D_vNTKT8.png",F="/assets/image-20210731155844368.CHQykgz_.png",y="/assets/image-20210731155856199.Dsd33y5L.png",b="/assets/image-20210731155903037.DenkxskS.png",m="/assets/image-20210731161354344.BrvN5cJB.png",E="/assets/image-20210731161746245.Cnrd6uMj.png",C="/assets/image-20210731161950495.BH8N4EdP.png",D="/assets/image-20210731163255863.edTkwSk5.png",v="/assets/image-20210731164159811.BNl7gWjS.png",B="/assets/image-20210731173541846.CuS9k8bv.png",x="/assets/image-20210731175155453.C-zzwDtc.png",q="/assets/image-20210731175806273.B91nWr9P.png",f="/assets/image-20210731180921742.6FRkAFy-.jpg",L=JSON.parse('{"title":"Docker 入门","description":"","frontmatter":{"title":"Docker 入门","date":"2024-07-05T00:00:00.000Z","tags":["Docker"],"categories":["笔记"]},"headers":[],"relativePath":"blog/Note/Docker入门.md","filePath":"blog/Note/Docker入门.md","lastUpdated":1734488008000}'),A={name:"blog/Note/Docker入门.md"};function P(_,s,j,R,N,S){return a(),e("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t('<h1 id="docker-入门" tabindex="-1">Docker 入门 <a class="header-anchor" href="#docker-入门" aria-label="Permalink to &quot;Docker 入门&quot;">​</a></h1><h2 id="初识-docker" tabindex="-1">初识 Docker <a class="header-anchor" href="#初识-docker" aria-label="Permalink to &quot;初识 Docker&quot;">​</a></h2><h3 id="微服务架构的问题" tabindex="-1">微服务架构的问题 <a class="header-anchor" href="#微服务架构的问题" aria-label="Permalink to &quot;微服务架构的问题&quot;">​</a></h3><p>微服务架构虽然带来了灵活性和可扩展性，但也引入了部署和管理上的挑战，特别是在大规模系统中：</p><ul><li><strong>依赖组件的冲突</strong>：在微服务架构中，每个服务可能依赖不同的后端技术或中间件，如 Node.js、Redis、RabbitMQ、MySQL等。这些不同的依赖项可能需要特定的库版本或配置，容易引起冲突。</li><li><strong>环境一致性问题</strong>：开发、测试和生产环境的不一致性是导致部署问题的另一个常见原因。</li><li><strong>复杂的依赖关系</strong>：微服务间的依赖关系复杂，可能导致服务启动顺序、数据一致性和事务处理等问题。</li></ul><p><img src="'+n+'" alt="image-20240705162734189"></p><h4 id="docker-解决依赖兼容问题" tabindex="-1">Docker 解决依赖兼容问题 <a class="header-anchor" href="#docker-解决依赖兼容问题" aria-label="Permalink to &quot;Docker 解决依赖兼容问题&quot;">​</a></h4><p>针对在传统部署中常见的环境差异和依赖兼容性问题，Docker 利用容器技术提供了一种封装应用及其全部依赖的方法，其核心功能为：</p><ol><li><strong>应用与依赖打包</strong>： <ul><li><strong>Libs (函数库)</strong>：应用运行必需的库文件。</li><li><strong>Deps (依赖)</strong>：应用运行所需的其他软件或依赖项。</li><li><strong>配置文件</strong>：配置信息，确保应用在任何环境中都按预期工作。</li><li>通过 Dockerfile 定义，所有必需的组件都被打包进一个 Docker 镜像中。</li></ul></li><li><strong>隔离的容器环境</strong>： <ul><li>每个 Docker 容器都在一个隔离的环境中运行，拥有自己的文件系统、网络配置和依赖库，确保不同容器间互不干扰。</li></ul></li></ol><p><img src="'+l+'" alt="image-20210731142219735"></p><p>这样打包好的应用包中，既包含应用本身，也包含应用所需要的 Libs、Deps，无需在操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p><p>尽管解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统的版本也会有差异。操作系统的差异，特别是在系统应用和函数库上的差异，常常导致应用无法在不同环境中一致运行。</p><p>怎么解决这些问题呢？</p><h4 id="docker-解决操作系统环境差异" tabindex="-1">Docker 解决操作系统环境差异 <a class="header-anchor" href="#docker-解决操作系统环境差异" aria-label="Permalink to &quot;Docker 解决操作系统环境差异&quot;">​</a></h4><p>为了有效地解决操作系统环境之间的差异，理解操作系统的基本结构是关键。</p><p>以 Ubuntu 操作系统为例，其结构主要包括：</p><ul><li><strong>计算机硬件</strong>：基本硬件组件，如 CPU、内存和磁盘等，是运行任何操作系统和应用程序的物理基础。</li><li><strong>系统内核</strong>：Linux 内核是所有 Linux 发行版的核心，包括 Ubuntu、CentOS 和 Fedora 等。内核负责与硬件交互，并提供 <strong>内核指令</strong> 来管理和控制硬件。</li><li><strong>系统应用</strong>：包括操作系统提供的各种应用和 <strong>函数库</strong>。这些库是对内核功能的高级封装，使得开发和应用运行更加方便。</li></ul><p><img src="'+p+'" alt="image-20210731143401460"></p><p>应用与计算机的交互流程：</p><ol><li>应用通过调用操作系统提供的函数库执行功能。</li><li>函数库封装了内核指令集，简化了应用对硬件的操作。</li><li>内核指令直接与硬件交互，执行具体的硬件操作。</li></ol><p>在不同的 Linux 发行版中（比如 Ubuntu 和 CentOS），尽管核心内核相同（都基于 Linux），但系统应用和提供的函数库可能会有所不同：</p><p><img src="'+o+'" alt="image-20210731144304990"></p><p>在这种情况下，如果尝试将一个针对 Ubuntu 特定函数库编写的 MySQL 应用直接安装到 CentOS 系统上，可能会因为找不到相应的函数库或版本不匹配而出现错误：</p><p><img src="'+r+'" alt="image-20210731144458680"></p><p>这种差异正是 Docker 通过容器化技术解决的问题，它通过将应用及其全部依赖（包括特定的系统函数库）打包在一起，确保应用在任何 Linux 系统上都能一致运行，从而避免了依赖不匹配的问题。</p><ol><li><strong>内核级共享</strong>： <ul><li>Docker 容器共享宿主机的操作系统内核，但封装了应用需要的所有用户空间组件（如系统函数库）。</li><li>这意味着，无论宿主机使用的是哪种 Linux 发行版（如 Ubuntu 或 CentOS），只要内核兼容，容器都可以运行。</li></ul></li><li><strong>应用与系统函数库的封装</strong>： <ul><li>Docker 容器内包含了应用运行所需的特定版本的系统函数库，无需依赖宿主机上的库。</li><li>当应用在容器内运行时，它调用的是容器内部的函数库，而非宿主机上的，从而避免了因版本不匹配或缺失库文件而引起的错误。</li></ul></li></ol><p><img src="'+h+'" alt="image-20210731144820638"></p><h4 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ul><li><p>Docker 如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker 允许开发中将应用、依赖、函数库、配置一起 <strong>打包</strong>，形成可移植镜像</li><li>Docker 应用运行在容器中，使用沙箱机制，相互 <strong>隔离</strong></li></ul></li><li><p>Docker 如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker 镜像中包含完整运行环境，包括系统函数库，仅依赖操作系统内核，因此可以在任意内核兼容的操作系统上运行</li></ul></li></ul><h3 id="docker-的主要优势" tabindex="-1">Docker 的主要优势 <a class="header-anchor" href="#docker-的主要优势" aria-label="Permalink to &quot;Docker 的主要优势&quot;">​</a></h3><ul><li><strong>完整封装</strong>：Docker 使得程序及其所有依赖和运行环境可以一起被封装成一个单一的镜像。这样的镜像可以轻松迁移到任何 Linux 系统上运行，极大地提高了应用的部署灵活性。</li><li><strong>隔离的运行环境</strong>：通过沙箱机制，Docker 在运行时为每个容器提供了一个安全隔离的环境，确保应用之间互不干扰。</li><li><strong>易于管理</strong>：Docker 容器的启动和移除都可以通过简单的命令完成，使得应用的部署、测试和扩展变得更加快速和方便。</li></ul><h3 id="docker-和虚拟机的区别" tabindex="-1">Docker 和虚拟机的区别 <a class="header-anchor" href="#docker-和虚拟机的区别" aria-label="Permalink to &quot;Docker 和虚拟机的区别&quot;">​</a></h3><p>Docker 和虚拟机都提供了 <strong>应用隔离</strong> 和 <strong>环境一致性</strong> 的解决方案，但它们在技术实现和性能优化上存在显著差异。</p><p><strong>虚拟机技术</strong>：</p><ul><li><strong>完整的硬件级模拟</strong>：虚拟机通过模拟整个硬件系统来运行另一个完整的操作系统。例如，在 Windows 系统中可以运行 Ubuntu，从而能够在该虚拟的 Ubuntu 系统中运行应用。</li><li><strong>资源占用</strong>：由于需要模拟整个硬件和运行完整的操作系统，虚拟机通常需要较多的系统资源（CPU、内存、存储）。</li><li><strong>启动时间</strong>：启动一个虚拟机涉及整个操作系统的启动过程，因此启动时间相对较长。</li></ul><p><strong>Docker容器技术</strong>：</p><ul><li><strong>操作系统级别的虚拟化</strong>：Docker 容器与虚拟机不同，它不模拟硬件，也不运行完整的操作系统。相反，它仅封装应用及其依赖的函数库和配置，共享宿主机的操作系统内核。</li><li><strong>资源效率</strong>：Docker 容器由于共享宿主机的内核，因此在资源占用上更加高效。容器通常只占用必需的应用运行空间，使得硬件资源利用率更高。</li><li><strong>快速启动</strong>：Docker 容器不需要启动操作系统，启动速度远快于虚拟机，通常在几秒钟内完成。</li></ul><p><img src="'+k+'" alt="image-20210731145914960"></p><p>对比来看：</p><table tabindex="0"><thead><tr><th>特性</th><th>Docker</th><th>虚拟机</th></tr></thead><tbody><tr><td>性能</td><td>接近原生</td><td>性能较差</td></tr><tr><td>硬盘占用</td><td>一般为 MB</td><td>一般为GB</td></tr><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr></tbody></table><p>Docker 和虚拟机的主要差异：</p><ul><li><strong>实现层次</strong>：Docker 作为一个系统进程运行，使用操作系统级虚拟化；虚拟机则模拟了完整的操作系统。</li><li><strong>资源占用与性能</strong>：Docker 在体积、启动速度和运行性能上优于虚拟机，这使得 Docker 在需要快速迭代和高效资源利用的环境中特别有用。</li></ul><h3 id="docker-架构" tabindex="-1">Docker 架构 <a class="header-anchor" href="#docker-架构" aria-label="Permalink to &quot;Docker 架构&quot;">​</a></h3><h4 id="镜像与容器" tabindex="-1">镜像与容器 <a class="header-anchor" href="#镜像与容器" aria-label="Permalink to &quot;镜像与容器&quot;">​</a></h4><p>在 Docker 的生态系统中，**镜像 **和 <strong>容器</strong> 是两个核心概念：</p><ul><li><strong>镜像（Image）</strong>：镜像是一个包含应用程序及其所有依赖、库文件、环境设置和配置的静态文件包。这个文件包是只读的，作为创建容器的模板。</li><li><strong>容器（Container）</strong>：当镜像被启动时，它在内存中运行并形成一个或多个 <strong>容器</strong>。容器是隔离的、动态的执行环境，它允许多个容器实例独立运行，基于同一个镜像。</li></ul><p>例如，如果你下载了一个应用（如 QQ）的镜像，该镜像包含了运行该应用所需的所有文件和系统依赖。启动这个镜像就可以创建容器，实现例如同时登录多个账号等功能。</p><p><img src="'+d+'" alt="image-20210731153059464"></p><h4 id="镜像托管平台" tabindex="-1">镜像托管平台 <a class="header-anchor" href="#镜像托管平台" aria-label="Permalink to &quot;镜像托管平台&quot;">​</a></h4><p>市场上开源的应用程序非常多，打包这些应用往往是重复劳动。</p><p>为了提高效率，程序员就会将自己打包的应用镜像（例如 Redis、MySQL）镜像放到 <strong>镜像托管平台</strong> 上来共享使用，就像 GitHub 的代码共享一样。</p><p>Docker Registry 是一个存储、分发 Docker 镜像的服务。它是 Docker 镜像库的核心组件，允许用户和团队推送（push）和拉取（pull）镜像。这样，开发者可以上传自己构建的镜像到 Registry，其他用户则可以从 Registry 下载这些镜像来部署和运行容器。</p><p><strong>主要功能</strong>：</p><ul><li><strong>存储和管理镜像</strong>：Docker Registry 提供了存储、标记、管理和组织镜像的功能。</li><li><strong>版本控制和回滚</strong>：用户可以通过标签管理不同版本的镜像，方便回滚至旧版本。</li><li><strong>访问控制</strong>：支持配置权限和策略，控制谁可以访问和修改镜像。</li></ul><p><strong>类型</strong>：</p><ul><li><strong>公共 Registry</strong>：最著名的公共 Docker Registry 是 Docker Hub，它由 Docker 官方运营，提供了数以万计的镜像供全球用户使用。除此之外，还有其他公共镜像库如 Google Container Registry、Amazon Elastic Container Registry 等。</li><li><strong>私有 Registry</strong>：企业和开发者可以部署私有 Docker Registry（如 <a href="https://c.163yun.com/hub" target="_blank" rel="noreferrer">网易云镜像服务</a> 和 <a href="https://cr.console.aliyun.com/" target="_blank" rel="noreferrer">阿里云镜像库</a>），以便在内部环境中安全地管理和存储镜像，同时提供更快的访问速度和额外的本地化服务。这对于包含敏感信息或专有软件的镜像尤其重要。</li></ul><p><img src="'+c+'" alt="image-20210731153743354"></p><h4 id="docker-的客户端-服务器架构" tabindex="-1">Docker 的客户端-服务器架构 <a class="header-anchor" href="#docker-的客户端-服务器架构" aria-label="Permalink to &quot;Docker 的客户端-服务器架构&quot;">​</a></h4><p>Docker 使用客户端-服务器（Client-Server）架构：</p><ul><li><strong>服务端（Docker Daemon）</strong>：服务端是 Docker 守护进程，运行于 <strong>宿主机</strong> 上，负责镜像和容器的创建、运行和监控</li><li><strong>客户端（Docker Client）</strong>：客户端可以是命令行工具或任何使用 Docker API 的应用，它通过发送命令到 Docker 守护进程来管理容器和镜像。</li></ul><p><img src="'+g+'" alt="image-20210731154257653"></p><h2 id="docker-的基本操作" tabindex="-1">Docker 的基本操作 <a class="header-anchor" href="#docker-的基本操作" aria-label="Permalink to &quot;Docker 的基本操作&quot;">​</a></h2><h3 id="镜像操作" tabindex="-1">镜像操作 <a class="header-anchor" href="#镜像操作" aria-label="Permalink to &quot;镜像操作&quot;">​</a></h3><h4 id="镜像名称的组成" tabindex="-1">镜像名称的组成 <a class="header-anchor" href="#镜像名称的组成" aria-label="Permalink to &quot;镜像名称的组成&quot;">​</a></h4><p>Docker 镜像的名称通常由两部分组成：<code>[repository]:[tag]</code>。这里的 <code>repository</code> 是仓库名称，而 <code>tag</code> 指定了版本。如果没有明确指定 <code>tag</code>，默认值是 <code>latest</code>，表示最新版本的镜像。</p><p>例如，镜像名称 <code>mysql:5.7</code>中，<code>mysql</code> 是仓库名，<code>5.7</code> 是 tag，合起来表示 MySQL 的 5.7 版本镜像。</p><h4 id="常用镜像操作命令" tabindex="-1">常用镜像操作命令 <a class="header-anchor" href="#常用镜像操作命令" aria-label="Permalink to &quot;常用镜像操作命令&quot;">​</a></h4><p>以下是一些常用的 Docker 镜像操作命令：</p><p><img src="'+u+'" alt="image-20210731155649535"></p><h4 id="案例-1-拉取并查看镜像" tabindex="-1">案例 1：拉取并查看镜像 <a class="header-anchor" href="#案例-1-拉取并查看镜像" aria-label="Permalink to &quot;案例 1：拉取并查看镜像&quot;">​</a></h4><ul><li><p><strong>步骤 1</strong>：在镜像托管平台（如 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">DockerHub</a>） 上搜索需要的 <code>nginx</code> 镜像</p><p><img src="'+F+'" alt="image-20210731155844368"></p></li><li><p><strong>步骤 2</strong>：拉取 <code>nginx</code> 镜像：<code>docker pull nginx</code></p><p><img src="'+y+'" alt="image-20210731155856199"></p></li><li><p><strong>步骤 3</strong>：查看已拉取的镜像：<code>docker images</code></p><p><img src="'+b+'" alt="image-20210731155903037"></p></li></ul><h4 id="案例-2-保存与导入镜像" tabindex="-1">案例 2：保存与导入镜像 <a class="header-anchor" href="#案例-2-保存与导入镜像" aria-label="Permalink to &quot;案例 2：保存与导入镜像&quot;">​</a></h4><ul><li><p><strong>步骤 1</strong>：导出 <code>nginx</code> 镜像到磁盘，命令格式为 <code>docker save -o [保存的目标文件名称] [镜像名称]</code></p><p><img src="'+m+'" alt="image-20210731161354344"></p></li><li><p><strong>步骤 2</strong>：删除本地的 <code>nginx</code> 镜像：<code>docker rmi nginx:latest</code></p></li><li><p><strong>步骤 3</strong>：从磁盘文件加载镜像：<code>docker load -i nginx.tar</code></p><p><img src="'+E+'" alt="image-20210731161746245"></p></li></ul><h3 id="容器操作" tabindex="-1">容器操作 <a class="header-anchor" href="#容器操作" aria-label="Permalink to &quot;容器操作&quot;">​</a></h3><p>容器操作涉及多个命令，用于管理容器的生命周期和状态，包括创建、运行、暂停、停止和删除：</p><p><img src="'+C+'" alt="image-20210731161950495"></p><h4 id="容器状态" tabindex="-1">容器状态 <a class="header-anchor" href="#容器状态" aria-label="Permalink to &quot;容器状态&quot;">​</a></h4><p>容器可以处于以下状态：</p><ul><li><strong>运行</strong>：容器内的应用进程正在正常运行。</li><li><strong>暂停</strong>：容器中的进程被暂停，CPU 停止工作，但内存状态被保持。</li><li><strong>停止</strong>：容器中的进程已终止，相关资源如内存和 CPU 使用被释放。</li></ul><h4 id="常见容器操作命令" tabindex="-1">常见容器操作命令 <a class="header-anchor" href="#常见容器操作命令" aria-label="Permalink to &quot;常见容器操作命令&quot;">​</a></h4><ul><li><strong><code>docker run</code></strong>：创建并启动一个新容器。</li><li><strong><code>docker pause</code></strong>：暂停正在运行的容器。</li><li><strong><code>docker unpause</code></strong>：恢复已暂停的容器。</li><li><strong><code>docker stop</code></strong>：停止正在运行的容器。</li><li><strong><code>docker start</code></strong>：启动已停止的容器。</li><li><strong><code>docker rm</code></strong>：删除指定的容器，但默认情况下 <strong>不能删除正在运行的容器</strong> 。</li></ul><h4 id="案例-1-创建并运行容器" tabindex="-1">案例 1：创建并运行容器 <a class="header-anchor" href="#案例-1-创建并运行容器" aria-label="Permalink to &quot;案例 1：创建并运行容器&quot;">​</a></h4><p>创建并启动名为 <code>containerName</code> 的 Nginx 容器：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerName</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 80:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre></div><ul><li><code>--name containerName</code>：指定容器名称。</li><li><code>-p 80:80</code>：端口映射，将宿主机的 80 端口（冒号左侧）映射到容器的 80 端口（冒号右侧）。</li><li><code>-d</code>：后台运行容器。</li><li><code>nginx</code>：使用的镜像名称。</li></ul><h4 id="为什么需要端口映射" tabindex="-1">为什么需要端口映射 <a class="header-anchor" href="#为什么需要端口映射" aria-label="Permalink to &quot;为什么需要端口映射&quot;">​</a></h4><p>Docker 容器运行在隔离的网络环境中，这意味着它们拥有独立的网络栈。容器内部的网络服务（例如 Web 服务器或数据库）虽然在容器内部可以正常运行，但默认情况下，它们不会对外部网络环境（即宿主机网络）直接开放。因此，如果没有进行适当的网络配置，这些服务将无法从容器外部访问。</p><p>端口映射是解决这一隔离问题的关键。它允许外部请求通过宿主机的指定端口访问到容器内部的端口。这样做的好处是：</p><ul><li><strong>可访问性</strong>：通过将容器内运行的服务端口映射到宿主机的端口，用户可以使用宿主机的 IP 地址和端口号来访问容器内的服务。</li><li><strong>灵活性</strong>：用户可以选择任何空闲的宿主机端口映射到容器的任何端口，这提供了极大的配置灵活性，允许多个容器共享宿主机而不会端口冲突。</li><li><strong>安全性</strong>：端口映射还可以增加安全层次，因为只有显式映射的端口对外界可见。这样可以有效地隔离和保护容器内的应用，避免直接暴露容器内部的所有服务。</li></ul><p><img src="'+D+'" alt="image-20210731163255863"></p><h4 id="案例-2-进入容器并修改内部文件" tabindex="-1">案例 2：进入容器并修改内部文件 <a class="header-anchor" href="#案例-2-进入容器并修改内部文件" aria-label="Permalink to &quot;案例 2：进入容器并修改内部文件&quot;">​</a></h4><p><strong>步骤 1</strong>：使用 <code>docker exec</code> 命令进入容器：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><ul><li><code>-it</code>：交互式终端。</li><li><code>containerName</code>：容器名称。</li><li><code>bash</code>：进入容器后立刻执行的命令，这里是在容器内启动 bash shell。</li></ul><p><strong>步骤 2</strong>：导航到 Nginx 的 HTML 目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/share/nginx/html</span></span></code></pre></div><p>容器内部会模拟一个独立的 Linux 文件系统，看起来如同一个 Linux 服务器一样：</p><p><img src="'+v+'" alt="image-20210731164159811"></p><p><strong>步骤 3</strong>：修改 <code>index.html</code> 文件以改变显示内容：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/Welcome to nginx/欢迎您的访问/g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.html</span></span></code></pre></div><p>这个命令使用 <code>sed</code> 文本编辑器（容器内还没下载 <code>vim</code>）替换 HTML 页面中的默认欢迎消息。</p><p><strong>结果验证</strong>：访问宿主机 IP 地址，例如 <code>http://192.168.150.101</code>，在浏览器中查看修改后的页面。</p><p>注意：<code>docker exec</code> 命令可以进入容器并修改文件，但在容器内修改文件是 <strong>不推荐</strong> 的行为，原因是：</p><ul><li><strong>破坏了容器的可重复性</strong>：Docker 的一个核心优势是提供一致的环境以确保应用在不同环境中能够以相同的方式运行。如果在容器内部进行修改，这些更改通常不会被持久化或版本控制，这意味着重新启动或重新部署容器时这些修改会丢失，从而破坏了环境的一致性和可重复性。</li><li><strong>难以维护和升级</strong>：如果容器内的文件被频繁修改，每次升级或维护应用时都需要重新执行这些修改，这增加了管理的复杂性和出错的风险。更好的做法是将这些更改反映到 Docker 镜像中，通过更新镜像来推送更改。</li></ul><h4 id="查看容器日志" tabindex="-1">查看容器日志 <a class="header-anchor" href="#查看容器日志" aria-label="Permalink to &quot;查看容器日志&quot;">​</a></h4><p>在使用 Docker 管理容器时，监控容器的日志和状态是日常管理和故障排查中非常重要的方面。</p><p>要查看 Docker 容器的日志，可以使用 <code>docker logs</code> 命令。</p><p>这个命令会输出容器的 STDOUT 和 STDERR，即容器运行中生成的所有输出，包括应用日志。</p><p><strong>基本命令格式：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [容器ID或名称]</span></span></code></pre></div><p><strong>高级选项：</strong></p><ul><li><p>使用 <code>-f</code> 或 <code>--follow</code> 选项来实时跟踪日志输出：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_container</span></span></code></pre></div></li><li><p>使用 <code>--since</code> 选项来查看从某个时间点开始的日志，例如查看最近 10 分钟的日志：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --since</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_container</span></span></code></pre></div></li><li><p>使用 <code>--tail</code> 选项来查看最后 N 行的日志：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_container</span></span></code></pre></div></li></ul><h4 id="查看容器状态" tabindex="-1">查看容器状态 <a class="header-anchor" href="#查看容器状态" aria-label="Permalink to &quot;查看容器状态&quot;">​</a></h4><p>查看容器状态可以使用 <code>docker ps</code> 命令，它列出了所有 <strong>运行中</strong> 的容器。</p><p>如果要查看包括停止的容器在内的所有容器，可以添加 <code>-a</code> 或 <code>--all</code> 选项。</p><p><strong>基本命令格式：</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [选项]</span></span></code></pre></div><p><strong>示例命令：</strong></p><ul><li><p>查看所有容器（运行中和已停止的）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div></li><li><p>查看特定容器的详细状态，可以使用 <code>docker inspect</code> 命令，它提供了容器的配置和状态信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_container</span></span></code></pre></div></li></ul><p><strong>高级选项：</strong></p><ul><li><p>使用 <code>-f</code> 或 <code>--filter</code> 选项来根据条件过滤显示的容器，例如只查看处于“运行”状态的容器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;status=running&quot;</span></span></code></pre></div></li><li><p>使用 <code>--format</code> 来自定义输出格式，这可以让你精确控制显示的信息，例如只显示容器的 ID 和状态：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;{{.ID}}: {{.Status}}&quot;</span></span></code></pre></div></li></ul><h3 id="数据卷-容器数据管理" tabindex="-1">数据卷（容器数据管理） <a class="header-anchor" href="#数据卷-容器数据管理" aria-label="Permalink to &quot;数据卷（容器数据管理）&quot;">​</a></h3><p>在之前的 Nginx 案例中，修改 Nginx 的 HTML 页面时需要进入容器内部进行操作，非常不方便。</p><p>通常情况下，许多轻量级容器镜像（如 <code>alpine</code> 或 <code>busybox</code>）不包括 <code>vim</code> 或其他全功能编辑器，以保持镜像尽可能地小。</p><p>尽管在容器内安装和使用 <code>vim</code> 是可能的，但通常不推荐在运行中的容器内进行持久化的文件修改，因为这些更改不会反映到容器镜像中，并且可能违背了容器的 <strong>不可变</strong> 和 <strong>声明式管理</strong> 原则。</p><p>此外，直接在容器内修改数据引起的另一个问题是数据持久性的缺失。在升级或删除容器时，未持久化的数据会随容器一同被删除。这种 <strong>容器与数据的耦合</strong> 违反了现代云原生应用推荐的最佳实践。</p><p>为了避免这些问题，并确保容器管理的最佳实践，必须将数据与容器解耦，这就要用到数据卷（Volumes）了。</p><h4 id="什么是数据卷" tabindex="-1">什么是数据卷 <a class="header-anchor" href="#什么是数据卷" aria-label="Permalink to &quot;什么是数据卷&quot;">​</a></h4><p><strong>数据卷</strong> 是一种特别设计用来持久化和共享 Docker 容器数据的机制，且其生命周期独立于容器本身。</p><p>这意味着即使容器被删除，数据卷中的数据也不会丢失，可以被其他容器重新挂载和使用。</p><p>当定义一个数据卷时，我们可以指定一个宿主机上的目录，Docker 会将这个目录映射到容器内部的指定路径。</p><p>这使得容器内部的应用可以直接读写宿主机的文件系统，而这部分文件系统被封装在数据卷中。</p><p>因此，虽然从技术上讲数据卷表现为连接宿主机和容器的桥梁，但更准确的描述为：<strong>数据卷是管理数据存取的实体</strong>。</p><p><img src="'+B+`" alt="image-20210731173541846"></p><p><strong>主要特点</strong>：</p><ul><li><strong>数据持久化</strong>：数据卷保证了数据不会随容器的删除而丢失，实现了数据的持久存储。</li><li><strong>数据共享</strong>：数据卷可以被多个容器同时挂载，实现数据的共享和重用。</li><li><strong>与容器解耦</strong>：数据卷的生命周期独立于任何容器，可以在容器之间自由地连接和重用。</li><li><strong>高效性能</strong>：数据卷提供了比传统的持久化方式（如写入容器层）更高效的读写性能。</li></ul><h4 id="数据卷的应用场景" tabindex="-1">数据卷的应用场景 <a class="header-anchor" href="#数据卷的应用场景" aria-label="Permalink to &quot;数据卷的应用场景&quot;">​</a></h4><ul><li><strong>数据库存储</strong>：对于运行在容器中的数据库服务，使用数据卷存储数据库文件可以确保数据库数据的安全和持久化。</li><li><strong>配置文件管理</strong>：可以将配置文件放在数据卷中，通过挂载到容器内的特定位置，实现配置的动态加载和更新。</li><li><strong>日志存储</strong>：将应用日志输出到数据卷，可以使日志文件保持在容器重启后仍然可访问。</li><li><strong>内容管理</strong>：对于需要处理大量文件和媒体资料的应用，如 CMS 系统，使用数据卷可以提高数据的管理效率和安全性。</li></ul><p>注意：</p><ul><li>在 Docker 中，数据卷确实存储于宿主机的某个位置，但这个具体位置默认是由 Docker 管理的，不需要用户直接干预。</li><li>Docker 自动处理数据卷的存储位置，以确保容器化环境的抽象和安全性。</li><li>虽然一般不推荐，但如果有必要，用户可以指定数据卷的具体存储位置。</li></ul><h4 id="创建和管理数据卷" tabindex="-1">创建和管理数据卷 <a class="header-anchor" href="#创建和管理数据卷" aria-label="Permalink to &quot;创建和管理数据卷&quot;">​</a></h4><p>创建和使用数据卷的基本命令如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建一个新的数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_volume</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看指定数据卷的详细信息，比如数据卷指向的宿主机目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_volume</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除指定数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_volume</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除所有不在使用种的数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span></span></code></pre></div><h4 id="将数据卷挂载到容器" tabindex="-1">将数据卷挂载到容器 <a class="header-anchor" href="#将数据卷挂载到容器" aria-label="Permalink to &quot;将数据卷挂载到容器&quot;">​</a></h4><p>当启动容器时，可以通过 <code>-v</code> 或 <code>--mount</code> 标志来挂载数据卷到容器的指定路径。例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 -v 选项挂载数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_volume:/path/in/container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_image</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 --mount 选项挂载数据卷（推荐）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source=my_volume,target=/path/in/container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_image</span></span></code></pre></div><p><code>--mount</code> 标志的语法比 <code>-v</code> 更严格，更具有描述性，推荐用于新的容器部署。</p><p>这里假设 <code>html</code> 是一个已经存在的数据卷，且我们希望将其挂载到容器的 <code>/root/html</code> 目录。此外，容器将使用 <code>nginx</code> 镜像，并将容器的 80 端口映射到宿主机的 8080 端口，命令如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --mount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type=volume,source=html,target=/root/html[,other-options...]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span></code></pre></div><ul><li><strong>type</strong>：挂载的类型，主要有三种： <ul><li><code>volume</code>：<strong>带数据卷的挂载模式</strong>，会挂载一个管理的数据卷。如果指定的数据卷不存在，Docker 会自动创建它。</li><li><code>bind</code>：<strong>直接挂载模式</strong>，挂载宿主机的一个文件或目录到容器中。</li><li><code>tmpfs</code>：挂载一个临时文件系统到容器中。在容器停止后，<code>tmpfs</code> 挂载的数据将被删除。</li></ul></li><li><strong>source</strong>（或 <code>src</code>）：挂载源的标识。 <ul><li>对于 <code>volume</code> 类型，这是数据卷的名称。</li><li>对于 <code>bind</code> 类型，这是宿主机上的文件或目录的路径。</li><li>对于 <code>tmpfs</code>，此参数可省略。</li></ul></li><li><strong>target</strong>（或 <code>dst</code>）：容器内的挂载点（即容器内的路径）。</li><li><strong>readonly</strong>：一个可选参数，如果设置，挂载点将为只读模式。</li><li><strong>volume-opt</strong>：允许设置特定于卷的选项，如 <code>nocopy</code>。</li></ul><h4 id="挂载主机目录-bind-mounts" tabindex="-1">挂载主机目录（Bind Mounts） <a class="header-anchor" href="#挂载主机目录-bind-mounts" aria-label="Permalink to &quot;挂载主机目录（Bind Mounts）&quot;">​</a></h4><p>在 Docker 中，容器可以通过两种主要方式与存储资源交互，这两种方式分别是使用数据卷和直接挂载宿主机目录。每种方式的关联关系如下：</p><ul><li><p><strong>带数据卷的挂载模式</strong>：</p><ul><li><strong>路径关系</strong>：宿主机目录 --&gt; 数据卷 --&gt; 容器内目录</li><li><strong>描述</strong>：在这种模式下，宿主机的特定目录首先与数据卷相关联，数据卷再被挂载到容器内的指定目录。这种方式允许数据卷独立于任何容器的生命周期进行管理，提供数据持久化并能在多个容器间共享。</li></ul></li><li><p><strong>直接挂载模式</strong>：</p><ul><li><strong>路径关系</strong>：宿主机目录 --&gt; 容器内目录</li><li><strong>描述</strong>：此模式直接将宿主机的目录或文件挂载到容器内的指定目录。这种方式允许容器直接访问和修改宿主机的文件系统，常用于 <strong>开发环境</strong> 中，以便开发者可以直接在宿主机上修改文件并立即在容器中反映这些更改。</li></ul></li></ul><p>直接挂载模式示意图：</p><p><img src="`+x+'" alt="image-20210731175155453"></p><h4 id="使用场景比较" tabindex="-1">使用场景比较 <a class="header-anchor" href="#使用场景比较" aria-label="Permalink to &quot;使用场景比较&quot;">​</a></h4><ul><li><strong>数据卷挂载</strong>：适合 <strong>生产环境</strong> 和需要数据持久化的场景。数据卷的使用可以通过 Docker 的管理命令进行细致控制，如创建、备份、迁移和删除数据卷，无需直接操作宿主机文件系统。</li><li><strong>直接挂载</strong>：适合 <strong>开发环境</strong>，尤其是当开发者需要频繁更改挂载数据，并希望这些更改立即在容器中可见时。它减少了管理的复杂性，但可能带来安全和一致性问题，因为它允许容器直接修改宿主机的文件系统。</li></ul><h2 id="dockerfile-自定义镜像" tabindex="-1">Dockerfile 自定义镜像 <a class="header-anchor" href="#dockerfile-自定义镜像" aria-label="Permalink to &quot;Dockerfile 自定义镜像&quot;">​</a></h2><p>虽然常见的镜像可以在 Docker Hub 上找到，但对于我们自己开发的项目，就必须要自己构建镜像了。</p><p>而要自定义镜像，就必须先了解镜像的结构。</p><h3 id="镜像的分层结构" tabindex="-1">镜像的分层结构 <a class="header-anchor" href="#镜像的分层结构" aria-label="Permalink to &quot;镜像的分层结构&quot;">​</a></h3><p>每个 Docker 镜像由多个层（layer）组成，每一层代表镜像构建过程中的一个步骤。这种分层架构允许 Docker 高效地存储和传输镜像，同时也支持更快速的镜像更新和共享。</p><p>Docker 镜像包含应用程序及其所需的系统函数库、环境、配置和依赖，打包在一起。</p><p>以 MySQL 镜像为例，其结构如下：</p><p><img src="'+q+`" alt="image-20210731175806273"></p><p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本，之后打包在一起，所形成的文件。</p><p>所谓构建镜像，其实就是实现上述打包的过程。</p><h4 id="镜像分层的工作原理" tabindex="-1">镜像分层的工作原理 <a class="header-anchor" href="#镜像分层的工作原理" aria-label="Permalink to &quot;镜像分层的工作原理&quot;">​</a></h4><p>当你使用 <code>Dockerfile</code> 构建 Docker 镜像时，每一个指令（如 <code>RUN</code>, <code>COPY</code>, <code>ADD</code>）都会创建一个新的层。例如：</p><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu:20.04</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . /app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> make /app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ul><li><code>FROM</code> 指令设置基础镜像（这里是 <code>ubuntu:20.04</code>），是第一层。</li><li><code>COPY</code> 指令复制本地文件到镜像中，形成第二层。</li><li><code>RUN</code> 指令执行构建命令（这里是编译应用），形成第三层。</li><li><code>CMD</code> 指令指定容器启动时运行的命令，通常不添加新的层。</li></ul><h4 id="镜像分层的优势和特点" tabindex="-1">镜像分层的优势和特点 <a class="header-anchor" href="#镜像分层的优势和特点" aria-label="Permalink to &quot;镜像分层的优势和特点&quot;">​</a></h4><ol><li><strong>重用和共享</strong>：分层结构使得重用成为可能。如果多个镜像基于同一基础镜像，那么这个基础镜像的所有层只需要在机器上保存一份，由不同的镜像共享。</li><li><strong>增量构建和存储</strong>：当修改 <code>Dockerfile</code> 并重新构建镜像时，只有自上次构建以来有所改动的层会被重新构建。这减少了构建时间和网络带宽，因为只需上传和下载改变的层。</li><li><strong>高效管理</strong>：分层机制也使得管理和更新镜像变得更加高效。例如，更新底层的操作系统层（如安全更新）可以在不影响上层应用的情况下进行。</li></ol><h3 id="dockerfile-语法" tabindex="-1">Dockerfile 语法 <a class="header-anchor" href="#dockerfile-语法" aria-label="Permalink to &quot;Dockerfile 语法&quot;">​</a></h3><p>构建自定义镜像时，并不需要手动复制或打包文件。</p><p>通过编写 Dockerfile，我们只需定义镜像的组成，如基础镜像、文件拷贝、依赖安装、启动脚本等。Docker 会根据 Dockerfile 中的指令来自动构建镜像。</p><p><strong>Dockerfile</strong> 就是一个文本文件，其中包含一个个的 <strong>指令（Instruction）</strong>，用指令来说明要执行什么操作来构建镜像，每一个指令都会形成一层 Layer。</p><table tabindex="0"><thead><tr><th><strong>指令</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像，定义镜像的构建起点</td><td>FROM centos:6</td></tr><tr><td>ENV</td><td>设置环境变量，可在后面指令使用</td><td>ENV key value</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td><td>COPY ./mysql-5.7.rpm /tmp</td></tr><tr><td>RUN</td><td>执行Linux的shell命令，一般是安装过程的命令</td><td>RUN yum install gcc</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td>EXPOSE 8080</td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td><td>ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p>注意：<code>EXPOSE</code> 指令主要用于文档化容器将在哪些端口上提供服务。它本身并不会自动使容器的端口对外部可访问，而是起到声明容器意图使用这些端口的作用。</p><p>详细的 Dockerfile 语法说明可以参考官网文档：<a href="https://docker-docs.uclv.cu/engine/reference/builder/" target="_blank" rel="noreferrer">Dockerfile reference</a></p><h3 id="构建-java-项目" tabindex="-1">构建 Java 项目 <a class="header-anchor" href="#构建-java-项目" aria-label="Permalink to &quot;构建 Java 项目&quot;">​</a></h3><h4 id="基于-ubuntu-构建-java-项目" tabindex="-1">基于 Ubuntu 构建 Java 项目 <a class="header-anchor" href="#基于-ubuntu-构建-java-项目" aria-label="Permalink to &quot;基于 Ubuntu 构建 Java 项目&quot;">​</a></h4><ul><li><p><strong>步骤 1</strong>：创建 <code>docker-demo</code> 目录并进入：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-demo</span></span></code></pre></div></li><li><p><strong>步骤 2</strong>：将 <code>docker-demo.jar</code> 和 <code>jdk8.tar.gz</code> 文件拷贝到此目录。</p></li><li><p><strong>步骤 3</strong>：在此目录下编写 Dockerfile 文件，内容示例：</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定基础镜像</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu:16.04</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置环境变量，JDK的安装目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JAVA_DIR=/usr/local</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拷贝 JDK 和项目 JAR 包</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./jdk8.tar.gz $JAVA_DIR/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./docker-demo.jar /tmp/app.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 JDK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cd $JAVA_DIR \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; tar -xf ./jdk8.tar.gz \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置环境变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JAVA_HOME=$JAVA_DIR/java8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH=$PATH:$JAVA_HOME/bin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 暴露端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 8090</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 入口，java项目的启动命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/tmp/app.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div></li><li><p><strong>步骤 4</strong>：构建镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> javaweb:1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div></li><li><p><strong>步骤 5</strong>：运行容器：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8090:8090</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> javaweb:1.0</span></span></code></pre></div></li></ul><p>访问 <code>http://&lt;your-vm-ip&gt;:8090/hello/count</code> 来测试应用。</p><h4 id="基于-java8-构建-java-项目" tabindex="-1">基于 java8 构建 Java 项目 <a class="header-anchor" href="#基于-java8-构建-java-项目" aria-label="Permalink to &quot;基于 java8 构建 Java 项目&quot;">​</a></h4><p>虽然可以从 Ubuntu 基础镜像开始，手动添加所需的软件包来构建 Docker 镜像，但这种方法会相对繁琐。因此，更常见的做法是利用已经包含了部分必需软件的 <strong>预构建基础镜像</strong> 作为起点。</p><p>以 Java 应用为例，构建其 Docker 镜像时，可以选择一个已经预装了 JDK 的基础镜像。这样做不仅简化了构建过程，还能显著减少构建时间和潜在的配置错误。</p><ul><li><p><strong>步骤 1</strong>：新建目录并创建 Dockerfile：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java-project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java-project</span></span></code></pre></div></li><li><p><strong>步骤 2</strong>：拷贝 <code>docker-demo.jar</code> 到目录中。</p></li><li><p><strong>步骤 3</strong>：在此目录下编写 Dockerfile 文件，内容示例：</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java:8-alpine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./app.jar /tmp/app.jar</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 8090</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/tmp/app.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div></li><li><p><strong>步骤 4</strong>：构建镜像：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java-app:1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div></li><li><p><strong>步骤 5</strong>：运行容器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8090:8090</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java-app:1.0</span></span></code></pre></div></li></ul><h2 id="docker-compose" tabindex="-1">Docker Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker Compose&quot;">​</a></h2><p><strong>Docker Compose</strong> 是一个用于定义和运行多容器 Docker 应用程序的工具。</p><p>通过一个 YAML 文件（默认为 <code>docker-compose.yml</code>），用户可以配置应用服务所需的所有服务、网络和卷。Docker Compose 简化了多容器应用的开发、测试、部署和运维过程。</p><p><img src="`+f+`" alt="image-20210731180921742"></p><h3 id="功能和用途" tabindex="-1">功能和用途 <a class="header-anchor" href="#功能和用途" aria-label="Permalink to &quot;功能和用途&quot;">​</a></h3><ul><li><strong>服务定义</strong>：在 <code>docker-compose.yml</code> 文件中，可以定义一个或多个服务（容器），每个服务可以包括镜像信息、配置端口、连接的网络、挂载的卷等。</li><li><strong>一键部署</strong>：通过一个命令 (<code>docker-compose up</code>)，可以同时启动、停止、重建所有服务。</li><li><strong>环境隔离</strong>：每个项目可以使用独立的网络和卷，保证了不同项目之间的环境隔离。</li></ul><h3 id="主要组件" tabindex="-1">主要组件 <a class="header-anchor" href="#主要组件" aria-label="Permalink to &quot;主要组件&quot;">​</a></h3><ul><li><strong>服务（Services）</strong>：代表应用中的各个组件，比如数据库、前端、后端等。每个服务都会从 Docker 镜像启动一个或多个容器实例。</li><li><strong>网络（Networks）</strong>：定义服务之间如何相互通信。Docker Compose 默认为所有服务设置一个网络。</li><li><strong>卷（Volumes）</strong>：用于数据持久化和数据共享。</li></ul><h3 id="docker-compose-yml-示例" tabindex="-1">docker-compose.yml 示例 <a class="header-anchor" href="#docker-compose-yml-示例" aria-label="Permalink to &quot;docker-compose.yml 示例&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3.8&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 指定 Docker Compose 文件格式版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx:alpine</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 使用 nginx 官方镜像</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;80:80&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 将容器的 80 端口映射到宿主机的 80 端口</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">webnet</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 连接到 webnet 网络</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">postgres:alpine</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 使用 PostgreSQL 官方镜像</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      POSTGRES_DB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exampledb</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 设置数据库名为 exampledb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      POSTGRES_USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">user</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 设置数据库用户为 user</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      POSTGRES_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pass</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 设置数据库密码为 pass</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">webnet</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 连接到 webnet 网络</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">db-data:/var/lib/postgresql/data</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 持久化 PostgreSQL 数据到 db-data 卷</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  webnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义一个名为 webnet 的网络，服务通过此网络互联</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  db-data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义一个名为 db-data 的持久卷</span></span></code></pre></div><p>Docker Compose 文件实质上是将多个 <code>docker run</code> 命令集成到一个可重复使用、易于维护的文本文件中。</p><p>详细的 DockerCompose 语法说明可以参考官网文档：<a href="https://docker-docs.uclv.cu/compose/compose-file/" target="_blank" rel="noreferrer">DockerCompose reference</a></p><h3 id="使用-docker-compose-的好处" tabindex="-1">使用 Docker Compose 的好处 <a class="header-anchor" href="#使用-docker-compose-的好处" aria-label="Permalink to &quot;使用 Docker Compose 的好处&quot;">​</a></h3><ul><li><strong>简化配置</strong>：将服务的配置集中在一个文件中，避免了分散和重复的命令行参数。</li><li><strong>开发效率</strong>：快速启动、停止和重建开发环境，使得开发过程更加高效。</li><li><strong>易于扩展</strong>：可以轻松地通过修改配置文件来扩展服务的副本数。</li><li><strong>适用于所有环境</strong>：同一 <code>docker-compose.yml</code> 可用于开发、测试、生产环境，保持环境一致性。</li></ul><h3 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用&quot;">​</a></h3><p>Docker Compose 的基本命令包括：</p><ul><li><code>docker-compose up</code>：启动服务</li><li><code>docker-compose down</code>：停止并移除服务、网络、卷</li><li><code>docker-compose build</code>：构建或重新构建服务</li></ul><h2 id="docker-镜像仓库" tabindex="-1">Docker 镜像仓库 <a class="header-anchor" href="#docker-镜像仓库" aria-label="Permalink to &quot;Docker 镜像仓库&quot;">​</a></h2><p>Docker 镜像仓库用于存储和分发容器镜像。要与私有镜像仓库互动，如推送和拉取镜像，首先需要对本地镜像进行重新标记（tagging），以匹配仓库的地址。以下是操作步骤：</p><h3 id="推送镜像" tabindex="-1">推送镜像 <a class="header-anchor" href="#推送镜像" aria-label="Permalink to &quot;推送镜像&quot;">​</a></h3><ol><li><p><strong>重新标记本地镜像</strong>： 为本地镜像添加新标签，标签格式为私有仓库地址加上镜像名和标签：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 192.168.150.101:8080/nginx:1.0</span></span></code></pre></div></li><li><p><strong>推送镜像到仓库</strong>： 将标记后的镜像推送到指定的私有仓库：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 192.168.150.101:8080/nginx:1.0</span></span></code></pre></div></li></ol><h3 id="拉取镜像" tabindex="-1">拉取镜像 <a class="header-anchor" href="#拉取镜像" aria-label="Permalink to &quot;拉取镜像&quot;">​</a></h3><p>从私有仓库拉取镜像到本地系统：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 192.168.150.101:8080/nginx:1.0</span></span></code></pre></div><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><ul><li><strong>标记（Tagging）</strong>：这一步是必要的，因为它定义了镜像在私有仓库中的存储路径和名称。</li><li><strong>推送（Push）</strong>：确保你有足够的权限推送到私有仓库，且仓库服务正常运行。</li><li><strong>拉取（Pull）</strong>：拉取操作要求你有访问该私有仓库的权限，并且知道正确的镜像标签。</li></ul>`,214)]))}const M=i(A,[["render",P]]);export{L as __pageData,M as default};
