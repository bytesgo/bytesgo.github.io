import{_ as i,o as a,c as n,a6 as t}from"./chunks/framework.BkI9ovSD.js";const l="/assets/image-20210720193623245.CFYMTVgO.png",h="/assets/image-20210720193633483.BZ6DN1Gv.png",p="/assets/image-20210720193641907.BHDpDia6.png",e="/assets/image-20210720193648044.Bg3TZhwf.png",k="/assets/image-20210720194008781.B0YJ66Y2.png",r="/assets/image-20210720194230265.CYhXIlTB.png",o="/assets/image-20210720195142535.QADNI8S9.png",E="/assets/image-20210720195306484.sYNNVI59.png",d="/assets/image-20210720195531539.BpBFIZ2D.png",g="/assets/image-20210720200457207.Epy1Vyep.png",c="/assets/image-20210720201115192.BsSg_hAT.png",u="/assets/image-20210720202707797.DZG5BzMQ.png",y="/assets/image-20210720203022172.DcLkDIUn.png",q="/assets/image-20210720203534945.Q7pGJSRR.png",F="/assets/DKV9HZbVS6-1717558758889-1.JHd_KYSr.gif",C="/assets/vZrdKAh19C-1717559777113-3.JH_L-6e1.gif",m="/assets/image-20210721190152134-1717566719140-7.CQNSWBHk.png",b="/assets/image-20210721190416214-1717566743773-9.BTxoMKtM.png",B="/assets/image-20210721190907320-1717566711042-5.D0JnKqm6.png",f="/assets/image-20210721191544750-1717568733268-11.BQXiUG11.png",_="/assets/image-20210723171948228.DOP1W0y3.png",D="/assets/image-20210723172917636.Bo26ofTG.png",v="/assets/image-20210723210126506.BIlUL9gQ.png",x="/assets/image-20210723210427878.DO62xU1j.png",A="/assets/image-20210723214931869.UeA6QSG7.png",P="/assets/image-20210723215140735.C8vXa1Vl.png",S="/assets/image-20210723215518541.D7WHHCF5.png",T="/assets/image-20210723223629142.B-5Q-e6r.png",j="/assets/image-20210723224354904.NC7B5rJg.png",O=JSON.parse('{"title":"Elasticsearch 入门","description":"","frontmatter":{"title":"Elasticsearch 入门","date":"2024-06-06T00:00:00.000Z","tags":["Elasticsearch","分布式","搜索引擎","脑裂"],"categories":["ES"]},"headers":[],"relativePath":"blog/Note/Elasticsearch入门.md","filePath":"blog/Note/Elasticsearch入门.md","lastUpdated":1734587597000}'),L={name:"blog/Note/Elasticsearch入门.md"};function w(M,s,I,z,N,Q){return a(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t('<h1 id="elasticsearch-入门" tabindex="-1">Elasticsearch 入门 <a class="header-anchor" href="#elasticsearch-入门" aria-label="Permalink to &quot;Elasticsearch 入门&quot;">​</a></h1><h2 id="elasticsearch-简介" tabindex="-1">Elasticsearch 简介 <a class="header-anchor" href="#elasticsearch-简介" aria-label="Permalink to &quot;Elasticsearch 简介&quot;">​</a></h2><h3 id="es-的作用" tabindex="-1">ES 的作用 <a class="header-anchor" href="#es-的作用" aria-label="Permalink to &quot;ES 的作用&quot;">​</a></h3><p>Elasticsearch 是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容，一般用来实现搜索、日志统计和分析、系统监控等功能。</p><p>举例：</p><ul><li><p>在 GitHub 上搜索代码</p><p><img src="'+l+'" alt="image-20210720193623245"></p></li><li><p>在电商网站上搜索商品</p><p><img src="'+h+'" alt="image-20210720193633483"></p></li><li><p>在谷歌上搜索答案</p><p><img src="'+p+'" alt="image-20210720193641907"></p></li><li><p>在打车软件上搜索附近的车</p><p><img src="'+e+'" alt="image-20210720193648044"></p></li></ul><h3 id="elk-技术栈" tabindex="-1">ELK 技术栈 <a class="header-anchor" href="#elk-技术栈" aria-label="Permalink to &quot;ELK 技术栈&quot;">​</a></h3><p>Elasticsearch 结合 Kibana、Logstash、Beats，也就是 Elastic Stack（ELK）。被广泛应用在日志数据分析、实时监控等领域。</p><p><img src="'+k+'" alt="image-20210720194008781"></p><p>Elasticsearch 是 Elastic Stack 的核心，负责存储、搜索、分析数据。</p><p><img src="'+r+'" alt="image-20210720194230265"></p><h3 id="elasticsearch-和-lucene" tabindex="-1">Elasticsearch 和 Lucene <a class="header-anchor" href="#elasticsearch-和-lucene" aria-label="Permalink to &quot;Elasticsearch 和 Lucene&quot;">​</a></h3><p>Elasticsearch 底层是基于 <strong>Lucene</strong> 来实现的。</p><p><strong>Lucene</strong> 是一个 Java 语言的搜索引擎类库，是 Apache 公司的顶级项目，由 DougCutting（Hadoop 作者） 于1999年研发。官网地址：<a href="https://lucene.apache.org/" target="_blank" rel="noreferrer">https://lucene.apache.org/</a> 。</p><p>Lucene 的优势：</p><ul><li>易扩展</li><li>高性能（基于倒排索引）</li></ul><p>Lucene 的缺点：</p><ul><li>只限于 Java 开发</li><li>学习曲线陡峭</li><li>不支持水平扩展</li></ul><p>Elasticsearch 的发展历史：</p><ul><li>2004 年 Shay Banon 基于 Lucene 开发了 Compass 给她老婆网上搜索食谱用</li><li>2010 年 Shay Banon 重写了 Compass，取名为 Elasticsearch</li></ul><p>Elasticsearch 官网地址：<a href="https://www.elastic.co/cn/elasticsearch" target="_blank" rel="noreferrer">https://www.elastic.co/cn/elasticsearch</a>，相比于 Lucene，Elasticsearch 具备以下优势：</p><ul><li>支持分布式，非常容易做到水平扩展</li><li>提供 Restful 接口，可被任何语言调用</li></ul><h3 id="为什么不是其他的搜索技术" tabindex="-1">为什么不是其他的搜索技术 <a class="header-anchor" href="#为什么不是其他的搜索技术" aria-label="Permalink to &quot;为什么不是其他的搜索技术&quot;">​</a></h3><p>DB ranking 网站上，全球搜索引擎技术排名：</p><p><img src="'+o+'" alt="image-20210720195142535"></p><ol><li>Elasticsearch：开源的分布式搜索引擎</li><li>Splunk：商业项目</li><li>Solr：Apache 的开源搜索引擎</li></ol><p>虽然在早期，Apache Solr 是最主要的搜索引擎技术，但随着时代发展，Elasticsearch 已经渐渐超越了 Solr：</p><p><img src="'+E+'" alt="image-20210720195306484"></p><h2 id="倒排索引" tabindex="-1">倒排索引 <a class="header-anchor" href="#倒排索引" aria-label="Permalink to &quot;倒排索引&quot;">​</a></h2><p>倒排索引的概念是相对于 MySQL 这样的正向索引而言的。</p><h3 id="正向索引" tabindex="-1">正向索引 <a class="header-anchor" href="#正向索引" aria-label="Permalink to &quot;正向索引&quot;">​</a></h3><p>传统数据库（如 MySQL）采用正向索引，例如给下表（tb_goods）中的 id 创建索引：</p><table tabindex="0"><thead><tr><th>id</th><th>title</th><th>price</th></tr></thead><tbody><tr><td>1</td><td>小米手机</td><td>3499</td></tr><tr><td>2</td><td>华为手机</td><td>4999</td></tr><tr><td>3</td><td>华为小米充电器</td><td>49</td></tr><tr><td>4</td><td>小米手环</td><td>49</td></tr><tr><td>……</td><td>……</td><td>……</td></tr></tbody></table><p>如果根据 id 进行查询，那么直接走索引（比如 B+ 树），查询速度会非常快。</p><p>但如果是基于 title 做模糊查询，只能是逐行扫描数据，流程如下：</p><ol><li>用户搜索数据，条件是 title 符合 <code>&quot;%手机%&quot;</code></li><li>逐行获取数据，比如 id 为1的数据</li><li>判断数据中的 title 是否符合用户搜索条件</li><li>如果符合则放入结果集，不符合则丢弃且回到步骤 1</li></ol><p><img src="'+d+'" alt="image-20210720195531539"></p><p><strong>逐行扫描，也就是全表扫描，随着数据量增加，其查询效率也会越来越低，当数据量达到百万级别时，就是一场灾难。</strong></p><h3 id="倒排索引-1" tabindex="-1">倒排索引 <a class="header-anchor" href="#倒排索引-1" aria-label="Permalink to &quot;倒排索引&quot;">​</a></h3><p>倒排索引中有两个非常重要的概念：</p><ul><li>文档（<code>Document</code>）：用来搜索的数据，其中的 <strong>每一条数据就是一个文档</strong>。例如一个网页、一个商品信息</li><li>词条（<code>Term</code>）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li></ul><p>**创建倒排索引 **是对正向索引的一种特殊处理，流程如下：</p><ul><li>将每一个文档的数据利用算法分词，得到一个个词条</li><li>创建表，每行数据包括词条、词条所在文档 id、位置等信息</li><li>因为词条唯一性，可以给词条创建索引，例如 hash 表结构索引</li></ul><p><img src="'+g+'" alt="image-20210720200457207"></p><p>使用倒排索引的 <strong>搜索流程</strong> 如下（以搜索&quot;华为手机&quot;为例）：</p><ol><li>用户输入条件 <code>&quot;华为手机&quot;</code> 进行搜索</li><li>对用户输入内容 <strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code></li><li>拿着词条在倒排索引中查找，可以得到包含词条的文档 id：1、2、3</li><li>拿着文档 id 到正向索引中查找具体文档</li></ol><p><img src="'+c+'" alt="image-20210720201115192"></p><p>虽然要先查询倒排索引，再查询正向索引，但是无论是词条、还是文档 id 都建立了索引，查询速度非常快，无需全表扫描。</p><h3 id="正向和倒排" tabindex="-1">正向和倒排 <a class="header-anchor" href="#正向和倒排" aria-label="Permalink to &quot;正向和倒排&quot;">​</a></h3><p>那么为什么一个叫做正向索引，一个叫做倒排索引呢？</p><ul><li><p><strong>正向索引</strong> 是最传统的，根据 id 索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条。是 <strong>根据文档找词条的过程</strong>。</p></li><li><p>而 **倒排索引 **则相反，是先找到用户要搜索的词条，根据词条得到包含词条的文档的 id，然后根据 id 获取文档。是 <strong>根据词条找文档的过程</strong>。</p></li></ul><h3 id="优缺点比较" tabindex="-1">优缺点比较 <a class="header-anchor" href="#优缺点比较" aria-label="Permalink to &quot;优缺点比较&quot;">​</a></h3><p><strong>正向索引</strong>：</p><p>优点：</p><ul><li>可以给多个字段创建索引</li><li>根据索引字段搜索、排序速度非常快</li></ul><p>缺点：</p><ul><li>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描</li></ul><p><strong>倒排索引</strong>：</p><p>优点：</p><ul><li>根据词条搜索、模糊搜索时，速度非常快</li></ul><p>缺点：</p><ul><li>只能给词条创建索引，而不是字段</li><li>无法根据字段做排序</li></ul><h2 id="elasticsearch-的一些概念" tabindex="-1">Elasticsearch 的一些概念 <a class="header-anchor" href="#elasticsearch-的一些概念" aria-label="Permalink to &quot;Elasticsearch 的一些概念&quot;">​</a></h2><p>Elasticsearch 中有很多独有的概念，与 MySQL 中略有差别，但也有相似之处。</p><h3 id="文档和字段" tabindex="-1">文档和字段 <a class="header-anchor" href="#文档和字段" aria-label="Permalink to &quot;文档和字段&quot;">​</a></h3><p>Elasticsearch 是面向 **文档（Document）**存储的，文档可以是数据库中的一条商品数据，一个订单信息。</p><p>文档数据会被序列化为 JSON 格式后存储在 Elasticsearch 中。</p><p><img src="'+u+'" alt="image-20210720202707797"></p><p>而 JSON 文档中往往包含很多的 <strong>字段（Field）</strong>，类似于数据库中的列。</p><h3 id="索引和映射" tabindex="-1">索引和映射 <a class="header-anchor" href="#索引和映射" aria-label="Permalink to &quot;索引和映射&quot;">​</a></h3><p><strong>索引（Index）</strong>，就是相同类型的文档的集合。</p><p>例如：</p><ul><li>所有用户文档，就可以组织在一起，称为用户的索引；</li><li>所有商品的文档，可以组织在一起，称为商品的索引；</li><li>所有订单的文档，可以组织在一起，称为订单的索引；</li></ul><p><img src="'+y+'" alt="image-20210720203022172"></p><p>因此，我们可以把索引当做是数据库中的表。</p><p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库中就有 <strong>映射（mapping）</strong>，是索引中文档的字段约束信息，类似表的结构约束。</p><h3 id="mysql-与-elasticsearch" tabindex="-1">MySQL 与 Elasticsearch <a class="header-anchor" href="#mysql-与-elasticsearch" aria-label="Permalink to &quot;MySQL 与 Elasticsearch&quot;">​</a></h3><p>MySQL 与 Elasticsearch 的概念对比：</p><table tabindex="0"><thead><tr><th><strong>MySQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引（index），就是文档的集合，类似数据库的表（table）</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是 JSON 格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是 JSON 文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL 是 Elasticsearch 提供的 JSON 风格的请求语句，用来操作 Elasticsearch，实现 CRUD</td></tr></tbody></table><p>两者的擅长领域：</p><ul><li><p>MySQL：擅长事务类型操作，可以确保数据的安全和一致性</p></li><li><p>Elasticsearch：擅长海量数据的搜索、分析、计算</p></li></ul><p>因此在企业中往往是两者结合使用：</p><ul><li>对安全性要求较高的 <strong>写操作</strong>，使用 MySQL 实现</li><li>对查询性能要求较高的 <strong>搜索需求</strong>，使用 Elasticsearch 实现</li><li>两者再基于某种方式，实现 <strong>数据的同步</strong>，保证一致性</li></ul><p><img src="'+q+`" alt="image-20210720203534945"></p><h3 id="分词器" tabindex="-1">分词器 <a class="header-anchor" href="#分词器" aria-label="Permalink to &quot;分词器&quot;">​</a></h3><p>作用场景：</p><ul><li>在创建倒排索引时对文档进行分词</li><li>在用户搜索时，对输入的内容进行分词</li></ul><p>IK 分词器的模式：</p><ul><li>ik_smart：智能切分，对文本做最粗粒度的拆分</li><li>ik_max_word：最细切分，对文本做最细粒度的拆分</li></ul><p>IK 分词器如何拓展词条，如何停用词条：</p><ul><li>利用 config 目录的 <code>IkAnalyzer.cfg.xml</code> 文件添加拓展词典和停用词典</li><li>在词典中添加拓展词条或者停用词条</li></ul><h2 id="索引库操作" tabindex="-1">索引库操作 <a class="header-anchor" href="#索引库操作" aria-label="Permalink to &quot;索引库操作&quot;">​</a></h2><p>索引库就类似数据库表，mapping 映射就类似表的结构。</p><p>要向 ES 中存储数据，必须先创建“库”和“表”。</p><h3 id="mapping-映射属性" tabindex="-1">mapping 映射属性 <a class="header-anchor" href="#mapping-映射属性" aria-label="Permalink to &quot;mapping 映射属性&quot;">​</a></h3><p>mapping 是对索引库中文档的约束，常见的 mapping 属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有： <ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip 地址）</li><li>数值：long、integer、short、byte、double、float、</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为 true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul><p>例如下面的 JSON 文档：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">52.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;isMarried&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;info&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;黑马程序员Java讲师&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zy@itcast.cn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">98.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;firstName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;云&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;lastName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;赵&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>对应的每个字段映射（mapping）：</p><ul><li>age：类型为 integer；参与搜索，因此需要 index 为 true；无需分词器</li><li>weight：类型为 float；参与搜索，因此需要 index 为 true；无需分词器</li><li>isMarried：类型为 boolean；参与搜索，因此需要 index 为 true；无需分词器</li><li>info：类型为字符串，需要分词，因此是 text；参与搜索，因此需要 index 为 true；分词器可以用 ik_smart</li><li>email：类型为字符串，但是不需要分词，因此是 keyword；不参与搜索，因此需要 index 为 false；无需分词器</li><li>score：虽然是数组，但是我们只看元素的类型，类型为 float；参与搜索，因此需要 index 为 true；无需分词器</li><li>name：类型为 object，需要定义多个子属性 <ul><li>name.firstName；类型为字符串，但是不需要分词，因此是 keyword；参与搜索，因此需要 index 为true；无需分词器</li><li>name.lastName；类型为字符串，但是不需要分词，因此是 keyword；参与搜索，因此需要 index 为true；无需分词器</li></ul></li></ul><h3 id="type-属性的变化" tabindex="-1">type 属性的变化 <a class="header-anchor" href="#type-属性的变化" aria-label="Permalink to &quot;type 属性的变化&quot;">​</a></h3><p>在 ES 的最新版本中，文档类型（<code>type</code>）的概念已经被逐渐弃用。在 ES 的早期版本中，一个索引可以包含多种类型的文档，这些类型用于表示索引中不同种类的数据集合。但是，从 6.x 版本开始，ES 团队决定逐步移除这种类型概念，原因包括：</p><ol><li><strong>性能和复杂性</strong>：多类型索引在内部实际上是在单个 Lucene 索引中共享，这导致了复杂的映射和存储管理，增加了性能负担。</li><li><strong>逻辑上的问题</strong>：多类型索引意味着不同类型的文档共享同一个字段可能会有不同的数据类型，这违反了字段映射的一致性原则，可能导致数据不一致。</li><li><strong>简化API和用例</strong>：移除类型概念有助于简化 API 的使用，使 ES 更加容易理解和使用，尤其是对于新用户。</li></ol><p>重要的变化和版本</p><ul><li><strong>Elasticsearch 6.x</strong>：引入了单类型索引的概念，即一个索引只能有一个类型。但是，它允许索引中存在名为 <code>_doc</code> 的类型，为全面移除类型概念做准备。</li><li><strong>Elasticsearch 7.x</strong>：类型参数在索引创建 API 中变成了可选项，而且默认情况下，文档的类型被命名为 <code>_doc</code>。在这个版本中，即使类型仍然在 URL 中可见，实际上它的作用已经大大减少。</li><li><strong>Elasticsearch 8.x</strong>：预计将完全移除文档类型的概念。</li></ul><h3 id="创建索引库" tabindex="-1">创建索引库 <a class="header-anchor" href="#创建索引库" aria-label="Permalink to &quot;创建索引库&quot;">​</a></h3><p><strong>基本语法</strong>：</p><ul><li>请求方式：PUT</li><li>请求路径：/索引库名，可以自定义</li><li>请求参数：mapping 映射</li></ul><p>格式：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PUT /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;mappings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;字段名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;analyzer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ik_smart&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;字段名2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;keyword&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;false&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;字段名3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;子字段&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;keyword&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // ...略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="查询索引库" tabindex="-1">查询索引库 <a class="header-anchor" href="#查询索引库" aria-label="Permalink to &quot;查询索引库&quot;">​</a></h3><p><strong>基本语法</strong>：</p><ul><li><p>请求方式：GET</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：无</p></li></ul><p><strong>格式</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /{索引库名称}</span></span></code></pre></div><h3 id="删除索引库" tabindex="-1">删除索引库 <a class="header-anchor" href="#删除索引库" aria-label="Permalink to &quot;删除索引库&quot;">​</a></h3><p><strong>语法：</strong></p><ul><li><p>请求方式：DELETE</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：无</p></li></ul><p><strong>格式：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELETE /{索引库名称}</span></span></code></pre></div><h3 id="修改索引库" tabindex="-1">修改索引库 <a class="header-anchor" href="#修改索引库" aria-label="Permalink to &quot;修改索引库&quot;">​</a></h3><p>ES 中的索引映射（mapping）是用来定义索引中字段的数据类型和其他属性的。在 ES 的设计中，<strong>一旦一个字段的映射被创建，这个字段的映射就不能再被修改</strong>。这是因为修改已有字段的映射可能会导致索引中已经存储的数据与新的映射不兼容，进而影响索引的整体一致性和查询的准确性。例如，如果一个字段最初被映射为一个整数类型，然后修改为字符串类型，那么已经存储为整数的数据就不能正确地被处理为字符串。</p><p>然而， <strong>ES 允许向映射中添加新的字段</strong>。这是因为添加新字段不会影响到已经存在的数据。新字段只会在新索引的文档或更新的文档中存在，而不会影响旧文档的结构。这种灵活性使得用户可以逐渐扩展他们的数据模型而无需重新索引现有数据。</p><p>如果需要修改已有字段的映射，通常的做法是创建一个新的索引，并在这个新索引中定义正确的映射。然后，可以将旧索引中的数据重新索引到新索引中。这种方法虽然成本较高，但可以确保数据的一致性和完整性得到维护。</p><p><strong>语法说明</strong>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PUT /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_mapping</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;新字段名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;integer&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="文档操作" tabindex="-1">文档操作 <a class="header-anchor" href="#文档操作" aria-label="Permalink to &quot;文档操作&quot;">​</a></h2><h3 id="新增文档" tabindex="-1">新增文档 <a class="header-anchor" href="#新增文档" aria-label="Permalink to &quot;新增文档&quot;">​</a></h3><p><strong>语法：</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">POST /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_doc/{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">文档id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;字段1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;值1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;字段2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;值2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;字段3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;子属性1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;值3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;子属性2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;值4&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="查询文档" tabindex="-1">查询文档 <a class="header-anchor" href="#查询文档" aria-label="Permalink to &quot;查询文档&quot;">​</a></h3><p>根据 Restful 风格，新增是 post，查询应该是 get，不过查询一般都需要条件，这里我们把文档 id 带上。</p><p>这个请求是根据索引名称和文档的 ID 来精确查询的，返回的内容包括文档的详细信息，如果该文档存在的话。</p><p><strong>语法：</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_doc/{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">文档id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果文档存在，Elasticsearch 将返回包含以下信息的JSON对象：</p><ul><li><code>_index</code>：返回文档所在的索引名称。</li><li><code>_type</code>：文档的类型（在最新版本的 Elasticsearch 中，默认为 <code>_doc</code>）。</li><li><code>_id</code>：查询的文档的ID。</li><li><code>_version</code>：文档的版本号，每次文档更新时，版本号会递增。</li><li><code>_source</code>：文档的源数据，即存储在索引中的原始数据。</li><li><code>_seq_no</code> 和 <code>_primary_term</code>：这些是内部版本控制字段，用于乐观并发控制。</li><li><code>found</code>：一个布尔值，指示是否找到文档。如果文档存在，此值为 <code>true</code>；如果不存在，则为 <code>false</code>。</li></ul><h3 id="删除文档" tabindex="-1">删除文档 <a class="header-anchor" href="#删除文档" aria-label="Permalink to &quot;删除文档&quot;">​</a></h3><p>删除使用DELETE请求，同样，需要根据id进行删除：</p><p><strong>语法：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DELETE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{索引库名称}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_doc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{文档id}</span></span></code></pre></div><h3 id="修改文档" tabindex="-1">修改文档 <a class="header-anchor" href="#修改文档" aria-label="Permalink to &quot;修改文档&quot;">​</a></h3><h4 id="全量修改" tabindex="-1">全量修改 <a class="header-anchor" href="#全量修改" aria-label="Permalink to &quot;全量修改&quot;">​</a></h4><p>全量修改是覆盖原来的文档，其本质是：</p><ul><li>根据指定的 id 删除文档</li><li>新增一个相同 id 的文档</li></ul><p><strong>注意</strong>：如果根据 id 删除时，id 不存在，第二步的新增也会执行，也就是说修改操作变成了新增操作。</p><p><strong>语法：</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PUT /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_doc/{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">文档id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;字段1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;值1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;字段2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;值2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="增量修改" tabindex="-1">增量修改 <a class="header-anchor" href="#增量修改" aria-label="Permalink to &quot;增量修改&quot;">​</a></h4><p>增量修改是只修改指定 id 匹配的文档中的部分字段。</p><p><strong>语法：</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">POST /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_update/{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">文档id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;doc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         &quot;字段名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;新的值&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="dsl-查询语法" tabindex="-1">DSL 查询语法 <a class="header-anchor" href="#dsl-查询语法" aria-label="Permalink to &quot;DSL 查询语法&quot;">​</a></h2><h3 id="dsl-查询的分类" tabindex="-1">DSL 查询的分类 <a class="header-anchor" href="#dsl-查询的分类" aria-label="Permalink to &quot;DSL 查询的分类&quot;">​</a></h3><p>Elasticsearch 提供了基于 JSON 的 DSL（<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html" target="_blank" rel="noreferrer">Domain Specific Language</a>）来定义查询。常见的查询类型包括：</p><ul><li><p><strong>查询所有</strong>：查询出所有数据，一般测试用。例如：<code>match_all</code></p></li><li><p><strong>全文检索（full text）查询</strong>：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如：</p><ul><li><code>match_query</code></li><li><code>multi_match_query</code></li></ul></li><li><p><strong>精确查询</strong>：根据精确词条值查找数据，一般是查找 keyword、数值、日期、boolean 等类型字段。例如：</p><ul><li><code>ids</code></li><li><code>range</code></li><li><code>term</code></li></ul></li><li><p><strong>地理（geo）查询</strong>：根据经纬度查询。例如：</p><ul><li><code>geo_distance</code></li><li><code>geo_bounding_box</code></li></ul></li><li><p><strong>复合（compound）查询</strong>：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如：</p><ul><li><code>bool</code></li><li><code>function_score</code></li></ul></li></ul><h3 id="dsl-查询的基本语法" tabindex="-1">DSL 查询的基本语法 <a class="header-anchor" href="#dsl-查询的基本语法" aria-label="Permalink to &quot;DSL 查询的基本语法&quot;">​</a></h3><p>查询的基本语法如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;查询类型&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;查询条件&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;条件值&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我们以 <strong>查询所有</strong> 为例，其中：</p><ul><li>查询类型为 <code>match_all</code></li><li>没有查询条件</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查询所有</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其它查询无非就是 <strong>查询类型</strong>、<strong>查询条件</strong> 的变化。</p><h3 id="查询的常规返回值" tabindex="-1">查询的常规返回值 <a class="header-anchor" href="#查询的常规返回值" aria-label="Permalink to &quot;查询的常规返回值&quot;">​</a></h3><p>从 Elasticsearch 进行查询时，返回的响应包含多个重要的字段，每个字段都有其特定的含义和用途：</p><p><code>took</code>：表示 Elasticsearch 执行查询所花费的时间，单位是毫秒。用来帮助了解查询的性能，方便性能调优。</p><p><code>timed_out</code>：布尔值，表示查询是否因为超时而没有完成。监控和警报系统中常用，用以检测可能的性能问题。</p><p><code>_shards：</code>：包含关于查询涉及的分片的信息，包括总分片数、成功查询的分片数、失败的分片数等。用来诊断分布式查询中可能的问题，如某个分片的故障。</p><ul><li><code>total</code>：查询涉及的分片总数。</li><li><code>successful</code>：成功返回结果的分片数。</li><li><code>skipped</code>：在查询过程中跳过的分片数（通常在使用分片路由或有缓存结果时出现）。</li><li><code>failed</code>：查询失败的分片数。</li></ul><p><code>hits</code>：包含实际的查询结果，是查询最重要的部分。展示查询结果，用于后续的数据处理或显示.</p><ul><li><code>total</code>：匹配查询条件的文档总数。从 ES 7.x 开始，这个字段返回一个对象，包含 <code>value</code>（匹配数）和<code>relation</code>（表示是否精确）。</li><li><code>hits</code>：包含一个数组，每个元素代表一个匹配的文档。 <ul><li><code>_index</code>：文档所在的索引名。</li><li><code>_type</code>：文档的类型（在 ES 7.x 中基本废弃，所有文档类型默认为 <code>_doc</code>）。</li><li><code>_id</code>：文档的 ID。</li><li><code>_score</code>：文档的相关性得分，根据查询的 relevancy 计算得出。</li><li><code>_source</code>：文档的原始数据（如果查询请求中指定返回）。</li></ul></li></ul><p><code>aggregations</code>：如果查询中包含聚合操作，该字段包含聚合的结果。进行统计分析和数据汇总。</p><h3 id="全文检索查询" tabindex="-1">全文检索查询 <a class="header-anchor" href="#全文检索查询" aria-label="Permalink to &quot;全文检索查询&quot;">​</a></h3><p>全文检索查询的基本流程如下：</p><ul><li>对用户搜索的内容做分词，得到词条</li><li>根据词条去倒排索引库中匹配，得到文档id</li><li>根据文档 id 找到文档，返回给用户</li></ul><p>比较常用的场景包括：</p><ul><li>商城的输入框搜索</li><li>百度输入框搜索</li></ul><p>因为是拿着词条去匹配，因此参与搜索的字段也必须是可分词的 text 类型的字段。</p><h4 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h4><p>常见的全文检索查询包括：</p><ul><li><code>match</code> 查询：单字段查询</li><li><code>multi_match</code> 查询：多字段查询，任意一个字段符合条件就算符合查询条件</li></ul><p><code>match</code> 查询语法如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;match&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;{字段名称}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TEXT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>mulit_match</code> 语法如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;multi_match&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TEXT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;fields&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FIELD1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; FIELD12&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>但是，参与查询的字段越多，对查询性能影响越大，因此建议采用 <code>copy_to</code>，然后单字段查询的方式。</p><h3 id="精准查询" tabindex="-1">精准查询 <a class="header-anchor" href="#精准查询" aria-label="Permalink to &quot;精准查询&quot;">​</a></h3><p>精确查询一般是查找 keyword、数值、日期、boolean 等类型字段。所以 <strong>不会</strong> 对搜索条件分词。常见的有：</p><ul><li><code>term</code>：根据词条精确值查询</li><li><code>range</code>：根据值的范围查询</li></ul><h4 id="term-查询" tabindex="-1">term 查询 <a class="header-anchor" href="#term-查询" aria-label="Permalink to &quot;term 查询&quot;">​</a></h4><p>因为精确查询的字段搜索的是不分词的字段，因此查询的条件也必须是 <strong>不分词</strong> 的词条。</p><p>查询时，用户输入的内容跟字段值完全匹配时才认为符合条件。</p><p>如果用户输入的内容是多个词语形成的短语，反而搜索不到数据。</p><p>语法说明：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// term查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;term&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;FIELD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VALUE&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="range-查询" tabindex="-1">range 查询 <a class="header-anchor" href="#range-查询" aria-label="Permalink to &quot;range 查询&quot;">​</a></h4><p>范围查询，一般应用在对数值类型做范围过滤的时候。比如做价格范围过滤。</p><p>基本语法：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// range查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;range&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;{字段名称}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;gte&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里的 gte 代表大于等于，gt 则代表大于</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;lte&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // lte 代表小于等于，lt 则代表小于</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="地理坐标查询" tabindex="-1">地理坐标查询 <a class="header-anchor" href="#地理坐标查询" aria-label="Permalink to &quot;地理坐标查询&quot;">​</a></h3><p>所谓的地理坐标查询，其实就是根据经纬度查询，官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html" target="_blank" rel="noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html</a></p><p>常见的使用场景包括：</p><ul><li>携程：搜索我附近的酒店</li><li>滴滴：搜索我附近的出租车</li><li>微信：搜索我附近的人</li></ul><h4 id="矩形范围查询" tabindex="-1">矩形范围查询 <a class="header-anchor" href="#矩形范围查询" aria-label="Permalink to &quot;矩形范围查询&quot;">​</a></h4><p><code>geo_bounding_box</code>：查询 <code>geo_point</code> 落在某个矩形范围的所有文档。</p><p>查询时，需要指定矩形的 <strong>左上</strong>、**右下 **两个点的坐标，然后根据其生成的矩形，落在其中的都是符合条件的点。</p><p><img src="`+F+`" alt="DKV9HZbVS6"></p><p>语法如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// geo_bounding_box查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;geo_bounding_box&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;{字段名称}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;top_left&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 左上点</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;lat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;lon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">121.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;bottom_right&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 右下点</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;lat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;lon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">121.7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这种方式并不适合“附近的人”这样的圆形范围查询需求。</p><h4 id="附近查询-距离查询" tabindex="-1">附近查询（距离查询） <a class="header-anchor" href="#附近查询-距离查询" aria-label="Permalink to &quot;附近查询（距离查询）&quot;">​</a></h4><p><code>geo_distance</code>：查询到指定中心点小于某个距离值的所有文档。</p><p>换句话来说，在地图上找一个点作为圆心，以指定距离为半径，画一个圆，落在圆内的坐标都算符合条件。</p><p><img src="`+C+`" alt="vZrdKAh19C"></p><p>语法如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// geo_distance 查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;geo_distance&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;distance&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;15km&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 半径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;{字段名称}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;31.21,121.5&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 圆心</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="复合查询" tabindex="-1">复合查询 <a class="header-anchor" href="#复合查询" aria-label="Permalink to &quot;复合查询&quot;">​</a></h3><p>复合（compound）查询：复合查询可以将其它简单查询组合起来，实现更复杂的搜索逻辑。常见的有两种：</p><ul><li><code>fuction score</code>：算分函数查询，可以控制文档相关性算分，控制文档排名</li><li><code>bool query</code>：布尔查询，利用逻辑关系组合多个其它的查询，实现复杂搜索</li></ul><h4 id="相关性算分" tabindex="-1">相关性算分 <a class="header-anchor" href="#相关性算分" aria-label="Permalink to &quot;相关性算分&quot;">​</a></h4><p>当我们利用 <code>match</code> 查询时，文档结果会根据与搜索词条的关联度打分（<code>_score</code>），返回结果时按照分值降序排列。</p><p>例如，我们搜索 &quot;虹桥如家&quot;，结果如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;_score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17.850193</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;_source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;虹桥如家酒店真不错&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;_score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12.259849</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;_source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;外滩如家酒店真不错&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;_score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11.91091</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;_source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;迪士尼如家酒店真不错&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>在 Elasticsearch 5.x 之前，搜索的相关性打分主要依据 TF/IDF（词频/逆文档频率）模型。这个模型考虑了两个主要因素：</p><ul><li><strong>TF（Term Frequency）</strong>：词频，即一个词在文档中出现的频率。词出现得越频繁，它对文档的重要性越高。</li><li><strong>IDF（Inverse Document Frequency）</strong>：逆文档频率，衡量一个词的普遍重要性。如果一个词在很少的文档中出现，则认为它具有很高的区分度，IDF 值较高。</li></ul><p>公式如下：</p><p><img src="`+m+'" alt="image-20210721190152134"></p><p>从 Elasticsearch 5.x 版本开始，默认使用的打分算法是 BM25，这是一种更为现代的、基于概率的排名函数，用于替代传统的 TF/IDF 方法。BM25 被设计用来克服 TF/IDF 模型的一些限制，特别是在处理长文档或短查询时的性能问题。</p><p>BM25 的公式考虑了以下几个要素：</p><ul><li><strong>词频（TF）</strong>：在 BM25 中，词频的影响经过了优化，以防一个词在文档中大量出现时对整体打分的影响过大。</li><li><strong>文档频率（DF）</strong>：类似于 IDF，但在 BM25 中使用的是文档频率的逆向非线性函数。</li><li><strong>文档长度</strong>：BM25 还考虑了文档长度的因素，对长文档和短文档进行了归一化处理，以避免长文档仅因为单词总数多而获得过高的评分。</li></ul><p>公式如下：</p><p><img src="'+b+'" alt="image-20210721190416214"></p><p>TF/IDF 算法有一各缺陷，就是词条频率越高，文档得分也会越高，单个词条对文档影响较大。</p><p>而 BM25 则会让单个词条的算分有一个上限，曲线更加平滑：</p><p><img src="'+B+'" alt="image-20210721190907320"></p><h4 id="function-score-query" tabindex="-1">Function Score Query <a class="header-anchor" href="#function-score-query" aria-label="Permalink to &quot;Function Score Query&quot;">​</a></h4><p>根据相关度打分是一种比较合理的算分方式，但 <strong>合理的不一定是产品经理需要</strong> 的。</p><p>以百度搜索为例，并不是相关度越高排名越靠前，而是谁掏的钱多排名就越靠前。</p><p>要想更精细地控制搜索结果的排名，就需要利用 Elasticsearch 中的 <strong>Function Score Query</strong> 了，它是一种非常强大的查询，可以根据多种函数来修改或增强查询结果的相关性得分。</p><p>使用这种查询，我们可以在查询结果的排序中加入自定义的逻辑，例如基于某些字段的数值、随机化处理、地理位置信息等来调整得分。</p><p>语法说明：</p><p><img src="'+f+`" alt="image-20210721191544750"></p><p>function score 查询中包含四部分内容：</p><ul><li><strong>原始查询条件</strong>：query 部分，基于这个条件搜索文档，并且基于 BM25 算法给文档打出 <strong>原始算分</strong>（query score)</li><li><strong>过滤条件</strong>：filter 部分，符合该条件的文档才会 <strong>重新算分</strong></li><li><strong>算分函数</strong>：符合 filter 条件的文档要根据这个函数做运算，得到的 <strong>函数算分</strong>（function score），有四种函数 <ul><li>weight：函数结果是常量</li><li>field_value_factor：以文档中的某个字段值作为函数结果</li><li>random_score：以随机数作为函数结果</li><li>script_score：自定义算分函数</li></ul></li><li><strong>运算模式</strong>：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括： <ul><li>multiply：相乘</li><li>replace：用 function score 替换 query score</li><li>其它，例如：sum、avg、max、min</li></ul></li></ul><p>function score 的运行流程如下：</p><ol><li>根据 **原始查询条件 **查询搜索文档，并且计算相关性算分，称为 <strong>原始算分</strong>（query score）</li><li>根据 <strong>过滤条件</strong>，过滤文档</li><li>符合 <strong>过滤条件</strong> 的文档，基于 <strong>算分函数</strong> 运算，得到 <strong>函数算分</strong>（function score）</li><li>将 <strong>原始算分</strong> （query score）和 <strong>函数算分</strong>（function score）基于 <strong>运算模式</strong> 做运算，得到最终结果，作为相关性算分</li></ol><p>因此，其中的关键点是：</p><ul><li>过滤条件：决定哪些文档的算分被修改</li><li>算分函数：决定函数算分的算法</li><li>运算模式：决定最终算分结果</li></ul><h4 id="boolean-query" tabindex="-1">Boolean Query <a class="header-anchor" href="#boolean-query" aria-label="Permalink to &quot;Boolean Query&quot;">​</a></h4><p><strong>Boolean Query</strong> 是一种复杂的查询类型，它允许我们结合多个查询条件，通过逻辑操作符（如 AND、OR、NOT）来构建更复杂的查询逻辑。这种查询在实际应用中非常常见，尤其是当我们需要在搜索中包含多个条件或排除某些文档时。</p><p>Boolean Query 主要由以下四个部分组成：</p><ol><li><strong>must</strong>：查询中的这部分条件必须满足（逻辑 AND）。如果添加多个查询到 <code>must</code> 部分，返回的文档必须满足所有这些条件，<strong><code>must</code> 会参与算分</strong>。</li><li><strong>should</strong>：查询中的这部分条件至少满足一个（逻辑 OR）。<code>should</code> 查询可以用于 <strong>增加那些匹配的文档的相关性得分</strong>，使其在结果列表中排名更高。如果 <code>should</code> 查询是 <code>boolean</code> 查询中唯一的条件，那么至少需要匹配一个 <code>should</code> 条件，但如果 <code>boolean</code> 查询中也包含了 <code>must</code> 或 <code>filter</code>，则 <code>should</code> 可以不匹配也可以返回结果。</li><li><strong>must_not</strong>：查询中的这部分条件必须不满足（逻辑 NOT）。它用于排除包含特定条件的文档。</li><li><strong>filter</strong>：这与 <code>must</code> 类似，查询中的这部分条件必须满足，但是与 <code>must</code> 不同的是，<strong><code>filter</code> 不会影响得分，仅用于过滤文档</strong>。这使得 <code>filter</code> 在性能上通常比 <code>must</code> 更优，特别是当你只是想过滤数据而不关心得分时。</li></ol><p>比如在搜索酒店时，除了关键字搜索外，我们还可能根据品牌、价格、城市等字段做过滤。</p><p>每一个不同的字段，其查询的条件、方式都不一样，必须是多个不同的查询，而要组合这些查询，就必须用 bool 查询了。</p><p>需要注意的是，搜索时 <strong>参与打分的字段越多，查询的性能越差</strong>。</p><p>因此，这种多条件查询时建议：</p><ul><li>搜索框的关键字搜索，是全文检索查询，使用 must 查询，参与算分</li><li>其它过滤条件，采用 filter 查询。不参与算分</li></ul><p>语法示例：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /hotel/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;bool&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;must&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;term&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;上海&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;should&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;term&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;brand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;皇冠假日&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;term&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;brand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;华美达&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;must_not&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;range&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;lte&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;filter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;range&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;gte&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="搜索结果处理" tabindex="-1">搜索结果处理 <a class="header-anchor" href="#搜索结果处理" aria-label="Permalink to &quot;搜索结果处理&quot;">​</a></h2><h3 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h3><p>Elasticsearch 默认是根据相关度算分（<code>_score</code>）来排序，但是也支持自定义方式对搜索<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html" target="_blank" rel="noreferrer">结果排序</a>。可以排序字段类型有：keyword 类型、数值类型、地理坐标类型、日期类型等。</p><h4 id="普通字段排序" tabindex="-1">普通字段排序 <a class="header-anchor" href="#普通字段排序" aria-label="Permalink to &quot;普通字段排序&quot;">​</a></h4><p>keyword、数值、日期类型排序的语法基本一致。</p><p><strong>语法</strong>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;{排序字段}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;desc&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 排序字段、排序方式 ASC、DESC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>排序条件是一个数组，也就是可以写多个排序条件。</p><p>按照声明的顺序，当第一个条件相等时，再按照第二个条件排序，以此类推。</p><h4 id="地理坐标排序" tabindex="-1">地理坐标排序 <a class="header-anchor" href="#地理坐标排序" aria-label="Permalink to &quot;地理坐标排序&quot;">​</a></h4><p>地理坐标排序略有不同。</p><p><strong>语法说明</strong>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;_geo_distance&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;{排序字段}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;纬度，经度&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文档中 geo_point 类型的字段名、目标坐标点</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 排序方式</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;unit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;km&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 排序的距离单位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个查询的含义是：</p><ul><li>指定一个坐标，作为目标点</li><li>计算每一个文档中，指定字段（必须是 geo_point 类型）的坐标到目标点的距离是多少</li><li>根据距离排序</li></ul><h3 id="分页" tabindex="-1">分页 <a class="header-anchor" href="#分页" aria-label="Permalink to &quot;分页&quot;">​</a></h3><p>Elasticsearch 默认情况下只返回 top10 的数据。而如果要查询更多数据就需要修改分页参数了。</p><p>Elasticsearch 中通过修改 from、size 参数来控制要返回的分页结果：</p><ul><li>from：从第几个文档开始</li><li>size：总共查询几个文档</li></ul><p>类似于 MySQL 中的 <code>limit ?, ?</code></p><h4 id="基本的分页" tabindex="-1">基本的分页 <a class="header-anchor" href="#基本的分页" aria-label="Permalink to &quot;基本的分页&quot;">​</a></h4><p>分页的基本语法如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;from&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分页开始的位置，默认为0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 期望获取的文档总数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="深度分页问题" tabindex="-1">深度分页问题 <a class="header-anchor" href="#深度分页问题" aria-label="Permalink to &quot;深度分页问题&quot;">​</a></h4><p>现在，我要查询 990~1000 的数据，查询逻辑要这么写：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;match_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;from&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">990</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分页开始的位置，默认为0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 期望获取的文档总数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>不过，Elasticsearch 内部分页时，必须先查询第 0~1000 条，然后截取其中的 990~1000 的这 10 条。</p><p>这导致但这种方法在处理非常大的数据集时可能会遇到性能问题。随着 <code>from</code> 值的增大，查询的成本也增大，尤其是在高 <code>from</code> 值时，Elasticsearch 需要处理和跳过更多的结果。</p><p>在 Elasticsearch 的单节点部署中，查询 TOP1000 数据通常不会造成太大的性能问题。</p><p>然而，在面对集群部署时，情况则变得复杂许多。</p><p>假设 Elasticsearch 集群由 5 个节点组成，单纯地从每个节点查询 TOP200 并不能保证得到整个集群的 TOP1000 数据。</p><p>因为某个节点的 TOP200 数据，在集群中的整体排名可能远低于10000 名。</p><p>要准确获得集群范围内的 TOP1000 数据，必须从每个节点提取 TOP1000 的结果，然后对这些数据进行汇总和重新排名，最后才能截取出真正的 TOP1000。</p><p>那么，如果需要查询第 9900 到 10000 名的数据怎么办？这可能需要在每个节点上查询前 10000 名的数据，再<strong>将所有节点的数据汇总到内存中进行排序和筛选</strong>，这是一个资源消耗极大的操作。</p><p>当查询涉及到较深的分页时，如尝试检索非常靠后的数据，会对内存和 CPU 造成重大压力。为了防止这种情况，Elasticsearch 默认禁止执行 <code>from + size</code> 超过 10000 的请求，以避免过大的性能开销。</p><p>针对深度分页，ES 提供了三种解决方案，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html" target="_blank" rel="noreferrer">官方文档</a>：</p><ul><li><strong>Scroll API</strong>：原理将排序后的文档 id 形成快照，保存在内存。官方已经不推荐使用。</li><li><strong>Search After</strong>：分页时需要排序，原理是以上一次查询结果中最后一条记录的排序值，以此作为下一次查询的起点。官方推荐使用的方式。</li><li><strong>Point In Time (PIT) API</strong>：这是 Elasticsearch 7.10 引入的新特性，用于提供像 Scroll 那样的稳定视图，但与 Search After 结合使用，以支持更有效的分页。</li></ul><h4 id="分页查询的常见实现方案以及优缺点" tabindex="-1">分页查询的常见实现方案以及优缺点： <a class="header-anchor" href="#分页查询的常见实现方案以及优缺点" aria-label="Permalink to &quot;分页查询的常见实现方案以及优缺点：&quot;">​</a></h4><ul><li><p><code>from + size</code>：</p><ul><li>优点：支持随机翻页</li><li>缺点：深度分页问题，默认查询上限（from + size）是10000</li><li>场景：百度、京东、谷歌、淘宝这样的随机翻页搜索</li></ul></li><li><p><code>after search</code>：</p><ul><li>优点：没有查询上限（单次查询的 size 不超过10000）</li><li>缺点：只能向后逐页查询，不支持随机翻页</li><li>场景：没有随机翻页需求的搜索，例如手机向下滚动翻页</li></ul></li><li><p><code>scroll</code>：</p><ul><li>优点：没有查询上限（单次查询的 size 不超过10000）</li><li>缺点：会有额外内存消耗，并且搜索结果是非实时的</li><li>场景：海量数据的获取和迁移。从 ES7.1 开始不推荐，建议用 after search 方案。</li></ul></li></ul><h3 id="高亮" tabindex="-1">高亮 <a class="header-anchor" href="#高亮" aria-label="Permalink to &quot;高亮&quot;">​</a></h3><p>我们在百度，京东搜索时，关键字会变成红色，比较醒目，这叫高亮显示。</p><p>高亮显示的实现分为两步：</p><ol><li>给文档中的所有关键字都添加一个标签，例如 <code>&lt;em&gt;</code> 标签</li><li>页面给 <code>&lt;em&gt;</code> 标签编写 CSS 样式</li></ol><p>语法如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;match&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;{字段名称}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TEXT&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 查询条件，高亮一定要使用全文检索查询</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;highlight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;fields&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定要高亮的字段</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;{字段名称}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;pre_tags&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;em&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用来标记高亮字段的前置标签</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;post_tags&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;/em&gt;&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 用来标记高亮字段的后置标签</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>注意</strong>：</p><ul><li>高亮是对关键字高亮，因此 <strong>搜索条件必须带有关键字</strong>，而不能是范围查询</li><li>默认情况下，<strong>高亮的字段，必须与搜索指定的字段一致</strong>，否则无法高亮</li><li>如果要对 <strong>非搜索指定的字段</strong> 高亮，则需要添加一个属性：<code>&quot;required_field_match&quot;： &quot;false&quot;</code></li></ul><h2 id="数据聚合" tabindex="-1">数据聚合 <a class="header-anchor" href="#数据聚合" aria-label="Permalink to &quot;数据聚合&quot;">​</a></h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html" target="_blank" rel="noreferrer">聚合</a>（aggregations）可以让我们极其方便的实现对数据的统计、分析、运算。例如：</p><ul><li>什么品牌的手机最受欢迎？</li><li>这些手机的平均价格、最高价格、最低价格？</li><li>这些手机每月的销售情况如何？</li></ul><p>ES 实现这些统计功能，比关系型数据库要方便的多，而且查询速度非常快，可以实现近乎实时搜索的效果。</p><h3 id="聚合的种类" tabindex="-1">聚合的种类 <a class="header-anchor" href="#聚合的种类" aria-label="Permalink to &quot;聚合的种类&quot;">​</a></h3><p>聚合常见的有三类：</p><ul><li><p>**桶（Bucket）**聚合：用来对文档做分组</p><ul><li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组</li><li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li></ul></li><li><p>**度量（Metric）**聚合：用以计算一些值，比如：最大值、最小值、平均值等</p><ul><li>Avg：求平均值</li><li>Max：求最大值</li><li>Min：求最小值</li><li>Stats：同时求 max、min、avg、sum 等</li></ul></li><li><p>**管道（pipeline）**聚合：以其它聚合的结果为基础再做聚合</p></li></ul><p><strong>注意</strong>：参加聚合的字段必须是keyword、日期、数值、布尔类型</p><h3 id="dsl-实现聚合" tabindex="-1">DSL 实现聚合 <a class="header-anchor" href="#dsl-实现聚合" aria-label="Permalink to &quot;DSL 实现聚合&quot;">​</a></h3><p>现在，我们要统计所有数据中的酒店品牌有几种，其实就是按照品牌对数据分组。此时可以根据酒店品牌的名称做聚合，也就是Bucket聚合。</p><h4 id="bucket-聚合语法" tabindex="-1">Bucket 聚合语法 <a class="header-anchor" href="#bucket-聚合语法" aria-label="Permalink to &quot;Bucket 聚合语法&quot;">​</a></h4><p>语法如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置 size 为0，仅返回聚合数据，不返回任何搜索结果文档</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;aggs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义聚合操作</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;brandAgg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义聚合名称，此例中聚合品牌信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;terms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 聚合的类型，这里使用 terms 聚合，对文档中的品牌字段进行分组</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;brand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定聚合字段为 brand</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 限制返回的品牌数量为前 20 个最常见的品牌，默认为 10 个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>结果如图：</p><p><img src="`+_+`" alt="image-20210723171948228"></p><h4 id="聚合结果排序" tabindex="-1">聚合结果排序 <a class="header-anchor" href="#聚合结果排序" aria-label="Permalink to &quot;聚合结果排序&quot;">​</a></h4><p>默认情况下，Bucket 聚合会统计 Bucket 内的文档数量，记为 _count，并且按照 _count 降序排序。</p><p>我们可以指定 order 属性，自定义聚合的排序方式：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;aggs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;brandAgg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;terms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;brand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 按照 _count 升序排列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="限定聚合范围" tabindex="-1">限定聚合范围 <a class="header-anchor" href="#限定聚合范围" aria-label="Permalink to &quot;限定聚合范围&quot;">​</a></h4><p>默认情况下，Bucket 聚合是对索引库的所有文档做聚合，但真实场景下，用户会输入搜索条件，因此聚合必须是对搜索结果再进行聚合。</p><p>那么聚合必须添加限定条件。</p><p>我们可以限定要聚合的文档范围，只要添加 query 条件即可，这种方法是在查询结果上执行聚合：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;range&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;lte&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 只对 200 元以下的文档聚合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;aggs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;brandAgg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;terms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;brand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="metric-聚合语法" tabindex="-1">Metric 聚合语法 <a class="header-anchor" href="#metric-聚合语法" aria-label="Permalink to &quot;Metric 聚合语法&quot;">​</a></h4><p>上节课，我们对酒店按照品牌分组，形成了一个个桶。现在我们需要对桶内的酒店做运算，获取每个品牌的用户评分的 min、max、avg等值。</p><p>这就要用到 Metric 聚合了，例如 stat 聚合，就可以获取 min、max、avg 等结果。</p><p>语法如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不返回搜索结果，仅返回聚合数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;aggs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;brandAgg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义一个名为 &quot;brandAgg&quot; 的聚合任务</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;terms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 terms 聚合，对文档中的 &quot;brand&quot; 字段值进行分组</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;brand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定进行分组的字段名为 &quot;brand&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 限制返回的品牌分组数量为前 20 个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;aggs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在每个品牌分组内进行进一步的聚合</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;score_stats&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子聚合的名称为 &quot;score_stats&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;stats&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 stats 聚合来计算统计信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;score&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //  对 score 字段进行统计，计算 min、max、avg 等值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里的 score_stats 聚合是在 brandAgg 的聚合内部嵌套的子聚合，因为我们需要在每个桶分别计算。</p><p>另外，我们还可以给聚合结果做个排序，例如按照每个桶的酒店平均分做排序：</p><p><img src="`+D+`" alt="image-20210723172917636"></p><h2 id="自动补全" tabindex="-1">自动补全 <a class="header-anchor" href="#自动补全" aria-label="Permalink to &quot;自动补全&quot;">​</a></h2><p>当用户在搜索框输入字符时，我们应该提示出与该字符有关的候选搜索项，这种根据用户输入的内容，提示完整词条的功能，就是自动补全了。</p><p>在 Elasticsearch 中，自动补全是一个强大的功能，用于提高用户搜索体验，尤其是在实时搜索场景中。</p><h3 id="拼音分词器" tabindex="-1">拼音分词器 <a class="header-anchor" href="#拼音分词器" aria-label="Permalink to &quot;拼音分词器&quot;">​</a></h3><p>要想根据拼音字母来做补全，就必须对文档按照拼音分词。</p><p>在 GitHub 上有 Elasticsearch 的拼音分词插件，插件地址：[<a href="https://github.com/medcl/elasticsearch-analysis-pinyin" target="_blank" rel="noreferrer">https://github.com/medcl/elasticsearch-analysis-pinyin</a>]<a href="https://github.com/medcl/elasticsearch-analysis-pinyin()" target="_blank" rel="noreferrer">https://github.com/medcl/elasticsearch-analysis-pinyin()</a></p><p>安装步骤可以参考 IK 分词器的安装过程。</p><p>使用 Elasticsearch 的 <code>_analyze</code> API 测试分词器是如何拆分文本的：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">POST /_analyze</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;如家酒店还不错&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;analyzer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pinyin&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>结果：</p><p><img src="`+v+'" alt="image-20210723210126506"></p><h3 id="自定义分词器" tabindex="-1">自定义分词器 <a class="header-anchor" href="#自定义分词器" aria-label="Permalink to &quot;自定义分词器&quot;">​</a></h3><p>默认的拼音分词器会将每个汉字单独分为拼音，而我们希望的是每个词条形成一组拼音，需要对拼音分词器做一些个性化定制，形成我们的自定义分词器。</p><p>Elasticsearch 中分词器（analyzer）的组成分为三部分，并按照特定的顺序来处理文本：</p><ul><li><strong>Character Filters</strong>：在分词之前对原始文本进行预处理。常用于修正文本，如去除HTML编码、替换特定字符等。例如 <code>html_strip</code> 移除 HTML 标记，<code>pattern_replace</code> 使用正则表达式替换文本。</li><li><strong>Tokenizer</strong>：将字符串分解为单独的词条（terms 或 tokens）。这是分词器的核心。例如 <code>keyword</code>：不进行分词，整个字符串作为一个单独的词条。<code>ik_smart</code>：使用 IK 分词器进行智能分词，适合中文文本分析。</li><li><strong>Token Filters</strong>：对 tokenizer 输出的词条进行后处理，可以修改、添加或删除词条。例如 <code>lowercase</code>：将词条转换为小写。<code>synonym</code>：处理同义词。<code>pinyin</code>：将中文词条转换为拼音。</li></ul><p><img src="'+x+`" alt="image-20210723210427878"></p><p>创建、使用自定义分词器的语法如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PUT /{</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">索引库名称</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;settings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;analysis&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;analyzer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义分词器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;my_analyzer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 分词器名称</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;tokenizer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ik_max_word&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;filter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;py&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;filter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义 tokenizer filter</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 过滤器名称</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pinyin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 过滤器类型，这里是pinyin</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		  &quot;keep_full_pinyin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;keep_joined_full_pinyin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;keep_original&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;limit_first_letter_length&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;remove_duplicated_term&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;none_chinese_pinyin_tokenize&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;mappings&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;analyzer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_analyzer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;search_analyzer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ik_smart&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意：拼音分词器适合在创建倒排索引的时候使用，但不适合在搜索的时候使用，因为容易搜索到预期之外的同音字。</p><h3 id="自动补全查询" tabindex="-1">自动补全查询 <a class="header-anchor" href="#自动补全查询" aria-label="Permalink to &quot;自动补全查询&quot;">​</a></h3><p>Completion Suggester 是专为 <strong>快速提供搜索建议</strong> 而设计的功能。它基于一个自定义的数据结构，允许快速的查询和低延迟的响应，非常适合于实现自动补全功能。</p><p><strong>设置和使用：</strong></p><p>为了使用 Completion Suggester，你首先需要在索引的映射中定义一个类型为 <code>completion</code> 的字段。这里是一个基本的配置示例：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PUT /music</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;mappings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;suggest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;completion&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后，你可以在索引文档时填充这个字段：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">POST /music/_doc/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nevermind&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;suggest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;input&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nevermind&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nirvana&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 为建议项设置权重</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 Completion Suggester 查询建议：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET /music/_search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;suggest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;song-suggest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;prefix&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;completion&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;suggest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个查询中，我们搜索以 &quot;nev&quot; 开始的所有建议。Elasticsearch 将返回所有匹配的建议，根据设置的权重进行排序。</p><h2 id="数据同步" tabindex="-1">数据同步 <a class="header-anchor" href="#数据同步" aria-label="Permalink to &quot;数据同步&quot;">​</a></h2><h3 id="数据同步问题分析" tabindex="-1">数据同步问题分析 <a class="header-anchor" href="#数据同步问题分析" aria-label="Permalink to &quot;数据同步问题分析&quot;">​</a></h3><p>Elasticsearch 中的酒店数据来自于 MySQL 数据库，因此 MySQL 数据发生改变时，Elasticsearch 也必须跟着改变，这就是 Elasticsearch 与 MySQL 之间的 <strong>数据同步</strong>。</p><p>在微服务中，负责操作 MySQL 的业务与负责操作 Elasticsearch 的业务可能在两个 <strong>不同</strong> 的微服务上，数据同步该如何实现呢？</p><h4 id="方案一-同步调用" tabindex="-1">方案一：同步调用 <a class="header-anchor" href="#方案一-同步调用" aria-label="Permalink to &quot;方案一：同步调用&quot;">​</a></h4><p><img src="`+A+'" alt="image-20210723214931869"></p><p>流程如下：</p><ol><li>hotel-demo 对外提供 <strong>可以修改 elasticsearch 中的数据</strong> 的接口</li><li>酒店管理服务在完成数据库操作后，直接调用 hotel-demo 提供的接口</li></ol><p>优点：</p><ul><li><strong>简单直接</strong>：同步调用直接与数据库或目标服务进行通信，简化了实现过程，易于理解和实施。</li></ul><p>缺点：</p><ul><li><strong>高耦合性</strong>：同步调用通常意味着调用方和被调用方之间业务逻辑密切相关，一个服务的更改可能直接影响到另一个服务。</li><li><strong>阻塞性质</strong>：同步调用会阻塞调用方直到操作完成，这可能导致性能瓶颈，特别是在高并发场景下。</li></ul><h4 id="方案二-异步通知" tabindex="-1">方案二：异步通知 <a class="header-anchor" href="#方案二-异步通知" aria-label="Permalink to &quot;方案二：异步通知&quot;">​</a></h4><p><img src="'+P+'" alt="image-20210723215140735"></p><p>流程如下：</p><ol><li>hotel-admin 对 MySQL 数据库数据完成增、删、改操作后，给 MQ 发送消息</li><li>hotel-demo 监听 MQ，接收到消息后对 Elasticsearch 进行数据修改</li></ol><p>优点：</p><ul><li><strong>解耦业务逻辑</strong>：采用异步通知方式，各服务通过消息队列通信，降低了直接依赖，增加了系统的灵活性。</li><li><strong>提高响应性能</strong>：由于操作是非阻塞的，系统可以继续处理其他任务，从而提高整体效率。</li></ul><p>缺点：</p><ul><li><strong>消息系统依赖</strong>：此方法的可靠性高度依赖于消息队列的稳定性和持久性，任何消息系统的故障都可能导致数据不一致。</li><li><strong>复杂性增加</strong>：需要额外管理消息队列和处理可能的消息重复、消息丢失或顺序错乱的问题。</li></ul><h4 id="方案三-监听-binlog" tabindex="-1">方案三：监听 binlog <a class="header-anchor" href="#方案三-监听-binlog" aria-label="Permalink to &quot;方案三：监听 binlog&quot;">​</a></h4><p><img src="'+S+'" alt="image-20210723215518541"></p><p>流程如下：</p><ol><li>给 MySQL 开启 binlog 功能</li><li>MySQL 完成增、删、改操作都会记录在 binlog 中</li><li>hotel-demo 基于 canal 监听 binlog 变化，实时更新 Elasticsearch 中的内容</li></ol><p>优点：</p><ul><li><strong>服务解耦</strong>：通过监听数据库的 binlog 实现数据同步，不直接依赖于具体的应用逻辑，服务间完全解耦。</li><li><strong>实时性</strong>：binlog 提供了数据库变动的实时记录，可以快速响应数据库的更改。</li></ul><p>缺点：</p><ul><li><strong>数据库压力</strong>：开启 binlog 可能会增加数据库的 I/O 压力，特别是在大量写入的环境下。</li><li><strong>实现复杂</strong>：需要处理 binlog 的解析、网络延迟和数据转换等技术挑战。</li></ul><h2 id="集群" tabindex="-1">集群 <a class="header-anchor" href="#集群" aria-label="Permalink to &quot;集群&quot;">​</a></h2><h3 id="单机-elasticsearch-的问题" tabindex="-1">单机 Elasticsearch 的问题 <a class="header-anchor" href="#单机-elasticsearch-的问题" aria-label="Permalink to &quot;单机 Elasticsearch 的问题&quot;">​</a></h3><p><strong>海量数据存储问题</strong>：</p><ul><li><strong>描述</strong>：单机服务器的存储容量有限，当数据量增长到一定规模时，单个服务器可能无法存储所有数据或处理所有的搜索请求。</li><li><strong>解决策略</strong>：通过在 Elasticsearch 中启用 <strong>分片机制</strong>，可以将一个索引逻辑上分割成多个分片。每个分片本身是一个完全功能的索引，可以分布在集群中的不同节点上。这不仅有助于数据的横向扩展，也提高了数据处理能力。</li></ul><p><strong>单点故障问题</strong>：</p><ul><li><strong>描述</strong>：在单机部署中，如果服务器发生硬件故障或软件故障，可能会导致整个 Elasticsearch 服务不可用，数据丢失风险增加。</li><li><strong>解决策略</strong>：实施 <strong>副本策略</strong>，即为每个分片创建一个或多个副本（replicas），并将这些副本分布在不同的节点上。在主分片所在节点出现故障时，任一副本都可以提升为新的主分片，保证服务的持续可用和数据的完整性。</li></ul><h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><p><strong>节点（Node）</strong>：</p><ul><li>一个节点是 Elasticsearch 的一个实例，它是集群的一部分，可以存储数据，参与集群的索引和搜索操作。</li><li>节点类型包括：数据节点、主节点、协调节点、机器学习节点等。</li></ul><p><strong>集群（Cluster）</strong>：</p><ul><li>集群是一个或多个节点的集合，这些节点共同承载整个数据，并一起提供索引和搜索功能。</li><li>集群由一个唯一的标识名（cluster name）标识，确保节点加入正确的集群。</li></ul><p><strong>索引（Index）</strong>：</p><ul><li>索引是具有相似特征的文档集合。每个索引由一个或多个分片组成。</li><li>索引可以被定义为特定的文档类型的集合，例如客户数据、产品目录等。</li></ul><p><strong>分片（Shard）</strong>：</p><ul><li>分片是索引的一个部分，每个分片本身是一个功能完备、独立的 &quot;索引&quot;，可以被放置在集群中的任何节点上。</li><li>分片类型包括主分片和副本分片。副本是主分片的一个复制，可以提供数据冗余，保障高可用和故障转移。</li></ul><h3 id="elasticsearch-数据分片与备份策略" tabindex="-1">Elasticsearch 数据分片与备份策略 <a class="header-anchor" href="#elasticsearch-数据分片与备份策略" aria-label="Permalink to &quot;Elasticsearch 数据分片与备份策略&quot;">​</a></h3><p>在 Elasticsearch 中，为了增强数据的可用性和提高查询性能，数据会被分散存储在多个分片中。这些分片可以进一步被细分为两类：</p><ul><li><strong>主分片（Primary Shard）</strong>：每个索引的数据首先存储在主分片中。这是数据写入的起点。</li><li><strong>副本分片（Replica Shard）</strong>：每个主分片可以配置一个或多个副本。这些副本是主分片的精确复制，用于提供数据冗余，增强故障恢复能力，并提升读取操作的响应速度。</li></ul><p>虽然数据备份提供了高可用性，但副本的数量增加也意味着需要更多的硬件资源和成本。为了平衡高可用性和成本，可以采取以下策略：</p><ul><li><strong>数据分片</strong>：将数据均匀分布到不同的物理节点上。</li><li><strong>分片备份</strong>：为每个分片创建至少一个副本，并将副本存储在不同的节点上，以实现互相备份。</li></ul><p>假设我们有三个节点和三个分片，每个分片有一个副本：</p><ul><li><strong>Node0</strong>：存储 <code>shard0</code>（主）和 <code>shard1</code>（副本）</li><li><strong>Node1</strong>：存储 <code>shard1</code>（主）和 <code>shard2</code>（副本）</li><li><strong>Node2</strong>：存储 <code>shard2</code>（主）和 <code>shard0</code>（副本）</li></ul><p>通过这种方法，即便单个节点出现故障，由于每个分片都有至少一个副本存在于其他节点，这种配置优化了资源使用，避免了不必要的成本开销。</p><h3 id="集群脑裂问题" tabindex="-1">集群脑裂问题 <a class="header-anchor" href="#集群脑裂问题" aria-label="Permalink to &quot;集群脑裂问题&quot;">​</a></h3><p>在 Elasticsearch 中，集群由多个节点组成，每个节点可以承担不同的角色或职责。根据节点配置和集群的需求，Elasticsearch 支持不同类型的节点，使得集群可以更加灵活地进行扩展和优化。</p><h4 id="节点职责划分" tabindex="-1">节点职责划分 <a class="header-anchor" href="#节点职责划分" aria-label="Permalink to &quot;节点职责划分&quot;">​</a></h4><table tabindex="0"><thead><tr><th>节点类型</th><th>配置参数</th><th>默认值</th><th>节点职责</th></tr></thead><tbody><tr><td>master（主节点）</td><td>node.master</td><td>true</td><td>主节点可以管理和记录集群状态，<br>决定分片在哪个节点，处理创建和删除索引库的请求</td></tr><tr><td>data（数据节点）</td><td>node.mdata</td><td>true</td><td>存储数据、搜集、聚合、CRUD</td></tr><tr><td>ingest（摄取节点）</td><td>node.ingest</td><td>true</td><td>数据存储之前的预处理</td></tr><tr><td>coordinating（协调节点）</td><td>上面3个参数都为false，则为coordinating节点</td><td>无</td><td>路由请求到其他节点，合并其他节点处理的结果并返回给用户</td></tr></tbody></table><p>默认情况下，每个节点都可以承担所有角色，即主节点（master node）、数据节点（data node）、协调节点（coordinating node）、和摄取节点（ingest node）。</p><p>这种配置在小型或开发环境中可能足够，但在生产环境或处理大规模数据时，将集群职责分离是一种更优的做法。</p><h4 id="为什么要进行职责分离" tabindex="-1">为什么要进行职责分离 <a class="header-anchor" href="#为什么要进行职责分离" aria-label="Permalink to &quot;为什么要进行职责分离&quot;">​</a></h4><p><strong>性能优化</strong>：</p><ul><li><strong>专用资源</strong>：不同类型的节点需要不同的硬件资源。例如，数据节点可能需要更多的磁盘空间和 I/O 优化，而主节点则可能需要更快的 CPU 来处理集群状态变更。</li><li><strong>避免资源竞争</strong>：单一节点同时处理太多职责会导致资源竞争，如 CPU 和内存，从而影响性能。</li></ul><p><strong>增强稳定性</strong>：</p><ul><li><strong>隔离故障</strong>：将职责分开可以减少单点故障的影响。例如，主节点的问题不会影响到数据节点的数据服务能力。</li><li><strong>管理复杂性</strong>：简化节点角色可以使集群管理更加直观和可控。</li></ul><p><strong>提高可扩展性</strong>：</p><ul><li><strong>灵活扩展</strong>：根据需要独立增加特定类型的节点，例如在数据量增加时添加数据节点，或在查询量增加时添加协调节点。</li></ul><p>一个典型的大型生产 Elasticsearch 集群可能包括几个专用主节点（避免选举问题），多个数据节点（提供存储和查询处理能力），若干摄取节点（处理数据预处理），以及一个或多个专用协调节点（处理客户端请求和结果聚合）。</p><p><img src="'+T+'" alt="image-20210723223629142"></p><p>通过这种方式，每个节点可以根据其职责进行优化配置，从而最大化整个集群的性能和效率。</p><h4 id="脑裂问题" tabindex="-1">脑裂问题 <a class="header-anchor" href="#脑裂问题" aria-label="Permalink to &quot;脑裂问题&quot;">​</a></h4><p>脑裂（split-brain）主要指的是集群中的节点因为某些原因（通常是网络问题）失去联系，从而造成集群被分成两个或多个独立的部分，每个部分都可能自行选举出一个新的主节点。</p><p>这种情况下，每个分割的集群部分都会认为自己是有效的集群并独立接受数据更新，导致数据不一致的问题。</p><p><strong>原因</strong>：</p><ul><li><strong>网络分区</strong>：最常见的原因是网络问题，导致集群中的节点之间无法通信。</li><li><strong>硬件故障</strong>：服务器硬件故障或数据中心问题也可能导致节点间通信中断。</li><li><strong>配置错误</strong>：错误的配置也可能导致节点之间通信失败或不稳定。</li></ul><p><strong>后果</strong>：</p><ul><li><strong>数据不一致</strong>：不同的集群部分可能会对相同的数据执行不同的更新操作，导致数据状态不一致。</li><li><strong>数据丢失</strong>：当网络恢复后，集群需要解决冲突的数据版本，可能会导致一些更新被回滚。</li><li><strong>资源浪费</strong>：集群的资源可能会因为处理分裂后额外的负载而被过度消耗。</li></ul><h3 id="防止脑裂问题的策略" tabindex="-1">防止脑裂问题的策略 <a class="header-anchor" href="#防止脑裂问题的策略" aria-label="Permalink to &quot;防止脑裂问题的策略&quot;">​</a></h3><p>为了避免脑裂问题，Elasticsearch 提供了多种机制和最佳实践：</p><ul><li><p><strong>正确配置主节点的数量</strong>：</p><ul><li>建议配置奇数个主节点（通常是3个），以确保总是有一个多数派可以选举出一个唯一的主节点。</li><li>使用 <code>discovery.zen.minimum_master_nodes</code> 设置在 Elasticsearch 6.x 或更早版本中确保至少有 N/2+1（N 是主节点总数）的节点同意才能形成一个主节点。在 Elasticsearch 7.x 及更高版本中，这一配置已被自动处理，通过设置 <code>cluster.initial_master_nodes</code> 列表中的节点来参与首次选举。</li></ul></li><li><p><strong>使用专用主节点</strong>：配置一些节点专门作为主节点，这些节点不存储数据，只负责集群状态的管理，从而减少因为资源争用导致的问题。</p></li><li><p><strong>网络和硬件的可靠性</strong>：确保集群的网络连接稳定可靠，并在数据中心内部署高质量的硬件。</p></li><li><p><strong>监控和警报</strong>：实施监控系统来监控集群状态和网络状况，一旦检测到异常立即报警。</p></li><li><p><strong>分散节点部署</strong>：物理上分散部署节点，可以降低单一事件（如数据中心故障）影响整个集群的风险。</p></li></ul><h3 id="分布式存储的流程" tabindex="-1">分布式存储的流程 <a class="header-anchor" href="#分布式存储的流程" aria-label="Permalink to &quot;分布式存储的流程&quot;">​</a></h3><p>当新增文档时，为了保证数据均衡，应该尽量将数据保存到不同的分片中：</p><ul><li>当文档被索引到 Elasticsearch 时，它首先通过一致性哈希算法被路由到一个特定的主分片。</li><li>每个文档都根据其 ID 或自定义路由值被分配到特定的主分片。这确保了数据均匀分布在所有可用的主分片上。</li></ul><p>一致性哈希算法：</p><p><img src="'+j+'" alt="image-20210723224354904"></p><p>注意，算法与分片数量有关，所以索引中的主分片数量在创建索引时就要确定，并且在索引的生命周期中不能更改！</p><h3 id="分布式查询的流程" tabindex="-1">分布式查询的流程 <a class="header-anchor" href="#分布式查询的流程" aria-label="Permalink to &quot;分布式查询的流程&quot;">​</a></h3><ol><li><strong>接收查询请求</strong>：当客户端发送查询请求到 Elasticsearch 集群时，该请求首先被路由到集群中的一个节点。这个节点被称为协调节点（coordinating node）。</li><li><strong>查询解析和路由</strong>：协调节点解析查询请求，确定需要涉及哪些索引和分片。因为每个索引都可能被分割成多个主分片和副本分片，且这些分片分布在不同的节点上，协调节点需要计算出哪些节点持有相关的分片。</li><li><strong>分发子查询</strong>：协调节点将查询分发到持有相关分片的所有节点。这些节点称为数据节点（data nodes）。每个数据节点将针对其持有的分片本地执行查询。</li><li><strong>本地查询执行</strong>：每个数据节点对其分片内的数据执行查询操作，并生成局部结果。这一步涉及到搜索数据、评分（如果是全文搜索）和聚合等操作。</li><li><strong>结果收集和汇总</strong>：一旦各个数据节点完成了对其分片的查询，它们将结果发送回协调节点。协调节点随后将这些结果合并或汇总，以形成最终的查询结果。</li><li><strong>返回最终结果</strong>：协调节点将最终的查询结果返回给客户端。这一结果可能包含了来自多个分片的数据，经过排序、过滤和聚合处理。</li></ol><h3 id="故障转移" tabindex="-1">故障转移 <a class="header-anchor" href="#故障转移" aria-label="Permalink to &quot;故障转移&quot;">​</a></h3><p>在 Elasticsearch 集群中，故障转移是一个关键的机制，旨在保证服务在面对硬件或软件故障时仍能继续运行，确保数据的可用性和搜索的连续性。</p><p>故障转移主要涉及自动检测节点失效、重新分配任务以及恢复服务。</p><h4 id="主节点故障转移" tabindex="-1">主节点故障转移 <a class="header-anchor" href="#主节点故障转移" aria-label="Permalink to &quot;主节点故障转移&quot;">​</a></h4><p>主节点负责集群的管理和元数据操作，如创建或删除索引、添加或删除节点等。主节点的故障转移过程：</p><ol><li><strong>节点失效检测</strong>：Elasticsearch 使用心跳和超时机制来监测节点状态。如果主节点在配置的超时时间内未发送心跳，它将被认为是失效的。</li><li><strong>新主节点的选举</strong>：当集群检测到当前主节点失效后，剩余的 master-eligible 节点（即配置为可能成为主节点的节点）会进行新的主节点选举。通常需要集群中多数节点（<code>N/2 + 1</code>）的确认来完成新主节点的选举，以避免脑裂问题。</li><li><strong>集群状态恢复</strong>：一旦新的主节点被选举出来，它将从最近的集群状态开始管理集群。这包括处理挂起的任务和确保集群元数据的最新性。</li></ol><h4 id="数据节点故障转移" tabindex="-1">数据节点故障转移 <a class="header-anchor" href="#数据节点故障转移" aria-label="Permalink to &quot;数据节点故障转移&quot;">​</a></h4><p>数据节点存储实际的索引数据，并执行数据查询和处理任务。数据节点的故障转移过程：</p><ol><li><strong>副本分片激活</strong>：每个主分片在集群中有一个或多个副本分片。当一个数据节点失效，其上的主分片如果有对应的副本分片，这些副本分片将会被提升为新的主分片。这个过程是自动的，确保数据的持续可用性和查询的无缝执行。</li><li><strong>分片重新分配</strong>：当副本分片被提升为主分片后，Elasticsearch 将根据集群的当前状态和配置的分片分配策略，自动在其他健康的节点上创建新的副本分片。这帮助保持数据的冗余和负载均衡。</li><li><strong>数据同步</strong>：新的副本分片需要从对应的主分片同步数据。这个过程确保了新副本分片的数据完整性和一致性。</li></ol><h4 id="故障转移的挑战和最佳实践" tabindex="-1">故障转移的挑战和最佳实践 <a class="header-anchor" href="#故障转移的挑战和最佳实践" aria-label="Permalink to &quot;故障转移的挑战和最佳实践&quot;">​</a></h4><ul><li><strong>数据一致性</strong>：在故障转移过程中保持数据的一致性是一个挑战。Elasticsearch 通过同步写入主分片和所有副本分片的机制来保证一致性。</li><li><strong>性能影响</strong>：故障转移时，数据的重新分配和同步可能会对集群性能产生暂时影响。合理配置副本数量和分片大小可以帮助减轻这些影响。</li><li><strong>监控和警告</strong>：配置适当的监控和警报系统可以及时发现并响应节点故障，加速故障处理过程。</li></ul>',464)]))}const U=i(L,[["render",w]]);export{O as __pageData,U as default};
