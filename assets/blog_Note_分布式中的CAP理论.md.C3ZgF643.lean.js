import{_ as o,o as r,c as l,a6 as n}from"./chunks/framework.BkI9ovSD.js";const s="/assets/f44580f821ddc1896e820a8051dc5c70.D0W2SOPl.png",P=JSON.parse('{"title":"分布式中的 CAP 理论","description":"","frontmatter":{"title":"分布式中的 CAP 理论","date":"2024-07-05T00:00:00.000Z","tags":["CAP"],"categories":["笔记"]},"headers":[],"relativePath":"blog/Note/分布式中的CAP理论.md","filePath":"blog/Note/分布式中的CAP理论.md","lastUpdated":1734486541000}'),i={name:"blog/Note/分布式中的CAP理论.md"};function a(g,t,e,p,c,d){return r(),l("div",{"data-pagefind-body":!0},t[0]||(t[0]=[n('<h1 id="分布式中的-cap-理论" tabindex="-1">分布式中的 CAP 理论 <a class="header-anchor" href="#分布式中的-cap-理论" aria-label="Permalink to &quot;分布式中的 CAP 理论&quot;">​</a></h1><h2 id="什么是-cap" tabindex="-1">什么是 CAP <a class="header-anchor" href="#什么是-cap" aria-label="Permalink to &quot;什么是 CAP&quot;">​</a></h2><p>CAP 理论是指在一个分布式计算系统中，当涉及读写操作时，特别是在网络分区（即网络中断）发生时，系统只能同时满足以下 3 个属性中的 2 个：一致性（<strong>C</strong>onsistency）、可用性（<strong>A</strong>vailability）和分区容错性（<strong>P</strong>artition tolerance），另外 1 个必须被牺牲。</p><p><img src="'+s+'" alt="img"></p><p><strong>一致性（Consistency）</strong>：</p><ul><li>指的是所有节点在同一时间看到的数据是相同的。</li><li>换句话说，一旦数据更新成功，所有的客户端都应该只能读取到最新的值。</li><li>这与传统的数据库事务中强一致性的概念相似。</li><li>通俗的讲：要么返回一个错误，要么返回绝对一致的最新数据，其强调的是数据正确。</li></ul><p><strong>可用性（Availability）</strong>：</p><ul><li>指系统每个请求都能在有限的时间内得到响应，无论系统的状态如何。</li><li>这意味着系统必须保证响应客户端的请求，即使某些节点出现故障。</li><li>通俗的讲：系统一定会给出响应，不会返回错误或者超时，但不保证数据是最新的，强调的是不出错。</li></ul><p><strong>分区容错性（Partition tolerance）</strong>：</p><ul><li>指系统即使在某些信息的传递失败的情况下（例如网络问题导致一部分节点与系统其他部分失去联系），也能继续运行。</li><li>在实际的分布式系统中，<strong>网络分区</strong>（网络断开或某些节点之间无法通信，导致系统内部的通信受阻）几乎是必然的，因此分区容忍通常是必须要保证的。</li><li>通俗的讲：不管系统内部出现何种数据同步问题，系统也要一直运行，强调的是不挂掉。</li></ul><h2 id="为什么三者不可得兼" tabindex="-1">为什么三者不可得兼 <a class="header-anchor" href="#为什么三者不可得兼" aria-label="Permalink to &quot;为什么三者不可得兼&quot;">​</a></h2><p>首先，<strong>网络分区的不可避免性</strong>：分布式系统是避免不了网络分区的，如果分布式系统不满足分区容错性，系统可能会遇到一系列问题，导致严重的服务中断和数据一致性问题，所以分区容错性（P）是一定要满足的。</p><p>在此基础上，<strong>一致性与可用性的冲突</strong>：</p><ul><li><p><strong>保持一致性</strong></p><p>当网络分区发生，保持一致性（C）意味着任何节点在执行读写操作时必须保证数据的一致性。</p><p>例如，如果数据更新在一个分区中进行，其他分区必须等待更新完成才能进行读取，这样可以<strong>保证读取的数据是最新且一致的</strong>。</p><p>然而，在等待的期间，系统的这部分可能无法对外提供服务，这就牺牲了可用性（A）。</p></li><li><p><strong>保持可用性</strong></p><p>如果优先保持系统的可用性，即使在网络分区发生时也能确保每个请求都能得到响应，这可能<strong>导致不同分区之间数据不一致</strong>。</p><p>某个分区可能只能访问到旧的数据，或者不同分区中的数据更新无法即时同步。</p></li></ul><p>由此可知，在满足分区容错性的前提下，一致性和可用性的反应几乎是矛盾的。</p><h2 id="cap-的权衡" tabindex="-1">CAP 的权衡 <a class="header-anchor" href="#cap-的权衡" aria-label="Permalink to &quot;CAP 的权衡&quot;">​</a></h2><p>CAP三者不可同得，那么必须得做一些权衡：</p><ul><li><strong>CA - 一致性和可用性</strong>：如果一个系统设计为在网络分区未发生时优先保证一致性和可用性，那么一旦出现网络分区，系统将无法继续提供服务（<strong>不考虑这种方案</strong>）</li><li><strong>CP - 一致性和分区容忍性</strong>：系统在网络分区发生时依然保持数据一致性，但可能无法对外提供服务，牺牲了可用性。</li><li><strong>AP - 可用性和分区容忍性</strong>：系统即使在网络分区发生的情况下也能对外提供服务，但系统的一些数据可能不是最新的，牺牲了一致性。</li></ul><h2 id="具体的方案选择" tabindex="-1">具体的方案选择 <a class="header-anchor" href="#具体的方案选择" aria-label="Permalink to &quot;具体的方案选择&quot;">​</a></h2><p>具体的方案选择，取决于实际的业务场景。</p><p><strong>金融系统（如银行和交易平台）</strong>：</p><ul><li><strong>一致性（C）</strong>：金融系统强调交易的精确性和一致性，确保账目准确无误，因此通常优先考虑一致性。</li><li><strong>分区容错性（P）</strong>：同时，为了保证服务的连续性，这些系统也需要能够处理网络分区。</li><li>这些系统可能牺牲一定程度的 <strong>可用性</strong>，接受在极端情况下部分服务可能会暂时不可用，以保证数据的一致性和系统的整体稳定。</li></ul><p><strong>电子商务平台</strong>：</p><ul><li><strong>可用性（A）</strong>：用户体验通常是电商平台的首要考虑因素，需要确保用户随时都能浏览商品和下单。</li><li><strong>分区容错性（P）</strong>：电商平台还必须处理网络分区的问题，确保即使某些组件失联，仍能提供服务。</li><li>电商平台可能在数据 <strong>一致性</strong> 上做出一些妥协，例如允许数据最终一致性，以提高系统的可用性。</li></ul><p><strong>社交媒体和内容分发网络（CDN）</strong>：</p><ul><li><strong>可用性（A）</strong>：这类应用强调内容的快速加载和高响应速度，因此通常优先考虑可用性。</li><li><strong>分区容错性（P）</strong>：同时，它们也需要能够在部分网络故障的情况下继续运行。</li><li>社交媒体平台可能接受一定程度的 <strong>数据不一致</strong>（如帖子的延迟显示或更新），以确保用户界面的响应性和快速访问。</li></ul><p><strong>实时数据处理和分析系统</strong>：</p><ul><li><strong>一致性（C）</strong>：如果涉及到关键决策支持或数据精度要求高的业务，一致性可能是首选。</li><li><strong>分区容错性（P）</strong>：这些系统也需要能够应对网络分区，保证数据处理的连续性。</li><li>在某些情况下，这类系统可能会牺牲一些 <strong>可用性</strong>，以确保数据处理的准确性。</li></ul>',28)]))}const h=o(i,[["render",a]]);export{P as __pageData,h as default};
